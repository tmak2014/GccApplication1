
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000c8c  00800200  00002bb8  00002c4c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002bb8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003c2  00800e8c  00800e8c  000038d8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000038d8  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000180  00000000  00000000  00003934  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000004bb  00000000  00000000  00003ab4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002a4c  00000000  00000000  00003f6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aef  00000000  00000000  000069bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000199c  00000000  00000000  000074aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006e4  00000000  00000000  00008e48  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000bae  00000000  00000000  0000952c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001610  00000000  00000000  0000a0da  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  0000b6ea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	65 c0       	rjmp	.+202    	; 0xcc <__ctors_end>
       2:	00 00       	nop
       4:	84 c0       	rjmp	.+264    	; 0x10e <__bad_interrupt>
       6:	00 00       	nop
       8:	82 c0       	rjmp	.+260    	; 0x10e <__bad_interrupt>
       a:	00 00       	nop
       c:	80 c0       	rjmp	.+256    	; 0x10e <__bad_interrupt>
       e:	00 00       	nop
      10:	7e c0       	rjmp	.+252    	; 0x10e <__bad_interrupt>
      12:	00 00       	nop
      14:	7c c0       	rjmp	.+248    	; 0x10e <__bad_interrupt>
      16:	00 00       	nop
      18:	7a c0       	rjmp	.+244    	; 0x10e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	78 c0       	rjmp	.+240    	; 0x10e <__bad_interrupt>
      1e:	00 00       	nop
      20:	76 c0       	rjmp	.+236    	; 0x10e <__bad_interrupt>
      22:	00 00       	nop
      24:	74 c0       	rjmp	.+232    	; 0x10e <__bad_interrupt>
      26:	00 00       	nop
      28:	72 c0       	rjmp	.+228    	; 0x10e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	70 c0       	rjmp	.+224    	; 0x10e <__bad_interrupt>
      2e:	00 00       	nop
      30:	6e c0       	rjmp	.+220    	; 0x10e <__bad_interrupt>
      32:	00 00       	nop
      34:	6c c0       	rjmp	.+216    	; 0x10e <__bad_interrupt>
      36:	00 00       	nop
      38:	6a c0       	rjmp	.+212    	; 0x10e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	68 c0       	rjmp	.+208    	; 0x10e <__bad_interrupt>
      3e:	00 00       	nop
      40:	66 c0       	rjmp	.+204    	; 0x10e <__bad_interrupt>
      42:	00 00       	nop
      44:	64 c0       	rjmp	.+200    	; 0x10e <__bad_interrupt>
      46:	00 00       	nop
      48:	62 c0       	rjmp	.+196    	; 0x10e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	60 c0       	rjmp	.+192    	; 0x10e <__bad_interrupt>
      4e:	00 00       	nop
      50:	5e c0       	rjmp	.+188    	; 0x10e <__bad_interrupt>
      52:	00 00       	nop
      54:	5c c0       	rjmp	.+184    	; 0x10e <__bad_interrupt>
      56:	00 00       	nop
      58:	5a c0       	rjmp	.+180    	; 0x10e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	58 c0       	rjmp	.+176    	; 0x10e <__bad_interrupt>
      5e:	00 00       	nop
      60:	56 c0       	rjmp	.+172    	; 0x10e <__bad_interrupt>
      62:	00 00       	nop
      64:	24 c4       	rjmp	.+2120   	; 0x8ae <__vector_25>
      66:	00 00       	nop
      68:	52 c0       	rjmp	.+164    	; 0x10e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	50 c0       	rjmp	.+160    	; 0x10e <__bad_interrupt>
      6e:	00 00       	nop
      70:	4e c0       	rjmp	.+156    	; 0x10e <__bad_interrupt>
      72:	00 00       	nop
      74:	4c c0       	rjmp	.+152    	; 0x10e <__bad_interrupt>
      76:	00 00       	nop
      78:	4a c0       	rjmp	.+148    	; 0x10e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	48 c0       	rjmp	.+144    	; 0x10e <__bad_interrupt>
      7e:	00 00       	nop
      80:	46 c0       	rjmp	.+140    	; 0x10e <__bad_interrupt>
      82:	00 00       	nop
      84:	44 c0       	rjmp	.+136    	; 0x10e <__bad_interrupt>
      86:	00 00       	nop
      88:	42 c0       	rjmp	.+132    	; 0x10e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	40 c0       	rjmp	.+128    	; 0x10e <__bad_interrupt>
      8e:	00 00       	nop
      90:	13 c5       	rjmp	.+2598   	; 0xab8 <__vector_36>
      92:	00 00       	nop
      94:	3c c0       	rjmp	.+120    	; 0x10e <__bad_interrupt>
      96:	00 00       	nop
      98:	3a c0       	rjmp	.+116    	; 0x10e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	38 c0       	rjmp	.+112    	; 0x10e <__bad_interrupt>
      9e:	00 00       	nop
      a0:	36 c0       	rjmp	.+108    	; 0x10e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	34 c0       	rjmp	.+104    	; 0x10e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	32 c0       	rjmp	.+100    	; 0x10e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	30 c0       	rjmp	.+96     	; 0x10e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	2e c0       	rjmp	.+92     	; 0x10e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	2c c0       	rjmp	.+88     	; 0x10e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	2a c0       	rjmp	.+84     	; 0x10e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	28 c0       	rjmp	.+80     	; 0x10e <__bad_interrupt>
      be:	00 00       	nop
      c0:	26 c0       	rjmp	.+76     	; 0x10e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	24 c0       	rjmp	.+72     	; 0x10e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	22 c0       	rjmp	.+68     	; 0x10e <__bad_interrupt>
	...

000000cc <__ctors_end>:
      cc:	11 24       	eor	r1, r1
      ce:	1f be       	out	0x3f, r1	; 63
      d0:	cf ef       	ldi	r28, 0xFF	; 255
      d2:	d1 e2       	ldi	r29, 0x21	; 33
      d4:	de bf       	out	0x3e, r29	; 62
      d6:	cd bf       	out	0x3d, r28	; 61
      d8:	00 e0       	ldi	r16, 0x00	; 0
      da:	0c bf       	out	0x3c, r16	; 60

000000dc <__do_copy_data>:
      dc:	1e e0       	ldi	r17, 0x0E	; 14
      de:	a0 e0       	ldi	r26, 0x00	; 0
      e0:	b2 e0       	ldi	r27, 0x02	; 2
      e2:	e8 eb       	ldi	r30, 0xB8	; 184
      e4:	fb e2       	ldi	r31, 0x2B	; 43
      e6:	00 e0       	ldi	r16, 0x00	; 0
      e8:	0b bf       	out	0x3b, r16	; 59
      ea:	02 c0       	rjmp	.+4      	; 0xf0 <__do_copy_data+0x14>
      ec:	07 90       	elpm	r0, Z+
      ee:	0d 92       	st	X+, r0
      f0:	ac 38       	cpi	r26, 0x8C	; 140
      f2:	b1 07       	cpc	r27, r17
      f4:	d9 f7       	brne	.-10     	; 0xec <__do_copy_data+0x10>

000000f6 <__do_clear_bss>:
      f6:	22 e1       	ldi	r18, 0x12	; 18
      f8:	ac e8       	ldi	r26, 0x8C	; 140
      fa:	be e0       	ldi	r27, 0x0E	; 14
      fc:	01 c0       	rjmp	.+2      	; 0x100 <.do_clear_bss_start>

000000fe <.do_clear_bss_loop>:
      fe:	1d 92       	st	X+, r1

00000100 <.do_clear_bss_start>:
     100:	ae 34       	cpi	r26, 0x4E	; 78
     102:	b2 07       	cpc	r27, r18
     104:	e1 f7       	brne	.-8      	; 0xfe <.do_clear_bss_loop>
     106:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <main>
     10a:	0c 94 da 15 	jmp	0x2bb4	; 0x2bb4 <_exit>

0000010e <__bad_interrupt>:
     10e:	78 cf       	rjmp	.-272    	; 0x0 <__vectors>

00000110 <dxl_get_result>:
     110:	80 91 00 02 	lds	r24, 0x0200
     114:	90 91 01 02 	lds	r25, 0x0201
     118:	08 95       	ret

0000011a <dxl_set_txpacket_id>:
     11a:	80 93 8e 0e 	sts	0x0E8E, r24
     11e:	08 95       	ret

00000120 <dxl_set_txpacket_instruction>:
     120:	80 93 90 0e 	sts	0x0E90, r24
     124:	08 95       	ret

00000126 <dxl_set_txpacket_parameter>:
     126:	fc 01       	movw	r30, r24
     128:	e4 57       	subi	r30, 0x74	; 116
     12a:	f1 4f       	sbci	r31, 0xF1	; 241
     12c:	65 83       	std	Z+5, r22	; 0x05
     12e:	08 95       	ret

00000130 <dxl_set_txpacket_length>:
     130:	80 93 8f 0e 	sts	0x0E8F, r24
     134:	08 95       	ret

00000136 <dxl_get_rxpacket_error>:
     136:	20 e0       	ldi	r18, 0x00	; 0
     138:	30 e0       	ldi	r19, 0x00	; 0
     13a:	90 91 30 0f 	lds	r25, 0x0F30
     13e:	98 23       	and	r25, r24
     140:	11 f0       	breq	.+4      	; 0x146 <dxl_get_rxpacket_error+0x10>
     142:	21 e0       	ldi	r18, 0x01	; 1
     144:	30 e0       	ldi	r19, 0x00	; 0
     146:	c9 01       	movw	r24, r18
     148:	08 95       	ret

0000014a <dxl_get_rxpacket_length>:
     14a:	80 91 2f 0f 	lds	r24, 0x0F2F
     14e:	90 e0       	ldi	r25, 0x00	; 0
     150:	08 95       	ret

00000152 <dxl_get_rxpacket_parameter>:
     152:	fc 01       	movw	r30, r24
     154:	e4 5d       	subi	r30, 0xD4	; 212
     156:	f0 4f       	sbci	r31, 0xF0	; 240
     158:	85 81       	ldd	r24, Z+5	; 0x05
     15a:	90 e0       	ldi	r25, 0x00	; 0
     15c:	08 95       	ret

0000015e <dxl_makeword>:
     15e:	36 2f       	mov	r19, r22
     160:	20 e0       	ldi	r18, 0x00	; 0
     162:	28 0f       	add	r18, r24
     164:	39 1f       	adc	r19, r25
     166:	c9 01       	movw	r24, r18
     168:	08 95       	ret

0000016a <dxl_get_lowbyte>:
     16a:	28 2f       	mov	r18, r24
     16c:	30 e0       	ldi	r19, 0x00	; 0
     16e:	c9 01       	movw	r24, r18
     170:	08 95       	ret

00000172 <dxl_get_highbyte>:
     172:	80 70       	andi	r24, 0x00	; 0
     174:	89 2f       	mov	r24, r25
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	08 95       	ret

0000017a <dxl_rx_packet>:
     17a:	0f 93       	push	r16
     17c:	1f 93       	push	r17
     17e:	cf 93       	push	r28
     180:	df 93       	push	r29
     182:	80 91 74 0f 	lds	r24, 0x0F74
     186:	90 91 75 0f 	lds	r25, 0x0F75
     18a:	89 2b       	or	r24, r25
     18c:	09 f4       	brne	.+2      	; 0x190 <dxl_rx_packet+0x16>
     18e:	b8 c0       	rjmp	.+368    	; 0x300 <dxl_rx_packet+0x186>
     190:	80 91 8e 0e 	lds	r24, 0x0E8E
     194:	8e 3f       	cpi	r24, 0xFE	; 254
     196:	09 f4       	brne	.+2      	; 0x19a <dxl_rx_packet+0x20>
     198:	a9 c0       	rjmp	.+338    	; 0x2ec <dxl_rx_packet+0x172>
     19a:	80 91 00 02 	lds	r24, 0x0200
     19e:	90 91 01 02 	lds	r25, 0x0201
     1a2:	89 2b       	or	r24, r25
     1a4:	29 f4       	brne	.+10     	; 0x1b0 <dxl_rx_packet+0x36>
     1a6:	10 92 73 0f 	sts	0x0F73, r1
     1aa:	86 e0       	ldi	r24, 0x06	; 6
     1ac:	80 93 72 0f 	sts	0x0F72, r24
     1b0:	80 91 73 0f 	lds	r24, 0x0F73
     1b4:	90 e0       	ldi	r25, 0x00	; 0
     1b6:	60 91 72 0f 	lds	r22, 0x0F72
     1ba:	70 e0       	ldi	r23, 0x00	; 0
     1bc:	68 1b       	sub	r22, r24
     1be:	79 0b       	sbc	r23, r25
     1c0:	84 5d       	subi	r24, 0xD4	; 212
     1c2:	90 4f       	sbci	r25, 0xF0	; 240
     1c4:	49 d3       	rcall	.+1682   	; 0x858 <dxl_hal_rx>
     1c6:	90 91 73 0f 	lds	r25, 0x0F73
     1ca:	98 0f       	add	r25, r24
     1cc:	90 93 73 0f 	sts	0x0F73, r25
     1d0:	80 91 72 0f 	lds	r24, 0x0F72
     1d4:	98 17       	cp	r25, r24
     1d6:	18 f4       	brcc	.+6      	; 0x1de <dxl_rx_packet+0x64>
     1d8:	4a d2       	rcall	.+1172   	; 0x66e <dxl_hal_timeout>
     1da:	01 97       	sbiw	r24, 0x01	; 1
     1dc:	71 f0       	breq	.+28     	; 0x1fa <dxl_rx_packet+0x80>
     1de:	70 91 73 0f 	lds	r23, 0x0F73
     1e2:	47 2f       	mov	r20, r23
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	da 01       	movw	r26, r20
     1e8:	11 97       	sbiw	r26, 0x01	; 1
     1ea:	8a 01       	movw	r16, r20
     1ec:	02 50       	subi	r16, 0x02	; 2
     1ee:	10 40       	sbci	r17, 0x00	; 0
     1f0:	60 e0       	ldi	r22, 0x00	; 0
     1f2:	ed 01       	movw	r28, r26
     1f4:	c4 5d       	subi	r28, 0xD4	; 212
     1f6:	d0 4f       	sbci	r29, 0xF0	; 240
     1f8:	18 c0       	rjmp	.+48     	; 0x22a <dxl_rx_packet+0xb0>
     1fa:	80 91 73 0f 	lds	r24, 0x0F73
     1fe:	88 23       	and	r24, r24
     200:	09 f0       	breq	.+2      	; 0x204 <dxl_rx_packet+0x8a>
     202:	71 c0       	rjmp	.+226    	; 0x2e6 <dxl_rx_packet+0x16c>
     204:	86 e0       	ldi	r24, 0x06	; 6
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	73 c0       	rjmp	.+230    	; 0x2f0 <dxl_rx_packet+0x176>
     20a:	f9 01       	movw	r30, r18
     20c:	e4 5d       	subi	r30, 0xD4	; 212
     20e:	f0 4f       	sbci	r31, 0xF0	; 240
     210:	80 81       	ld	r24, Z
     212:	8f 3f       	cpi	r24, 0xFF	; 255
     214:	19 f4       	brne	.+6      	; 0x21c <dxl_rx_packet+0xa2>
     216:	81 81       	ldd	r24, Z+1	; 0x01
     218:	8f 3f       	cpi	r24, 0xFF	; 255
     21a:	61 f0       	breq	.+24     	; 0x234 <dxl_rx_packet+0xba>
     21c:	20 17       	cp	r18, r16
     21e:	31 07       	cpc	r19, r17
     220:	19 f4       	brne	.+6      	; 0x228 <dxl_rx_packet+0xae>
     222:	88 81       	ld	r24, Y
     224:	8f 3f       	cpi	r24, 0xFF	; 255
     226:	31 f0       	breq	.+12     	; 0x234 <dxl_rx_packet+0xba>
     228:	6f 5f       	subi	r22, 0xFF	; 255
     22a:	26 2f       	mov	r18, r22
     22c:	30 e0       	ldi	r19, 0x00	; 0
     22e:	2a 17       	cp	r18, r26
     230:	3b 07       	cpc	r19, r27
     232:	5c f3       	brlt	.-42     	; 0x20a <dxl_rx_packet+0x90>
     234:	66 23       	and	r22, r22
     236:	a1 f0       	breq	.+40     	; 0x260 <dxl_rx_packet+0xe6>
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	42 1b       	sub	r20, r18
     23c:	53 0b       	sbc	r21, r19
     23e:	08 c0       	rjmp	.+16     	; 0x250 <dxl_rx_packet+0xd6>
     240:	e4 5d       	subi	r30, 0xD4	; 212
     242:	f0 4f       	sbci	r31, 0xF0	; 240
     244:	df 01       	movw	r26, r30
     246:	a2 0f       	add	r26, r18
     248:	b3 1f       	adc	r27, r19
     24a:	8c 91       	ld	r24, X
     24c:	80 83       	st	Z, r24
     24e:	9f 5f       	subi	r25, 0xFF	; 255
     250:	e9 2f       	mov	r30, r25
     252:	f0 e0       	ldi	r31, 0x00	; 0
     254:	e4 17       	cp	r30, r20
     256:	f5 07       	cpc	r31, r21
     258:	9c f3       	brlt	.-26     	; 0x240 <dxl_rx_packet+0xc6>
     25a:	76 1b       	sub	r23, r22
     25c:	70 93 73 0f 	sts	0x0F73, r23
     260:	20 91 73 0f 	lds	r18, 0x0F73
     264:	80 91 72 0f 	lds	r24, 0x0F72
     268:	28 17       	cp	r18, r24
     26a:	28 f1       	brcs	.+74     	; 0x2b6 <dxl_rx_packet+0x13c>
     26c:	90 91 8e 0e 	lds	r25, 0x0E8E
     270:	80 91 2e 0f 	lds	r24, 0x0F2E
     274:	98 17       	cp	r25, r24
     276:	b9 f5       	brne	.+110    	; 0x2e6 <dxl_rx_packet+0x16c>
     278:	60 91 2f 0f 	lds	r22, 0x0F2F
     27c:	6c 5f       	subi	r22, 0xFC	; 252
     27e:	60 93 72 0f 	sts	0x0F72, r22
     282:	26 17       	cp	r18, r22
     284:	88 f4       	brcc	.+34     	; 0x2a8 <dxl_rx_packet+0x12e>
     286:	82 2f       	mov	r24, r18
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	70 e0       	ldi	r23, 0x00	; 0
     28c:	68 1b       	sub	r22, r24
     28e:	79 0b       	sbc	r23, r25
     290:	84 5d       	subi	r24, 0xD4	; 212
     292:	90 4f       	sbci	r25, 0xF0	; 240
     294:	e1 d2       	rcall	.+1474   	; 0x858 <dxl_hal_rx>
     296:	90 91 73 0f 	lds	r25, 0x0F73
     29a:	98 0f       	add	r25, r24
     29c:	90 93 73 0f 	sts	0x0F73, r25
     2a0:	80 91 72 0f 	lds	r24, 0x0F72
     2a4:	98 17       	cp	r25, r24
     2a6:	38 f0       	brcs	.+14     	; 0x2b6 <dxl_rx_packet+0x13c>
     2a8:	80 91 2f 0f 	lds	r24, 0x0F2F
     2ac:	a8 2f       	mov	r26, r24
     2ae:	b0 e0       	ldi	r27, 0x00	; 0
     2b0:	20 e0       	ldi	r18, 0x00	; 0
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	0c c0       	rjmp	.+24     	; 0x2ce <dxl_rx_packet+0x154>
     2b6:	85 e0       	ldi	r24, 0x05	; 5
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	90 93 01 02 	sts	0x0201, r25
     2be:	80 93 00 02 	sts	0x0200, r24
     2c2:	1e c0       	rjmp	.+60     	; 0x300 <dxl_rx_packet+0x186>
     2c4:	e4 5d       	subi	r30, 0xD4	; 212
     2c6:	f0 4f       	sbci	r31, 0xF0	; 240
     2c8:	82 81       	ldd	r24, Z+2	; 0x02
     2ca:	98 0f       	add	r25, r24
     2cc:	2f 5f       	subi	r18, 0xFF	; 255
     2ce:	e2 2f       	mov	r30, r18
     2d0:	f0 e0       	ldi	r31, 0x00	; 0
     2d2:	ae 17       	cp	r26, r30
     2d4:	bf 07       	cpc	r27, r31
     2d6:	b4 f7       	brge	.-20     	; 0x2c4 <dxl_rx_packet+0x14a>
     2d8:	a4 5d       	subi	r26, 0xD4	; 212
     2da:	b0 4f       	sbci	r27, 0xF0	; 240
     2dc:	90 95       	com	r25
     2de:	13 96       	adiw	r26, 0x03	; 3
     2e0:	8c 91       	ld	r24, X
     2e2:	89 17       	cp	r24, r25
     2e4:	19 f0       	breq	.+6      	; 0x2ec <dxl_rx_packet+0x172>
     2e6:	87 e0       	ldi	r24, 0x07	; 7
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <dxl_rx_packet+0x176>
     2ec:	81 e0       	ldi	r24, 0x01	; 1
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	90 93 01 02 	sts	0x0201, r25
     2f4:	80 93 00 02 	sts	0x0200, r24
     2f8:	10 92 75 0f 	sts	0x0F75, r1
     2fc:	10 92 74 0f 	sts	0x0F74, r1
     300:	df 91       	pop	r29
     302:	cf 91       	pop	r28
     304:	1f 91       	pop	r17
     306:	0f 91       	pop	r16
     308:	08 95       	ret

0000030a <dxl_tx_packet>:
     30a:	1f 93       	push	r17
     30c:	80 91 74 0f 	lds	r24, 0x0F74
     310:	90 91 75 0f 	lds	r25, 0x0F75
     314:	01 97       	sbiw	r24, 0x01	; 1
     316:	09 f4       	brne	.+2      	; 0x31a <dxl_tx_packet+0x10>
     318:	5d c0       	rjmp	.+186    	; 0x3d4 <dxl_tx_packet+0xca>
     31a:	81 e0       	ldi	r24, 0x01	; 1
     31c:	90 e0       	ldi	r25, 0x00	; 0
     31e:	90 93 75 0f 	sts	0x0F75, r25
     322:	80 93 74 0f 	sts	0x0F74, r24
     326:	80 91 8f 0e 	lds	r24, 0x0E8F
     32a:	89 39       	cpi	r24, 0x99	; 153
     32c:	40 f4       	brcc	.+16     	; 0x33e <dxl_tx_packet+0x34>
     32e:	90 91 90 0e 	lds	r25, 0x0E90
     332:	89 2f       	mov	r24, r25
     334:	81 50       	subi	r24, 0x01	; 1
     336:	86 30       	cpi	r24, 0x06	; 6
     338:	28 f0       	brcs	.+10     	; 0x344 <dxl_tx_packet+0x3a>
     33a:	93 38       	cpi	r25, 0x83	; 131
     33c:	19 f0       	breq	.+6      	; 0x344 <dxl_tx_packet+0x3a>
     33e:	84 e0       	ldi	r24, 0x04	; 4
     340:	90 e0       	ldi	r25, 0x00	; 0
     342:	2f c0       	rjmp	.+94     	; 0x3a2 <dxl_tx_packet+0x98>
     344:	8f ef       	ldi	r24, 0xFF	; 255
     346:	80 93 8c 0e 	sts	0x0E8C, r24
     34a:	80 93 8d 0e 	sts	0x0E8D, r24
     34e:	80 91 8f 0e 	lds	r24, 0x0E8F
     352:	a8 2f       	mov	r26, r24
     354:	b0 e0       	ldi	r27, 0x00	; 0
     356:	20 e0       	ldi	r18, 0x00	; 0
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	05 c0       	rjmp	.+10     	; 0x366 <dxl_tx_packet+0x5c>
     35c:	e4 57       	subi	r30, 0x74	; 116
     35e:	f1 4f       	sbci	r31, 0xF1	; 241
     360:	82 81       	ldd	r24, Z+2	; 0x02
     362:	98 0f       	add	r25, r24
     364:	2f 5f       	subi	r18, 0xFF	; 255
     366:	e2 2f       	mov	r30, r18
     368:	f0 e0       	ldi	r31, 0x00	; 0
     36a:	ae 17       	cp	r26, r30
     36c:	bf 07       	cpc	r27, r31
     36e:	b4 f7       	brge	.-20     	; 0x35c <dxl_tx_packet+0x52>
     370:	a4 57       	subi	r26, 0x74	; 116
     372:	b1 4f       	sbci	r27, 0xF1	; 241
     374:	90 95       	com	r25
     376:	13 96       	adiw	r26, 0x03	; 3
     378:	9c 93       	st	X, r25
     37a:	80 91 00 02 	lds	r24, 0x0200
     37e:	90 91 01 02 	lds	r25, 0x0201
     382:	06 97       	sbiw	r24, 0x06	; 6
     384:	02 97       	sbiw	r24, 0x02	; 2
     386:	08 f4       	brcc	.+2      	; 0x38a <dxl_tx_packet+0x80>
     388:	38 d1       	rcall	.+624    	; 0x5fa <dxl_hal_clear>
     38a:	10 91 8f 0e 	lds	r17, 0x0E8F
     38e:	1c 5f       	subi	r17, 0xFC	; 252
     390:	8c e8       	ldi	r24, 0x8C	; 140
     392:	9e e0       	ldi	r25, 0x0E	; 14
     394:	61 2f       	mov	r22, r17
     396:	70 e0       	ldi	r23, 0x00	; 0
     398:	35 d1       	rcall	.+618    	; 0x604 <dxl_hal_tx>
     39a:	18 17       	cp	r17, r24
     39c:	59 f0       	breq	.+22     	; 0x3b4 <dxl_tx_packet+0xaa>
     39e:	82 e0       	ldi	r24, 0x02	; 2
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	90 93 01 02 	sts	0x0201, r25
     3a6:	80 93 00 02 	sts	0x0200, r24
     3aa:	10 92 75 0f 	sts	0x0F75, r1
     3ae:	10 92 74 0f 	sts	0x0F74, r1
     3b2:	10 c0       	rjmp	.+32     	; 0x3d4 <dxl_tx_packet+0xca>
     3b4:	80 91 90 0e 	lds	r24, 0x0E90
     3b8:	82 30       	cpi	r24, 0x02	; 2
     3ba:	29 f4       	brne	.+10     	; 0x3c6 <dxl_tx_packet+0xbc>
     3bc:	80 91 92 0e 	lds	r24, 0x0E92
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	06 96       	adiw	r24, 0x06	; 6
     3c4:	02 c0       	rjmp	.+4      	; 0x3ca <dxl_tx_packet+0xc0>
     3c6:	86 e0       	ldi	r24, 0x06	; 6
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	40 d1       	rcall	.+640    	; 0x64c <dxl_hal_set_timeout>
     3cc:	10 92 01 02 	sts	0x0201, r1
     3d0:	10 92 00 02 	sts	0x0200, r1
     3d4:	1f 91       	pop	r17
     3d6:	08 95       	ret

000003d8 <dxl_txrx_packet>:
     3d8:	98 df       	rcall	.-208    	; 0x30a <dxl_tx_packet>
     3da:	80 91 00 02 	lds	r24, 0x0200
     3de:	90 91 01 02 	lds	r25, 0x0201
     3e2:	89 2b       	or	r24, r25
     3e4:	39 f4       	brne	.+14     	; 0x3f4 <dxl_txrx_packet+0x1c>
     3e6:	c9 de       	rcall	.-622    	; 0x17a <dxl_rx_packet>
     3e8:	80 91 00 02 	lds	r24, 0x0200
     3ec:	90 91 01 02 	lds	r25, 0x0201
     3f0:	05 97       	sbiw	r24, 0x05	; 5
     3f2:	c9 f3       	breq	.-14     	; 0x3e6 <dxl_txrx_packet+0xe>
     3f4:	08 95       	ret

000003f6 <dxl_write_word>:
     3f6:	28 2f       	mov	r18, r24
     3f8:	80 91 74 0f 	lds	r24, 0x0F74
     3fc:	90 91 75 0f 	lds	r25, 0x0F75
     400:	89 2b       	or	r24, r25
     402:	91 f4       	brne	.+36     	; 0x428 <dxl_write_word+0x32>
     404:	20 93 8e 0e 	sts	0x0E8E, r18
     408:	83 e0       	ldi	r24, 0x03	; 3
     40a:	80 93 90 0e 	sts	0x0E90, r24
     40e:	60 93 91 0e 	sts	0x0E91, r22
     412:	ca 01       	movw	r24, r20
     414:	40 93 92 0e 	sts	0x0E92, r20
     418:	80 70       	andi	r24, 0x00	; 0
     41a:	90 93 93 0e 	sts	0x0E93, r25
     41e:	85 e0       	ldi	r24, 0x05	; 5
     420:	80 93 8f 0e 	sts	0x0E8F, r24
     424:	d9 cf       	rjmp	.-78     	; 0x3d8 <dxl_txrx_packet>
     426:	08 95       	ret
     428:	ff cf       	rjmp	.-2      	; 0x428 <dxl_write_word+0x32>

0000042a <dxl_read_word>:
     42a:	28 2f       	mov	r18, r24
     42c:	80 91 74 0f 	lds	r24, 0x0F74
     430:	90 91 75 0f 	lds	r25, 0x0F75
     434:	89 2b       	or	r24, r25
     436:	b1 f4       	brne	.+44     	; 0x464 <dxl_read_word+0x3a>
     438:	20 93 8e 0e 	sts	0x0E8E, r18
     43c:	82 e0       	ldi	r24, 0x02	; 2
     43e:	80 93 90 0e 	sts	0x0E90, r24
     442:	60 93 91 0e 	sts	0x0E91, r22
     446:	80 93 92 0e 	sts	0x0E92, r24
     44a:	84 e0       	ldi	r24, 0x04	; 4
     44c:	80 93 8f 0e 	sts	0x0E8F, r24
     450:	c3 df       	rcall	.-122    	; 0x3d8 <dxl_txrx_packet>
     452:	30 91 32 0f 	lds	r19, 0x0F32
     456:	20 e0       	ldi	r18, 0x00	; 0
     458:	80 91 31 0f 	lds	r24, 0x0F31
     45c:	28 0f       	add	r18, r24
     45e:	31 1d       	adc	r19, r1
     460:	c9 01       	movw	r24, r18
     462:	08 95       	ret
     464:	ff cf       	rjmp	.-2      	; 0x464 <dxl_read_word+0x3a>

00000466 <dxl_write_byte>:
     466:	28 2f       	mov	r18, r24
     468:	80 91 74 0f 	lds	r24, 0x0F74
     46c:	90 91 75 0f 	lds	r25, 0x0F75
     470:	89 2b       	or	r24, r25
     472:	71 f4       	brne	.+28     	; 0x490 <dxl_write_byte+0x2a>
     474:	20 93 8e 0e 	sts	0x0E8E, r18
     478:	83 e0       	ldi	r24, 0x03	; 3
     47a:	80 93 90 0e 	sts	0x0E90, r24
     47e:	60 93 91 0e 	sts	0x0E91, r22
     482:	40 93 92 0e 	sts	0x0E92, r20
     486:	84 e0       	ldi	r24, 0x04	; 4
     488:	80 93 8f 0e 	sts	0x0E8F, r24
     48c:	a5 cf       	rjmp	.-182    	; 0x3d8 <dxl_txrx_packet>
     48e:	08 95       	ret
     490:	ff cf       	rjmp	.-2      	; 0x490 <dxl_write_byte+0x2a>

00000492 <dxl_read_byte>:
     492:	28 2f       	mov	r18, r24
     494:	80 91 74 0f 	lds	r24, 0x0F74
     498:	90 91 75 0f 	lds	r25, 0x0F75
     49c:	89 2b       	or	r24, r25
     49e:	91 f4       	brne	.+36     	; 0x4c4 <dxl_read_byte+0x32>
     4a0:	20 93 8e 0e 	sts	0x0E8E, r18
     4a4:	82 e0       	ldi	r24, 0x02	; 2
     4a6:	80 93 90 0e 	sts	0x0E90, r24
     4aa:	60 93 91 0e 	sts	0x0E91, r22
     4ae:	81 e0       	ldi	r24, 0x01	; 1
     4b0:	80 93 92 0e 	sts	0x0E92, r24
     4b4:	84 e0       	ldi	r24, 0x04	; 4
     4b6:	80 93 8f 0e 	sts	0x0E8F, r24
     4ba:	8e df       	rcall	.-228    	; 0x3d8 <dxl_txrx_packet>
     4bc:	80 91 31 0f 	lds	r24, 0x0F31
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	08 95       	ret
     4c4:	ff cf       	rjmp	.-2      	; 0x4c4 <dxl_read_byte+0x32>

000004c6 <dxl_ping>:
     4c6:	28 2f       	mov	r18, r24
     4c8:	80 91 74 0f 	lds	r24, 0x0F74
     4cc:	90 91 75 0f 	lds	r25, 0x0F75
     4d0:	89 2b       	or	r24, r25
     4d2:	51 f4       	brne	.+20     	; 0x4e8 <dxl_ping+0x22>
     4d4:	20 93 8e 0e 	sts	0x0E8E, r18
     4d8:	81 e0       	ldi	r24, 0x01	; 1
     4da:	80 93 90 0e 	sts	0x0E90, r24
     4de:	82 e0       	ldi	r24, 0x02	; 2
     4e0:	80 93 8f 0e 	sts	0x0E8F, r24
     4e4:	79 cf       	rjmp	.-270    	; 0x3d8 <dxl_txrx_packet>
     4e6:	08 95       	ret
     4e8:	ff cf       	rjmp	.-2      	; 0x4e8 <dxl_ping+0x22>

000004ea <dxl_terminate>:
     4ea:	86 c0       	rjmp	.+268    	; 0x5f8 <dxl_hal_close>
     4ec:	08 95       	ret

000004ee <dxl_initialize>:
     4ee:	0f 93       	push	r16
     4f0:	1f 93       	push	r17
     4f2:	8c 01       	movw	r16, r24
     4f4:	6f 5f       	subi	r22, 0xFF	; 255
     4f6:	7f 4f       	sbci	r23, 0xFF	; 255
     4f8:	88 27       	eor	r24, r24
     4fa:	77 fd       	sbrc	r23, 7
     4fc:	80 95       	com	r24
     4fe:	98 2f       	mov	r25, r24
     500:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <__floatsisf>
     504:	9b 01       	movw	r18, r22
     506:	ac 01       	movw	r20, r24
     508:	60 e0       	ldi	r22, 0x00	; 0
     50a:	74 e2       	ldi	r23, 0x24	; 36
     50c:	84 ef       	ldi	r24, 0xF4	; 244
     50e:	99 e4       	ldi	r25, 0x49	; 73
     510:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <__divsf3>
     514:	ab 01       	movw	r20, r22
     516:	bc 01       	movw	r22, r24
     518:	c8 01       	movw	r24, r16
     51a:	15 d0       	rcall	.+42     	; 0x546 <dxl_hal_open>
     51c:	89 2b       	or	r24, r25
     51e:	19 f4       	brne	.+6      	; 0x526 <dxl_initialize+0x38>
     520:	20 e0       	ldi	r18, 0x00	; 0
     522:	30 e0       	ldi	r19, 0x00	; 0
     524:	0c c0       	rjmp	.+24     	; 0x53e <dxl_initialize+0x50>
     526:	81 e0       	ldi	r24, 0x01	; 1
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	90 93 01 02 	sts	0x0201, r25
     52e:	80 93 00 02 	sts	0x0200, r24
     532:	10 92 75 0f 	sts	0x0F75, r1
     536:	10 92 74 0f 	sts	0x0F74, r1
     53a:	21 e0       	ldi	r18, 0x01	; 1
     53c:	30 e0       	ldi	r19, 0x00	; 0
     53e:	c9 01       	movw	r24, r18
     540:	1f 91       	pop	r17
     542:	0f 91       	pop	r16
     544:	08 95       	ret

00000546 <dxl_hal_open>:
     546:	ef 92       	push	r14
     548:	ff 92       	push	r15
     54a:	0f 93       	push	r16
     54c:	1f 93       	push	r17
     54e:	7a 01       	movw	r14, r20
     550:	8b 01       	movw	r16, r22
     552:	82 e4       	ldi	r24, 0x42	; 66
     554:	80 93 c0 00 	sts	0x00C0, r24
     558:	88 e9       	ldi	r24, 0x98	; 152
     55a:	80 93 c1 00 	sts	0x00C1, r24
     55e:	86 e0       	ldi	r24, 0x06	; 6
     560:	80 93 c2 00 	sts	0x00C2, r24
     564:	60 e0       	ldi	r22, 0x00	; 0
     566:	74 e2       	ldi	r23, 0x24	; 36
     568:	84 ef       	ldi	r24, 0xF4	; 244
     56a:	99 e4       	ldi	r25, 0x49	; 73
     56c:	a8 01       	movw	r20, r16
     56e:	97 01       	movw	r18, r14
     570:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <__divsf3>
     574:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <__fixunssfsi>
     578:	61 50       	subi	r22, 0x01	; 1
     57a:	70 40       	sbci	r23, 0x00	; 0
     57c:	70 93 c5 00 	sts	0x00C5, r23
     580:	60 93 c4 00 	sts	0x00C4, r22
     584:	60 e0       	ldi	r22, 0x00	; 0
     586:	74 e2       	ldi	r23, 0x24	; 36
     588:	84 e7       	ldi	r24, 0x74	; 116
     58a:	99 e4       	ldi	r25, 0x49	; 73
     58c:	a8 01       	movw	r20, r16
     58e:	97 01       	movw	r18, r14
     590:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <__divsf3>
     594:	20 e0       	ldi	r18, 0x00	; 0
     596:	30 e0       	ldi	r19, 0x00	; 0
     598:	40 e4       	ldi	r20, 0x40	; 64
     59a:	51 e4       	ldi	r21, 0x41	; 65
     59c:	0e 94 33 10 	call	0x2066	; 0x2066 <__mulsf3>
     5a0:	60 93 3c 12 	sts	0x123C, r22
     5a4:	70 93 3d 12 	sts	0x123D, r23
     5a8:	80 93 3e 12 	sts	0x123E, r24
     5ac:	90 93 3f 12 	sts	0x123F, r25
     5b0:	20 91 3c 12 	lds	r18, 0x123C
     5b4:	30 91 3d 12 	lds	r19, 0x123D
     5b8:	40 91 3e 12 	lds	r20, 0x123E
     5bc:	50 91 3f 12 	lds	r21, 0x123F
     5c0:	60 e0       	ldi	r22, 0x00	; 0
     5c2:	70 e0       	ldi	r23, 0x00	; 0
     5c4:	8a e7       	ldi	r24, 0x7A	; 122
     5c6:	93 e4       	ldi	r25, 0x43	; 67
     5c8:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <__divsf3>
     5cc:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <__fixunssfsi>
     5d0:	70 93 3b 12 	sts	0x123B, r23
     5d4:	60 93 3a 12 	sts	0x123A, r22
     5d8:	72 98       	cbi	0x0e, 2	; 14
     5da:	73 9a       	sbi	0x0e, 3	; 14
     5dc:	8f ef       	ldi	r24, 0xFF	; 255
     5de:	80 93 c6 00 	sts	0x00C6, r24
     5e2:	10 92 76 10 	sts	0x1076, r1
     5e6:	10 92 77 10 	sts	0x1077, r1
     5ea:	81 e0       	ldi	r24, 0x01	; 1
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	1f 91       	pop	r17
     5f0:	0f 91       	pop	r16
     5f2:	ff 90       	pop	r15
     5f4:	ef 90       	pop	r14
     5f6:	08 95       	ret

000005f8 <dxl_hal_close>:
     5f8:	08 95       	ret

000005fa <dxl_hal_clear>:
     5fa:	80 91 77 10 	lds	r24, 0x1077
     5fe:	80 93 76 10 	sts	0x1076, r24
     602:	08 95       	ret

00000604 <dxl_hal_tx>:
     604:	ac 01       	movw	r20, r24
     606:	f8 94       	cli
     608:	73 98       	cbi	0x0e, 3	; 14
     60a:	72 9a       	sbi	0x0e, 2	; 14
     60c:	20 e0       	ldi	r18, 0x00	; 0
     60e:	30 e0       	ldi	r19, 0x00	; 0
     610:	11 c0       	rjmp	.+34     	; 0x634 <dxl_hal_tx+0x30>
     612:	80 91 c0 00 	lds	r24, 0x00C0
     616:	85 ff       	sbrs	r24, 5
     618:	fc cf       	rjmp	.-8      	; 0x612 <dxl_hal_tx+0xe>
     61a:	80 91 c0 00 	lds	r24, 0x00C0
     61e:	80 64       	ori	r24, 0x40	; 64
     620:	80 93 c0 00 	sts	0x00C0, r24
     624:	fa 01       	movw	r30, r20
     626:	e2 0f       	add	r30, r18
     628:	f3 1f       	adc	r31, r19
     62a:	80 81       	ld	r24, Z
     62c:	80 93 c6 00 	sts	0x00C6, r24
     630:	2f 5f       	subi	r18, 0xFF	; 255
     632:	3f 4f       	sbci	r19, 0xFF	; 255
     634:	26 17       	cp	r18, r22
     636:	37 07       	cpc	r19, r23
     638:	64 f3       	brlt	.-40     	; 0x612 <dxl_hal_tx+0xe>
     63a:	80 91 c0 00 	lds	r24, 0x00C0
     63e:	86 ff       	sbrs	r24, 6
     640:	fc cf       	rjmp	.-8      	; 0x63a <dxl_hal_tx+0x36>
     642:	72 98       	cbi	0x0e, 2	; 14
     644:	73 9a       	sbi	0x0e, 3	; 14
     646:	78 94       	sei
     648:	c9 01       	movw	r24, r18
     64a:	08 95       	ret

0000064c <dxl_hal_set_timeout>:
     64c:	10 92 43 12 	sts	0x1243, r1
     650:	10 92 42 12 	sts	0x1242, r1
     654:	20 91 3a 12 	lds	r18, 0x123A
     658:	30 91 3b 12 	lds	r19, 0x123B
     65c:	26 5f       	subi	r18, 0xF6	; 246
     65e:	3f 4f       	sbci	r19, 0xFF	; 255
     660:	28 0f       	add	r18, r24
     662:	39 1f       	adc	r19, r25
     664:	30 93 41 12 	sts	0x1241, r19
     668:	20 93 40 12 	sts	0x1240, r18
     66c:	08 95       	ret

0000066e <dxl_hal_timeout>:
     66e:	af 92       	push	r10
     670:	bf 92       	push	r11
     672:	cf 92       	push	r12
     674:	df 92       	push	r13
     676:	ef 92       	push	r14
     678:	ff 92       	push	r15
     67a:	0f 93       	push	r16
     67c:	1f 93       	push	r17
     67e:	80 91 42 12 	lds	r24, 0x1242
     682:	90 91 43 12 	lds	r25, 0x1243
     686:	01 96       	adiw	r24, 0x01	; 1
     688:	90 93 43 12 	sts	0x1243, r25
     68c:	80 93 42 12 	sts	0x1242, r24
     690:	20 91 42 12 	lds	r18, 0x1242
     694:	30 91 43 12 	lds	r19, 0x1243
     698:	80 91 40 12 	lds	r24, 0x1240
     69c:	90 91 41 12 	lds	r25, 0x1241
     6a0:	82 17       	cp	r24, r18
     6a2:	93 07       	cpc	r25, r19
     6a4:	18 f4       	brcc	.+6      	; 0x6ac <dxl_hal_timeout+0x3e>
     6a6:	21 e0       	ldi	r18, 0x01	; 1
     6a8:	30 e0       	ldi	r19, 0x00	; 0
     6aa:	74 c0       	rjmp	.+232    	; 0x794 <dxl_hal_timeout+0x126>
     6ac:	a0 90 3c 12 	lds	r10, 0x123C
     6b0:	b0 90 3d 12 	lds	r11, 0x123D
     6b4:	c0 90 3e 12 	lds	r12, 0x123E
     6b8:	d0 90 3f 12 	lds	r13, 0x123F
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     6bc:	c6 01       	movw	r24, r12
     6be:	b5 01       	movw	r22, r10
     6c0:	2b ea       	ldi	r18, 0xAB	; 171
     6c2:	3a ea       	ldi	r19, 0xAA	; 170
     6c4:	4a ea       	ldi	r20, 0xAA	; 170
     6c6:	50 e4       	ldi	r21, 0x40	; 64
     6c8:	0e 94 33 10 	call	0x2066	; 0x2066 <__mulsf3>
     6cc:	7b 01       	movw	r14, r22
     6ce:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     6d0:	20 e0       	ldi	r18, 0x00	; 0
     6d2:	30 e0       	ldi	r19, 0x00	; 0
     6d4:	40 e8       	ldi	r20, 0x80	; 128
     6d6:	5f e3       	ldi	r21, 0x3F	; 63
     6d8:	0e 94 96 10 	call	0x212c	; 0x212c <__cmpsf2>
     6dc:	88 23       	and	r24, r24
     6de:	14 f4       	brge	.+4      	; 0x6e4 <dxl_hal_timeout+0x76>
     6e0:	61 e0       	ldi	r22, 0x01	; 1
     6e2:	54 c0       	rjmp	.+168    	; 0x78c <dxl_hal_timeout+0x11e>
		__ticks = 1;
	else if (__tmp > 255)
     6e4:	c8 01       	movw	r24, r16
     6e6:	b7 01       	movw	r22, r14
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	4f e7       	ldi	r20, 0x7F	; 127
     6ee:	53 e4       	ldi	r21, 0x43	; 67
     6f0:	0e 94 be 10 	call	0x217c	; 0x217c <__gesf2>
     6f4:	18 16       	cp	r1, r24
     6f6:	0c f0       	brlt	.+2      	; 0x6fa <dxl_hal_timeout+0x8c>
     6f8:	45 c0       	rjmp	.+138    	; 0x784 <dxl_hal_timeout+0x116>
	{
		_delay_ms(__us / 1000.0);
     6fa:	c6 01       	movw	r24, r12
     6fc:	b5 01       	movw	r22, r10
     6fe:	20 e0       	ldi	r18, 0x00	; 0
     700:	30 e0       	ldi	r19, 0x00	; 0
     702:	4a e7       	ldi	r20, 0x7A	; 122
     704:	54 e4       	ldi	r21, 0x44	; 68
     706:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <__divsf3>
     70a:	5b 01       	movw	r10, r22
     70c:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     70e:	20 e0       	ldi	r18, 0x00	; 0
     710:	30 e0       	ldi	r19, 0x00	; 0
     712:	4a e7       	ldi	r20, 0x7A	; 122
     714:	55 e4       	ldi	r21, 0x45	; 69
     716:	0e 94 33 10 	call	0x2066	; 0x2066 <__mulsf3>
     71a:	7b 01       	movw	r14, r22
     71c:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     71e:	20 e0       	ldi	r18, 0x00	; 0
     720:	30 e0       	ldi	r19, 0x00	; 0
     722:	40 e8       	ldi	r20, 0x80	; 128
     724:	5f e3       	ldi	r21, 0x3F	; 63
     726:	0e 94 96 10 	call	0x212c	; 0x212c <__cmpsf2>
     72a:	88 23       	and	r24, r24
     72c:	1c f4       	brge	.+6      	; 0x734 <dxl_hal_timeout+0xc6>
     72e:	61 e0       	ldi	r22, 0x01	; 1
     730:	70 e0       	ldi	r23, 0x00	; 0
     732:	24 c0       	rjmp	.+72     	; 0x77c <dxl_hal_timeout+0x10e>
		__ticks = 1;
	else if (__tmp > 65535)
     734:	c8 01       	movw	r24, r16
     736:	b7 01       	movw	r22, r14
     738:	20 e0       	ldi	r18, 0x00	; 0
     73a:	3f ef       	ldi	r19, 0xFF	; 255
     73c:	4f e7       	ldi	r20, 0x7F	; 127
     73e:	57 e4       	ldi	r21, 0x47	; 71
     740:	0e 94 be 10 	call	0x217c	; 0x217c <__gesf2>
     744:	18 16       	cp	r1, r24
     746:	b4 f4       	brge	.+44     	; 0x774 <dxl_hal_timeout+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     748:	c6 01       	movw	r24, r12
     74a:	b5 01       	movw	r22, r10
     74c:	20 e0       	ldi	r18, 0x00	; 0
     74e:	30 e0       	ldi	r19, 0x00	; 0
     750:	40 e2       	ldi	r20, 0x20	; 32
     752:	51 e4       	ldi	r21, 0x41	; 65
     754:	0e 94 33 10 	call	0x2066	; 0x2066 <__mulsf3>
     758:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <__fixunssfsi>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     75c:	80 e9       	ldi	r24, 0x90	; 144
     75e:	91 e0       	ldi	r25, 0x01	; 1
     760:	05 c0       	rjmp	.+10     	; 0x76c <dxl_hal_timeout+0xfe>
     762:	fc 01       	movw	r30, r24
     764:	31 97       	sbiw	r30, 0x01	; 1
     766:	f1 f7       	brne	.-4      	; 0x764 <dxl_hal_timeout+0xf6>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     768:	61 50       	subi	r22, 0x01	; 1
     76a:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     76c:	61 15       	cp	r22, r1
     76e:	71 05       	cpc	r23, r1
     770:	c1 f7       	brne	.-16     	; 0x762 <dxl_hal_timeout+0xf4>
     772:	0e c0       	rjmp	.+28     	; 0x790 <dxl_hal_timeout+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     774:	c8 01       	movw	r24, r16
     776:	b7 01       	movw	r22, r14
     778:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <__fixunssfsi>
     77c:	cb 01       	movw	r24, r22
     77e:	01 97       	sbiw	r24, 0x01	; 1
     780:	f1 f7       	brne	.-4      	; 0x77e <dxl_hal_timeout+0x110>
     782:	06 c0       	rjmp	.+12     	; 0x790 <dxl_hal_timeout+0x122>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     784:	c8 01       	movw	r24, r16
     786:	b7 01       	movw	r22, r14
     788:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <__fixunssfsi>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     78c:	6a 95       	dec	r22
     78e:	f1 f7       	brne	.-4      	; 0x78c <dxl_hal_timeout+0x11e>
     790:	20 e0       	ldi	r18, 0x00	; 0
     792:	30 e0       	ldi	r19, 0x00	; 0
     794:	c9 01       	movw	r24, r18
     796:	1f 91       	pop	r17
     798:	0f 91       	pop	r16
     79a:	ff 90       	pop	r15
     79c:	ef 90       	pop	r14
     79e:	df 90       	pop	r13
     7a0:	cf 90       	pop	r12
     7a2:	bf 90       	pop	r11
     7a4:	af 90       	pop	r10
     7a6:	08 95       	ret

000007a8 <dxl_hal_get_qstate>:
     7a8:	90 91 76 10 	lds	r25, 0x1076
     7ac:	80 91 77 10 	lds	r24, 0x1077
     7b0:	98 17       	cp	r25, r24
     7b2:	19 f4       	brne	.+6      	; 0x7ba <dxl_hal_get_qstate+0x12>
     7b4:	20 e0       	ldi	r18, 0x00	; 0
     7b6:	30 e0       	ldi	r19, 0x00	; 0
     7b8:	17 c0       	rjmp	.+46     	; 0x7e8 <dxl_hal_get_qstate+0x40>
     7ba:	90 91 76 10 	lds	r25, 0x1076
     7be:	80 91 77 10 	lds	r24, 0x1077
     7c2:	98 17       	cp	r25, r24
     7c4:	38 f4       	brcc	.+14     	; 0x7d4 <dxl_hal_get_qstate+0x2c>
     7c6:	80 91 77 10 	lds	r24, 0x1077
     7ca:	90 91 76 10 	lds	r25, 0x1076
     7ce:	28 2f       	mov	r18, r24
     7d0:	30 e0       	ldi	r19, 0x00	; 0
     7d2:	08 c0       	rjmp	.+16     	; 0x7e4 <dxl_hal_get_qstate+0x3c>
     7d4:	80 91 77 10 	lds	r24, 0x1077
     7d8:	90 91 76 10 	lds	r25, 0x1076
     7dc:	28 2f       	mov	r18, r24
     7de:	30 e0       	ldi	r19, 0x00	; 0
     7e0:	20 50       	subi	r18, 0x00	; 0
     7e2:	3f 4f       	sbci	r19, 0xFF	; 255
     7e4:	29 1b       	sub	r18, r25
     7e6:	31 09       	sbc	r19, r1
     7e8:	c9 01       	movw	r24, r18
     7ea:	08 95       	ret

000007ec <dxl_hal_put_queue>:
     7ec:	1f 93       	push	r17
     7ee:	18 2f       	mov	r17, r24
     7f0:	db df       	rcall	.-74     	; 0x7a8 <dxl_hal_get_qstate>
     7f2:	8f 3f       	cpi	r24, 0xFF	; 255
     7f4:	91 05       	cpc	r25, r1
     7f6:	91 f0       	breq	.+36     	; 0x81c <dxl_hal_put_queue+0x30>
     7f8:	e0 91 77 10 	lds	r30, 0x1077
     7fc:	f0 e0       	ldi	r31, 0x00	; 0
     7fe:	ea 58       	subi	r30, 0x8A	; 138
     800:	f0 4f       	sbci	r31, 0xF0	; 240
     802:	10 83       	st	Z, r17
     804:	80 91 77 10 	lds	r24, 0x1077
     808:	8f 3f       	cpi	r24, 0xFF	; 255
     80a:	19 f4       	brne	.+6      	; 0x812 <dxl_hal_put_queue+0x26>
     80c:	10 92 77 10 	sts	0x1077, r1
     810:	05 c0       	rjmp	.+10     	; 0x81c <dxl_hal_put_queue+0x30>
     812:	80 91 77 10 	lds	r24, 0x1077
     816:	8f 5f       	subi	r24, 0xFF	; 255
     818:	80 93 77 10 	sts	0x1077, r24
     81c:	1f 91       	pop	r17
     81e:	08 95       	ret

00000820 <dxl_hal_get_queue>:
     820:	90 91 76 10 	lds	r25, 0x1076
     824:	80 91 77 10 	lds	r24, 0x1077
     828:	98 17       	cp	r25, r24
     82a:	11 f4       	brne	.+4      	; 0x830 <dxl_hal_get_queue+0x10>
     82c:	ef ef       	ldi	r30, 0xFF	; 255
     82e:	12 c0       	rjmp	.+36     	; 0x854 <dxl_hal_get_queue+0x34>
     830:	e0 91 76 10 	lds	r30, 0x1076
     834:	f0 e0       	ldi	r31, 0x00	; 0
     836:	ea 58       	subi	r30, 0x8A	; 138
     838:	f0 4f       	sbci	r31, 0xF0	; 240
     83a:	e0 81       	ld	r30, Z
     83c:	80 91 76 10 	lds	r24, 0x1076
     840:	8f 3f       	cpi	r24, 0xFF	; 255
     842:	19 f4       	brne	.+6      	; 0x84a <dxl_hal_get_queue+0x2a>
     844:	10 92 76 10 	sts	0x1076, r1
     848:	05 c0       	rjmp	.+10     	; 0x854 <dxl_hal_get_queue+0x34>
     84a:	80 91 76 10 	lds	r24, 0x1076
     84e:	8f 5f       	subi	r24, 0xFF	; 255
     850:	80 93 76 10 	sts	0x1076, r24
     854:	8e 2f       	mov	r24, r30
     856:	08 95       	ret

00000858 <dxl_hal_rx>:
     858:	ef 92       	push	r14
     85a:	ff 92       	push	r15
     85c:	0f 93       	push	r16
     85e:	1f 93       	push	r17
     860:	cf 93       	push	r28
     862:	df 93       	push	r29
     864:	7c 01       	movw	r14, r24
     866:	eb 01       	movw	r28, r22
     868:	90 91 76 10 	lds	r25, 0x1076
     86c:	80 91 77 10 	lds	r24, 0x1077
     870:	98 17       	cp	r25, r24
     872:	19 f4       	brne	.+6      	; 0x87a <dxl_hal_rx+0x22>
     874:	00 e0       	ldi	r16, 0x00	; 0
     876:	10 e0       	ldi	r17, 0x00	; 0
     878:	12 c0       	rjmp	.+36     	; 0x89e <dxl_hal_rx+0x46>
     87a:	96 df       	rcall	.-212    	; 0x7a8 <dxl_hal_get_qstate>
     87c:	8c 01       	movw	r16, r24
     87e:	c8 17       	cp	r28, r24
     880:	d9 07       	cpc	r29, r25
     882:	0c f4       	brge	.+2      	; 0x886 <dxl_hal_rx+0x2e>
     884:	8e 01       	movw	r16, r28
     886:	c0 e0       	ldi	r28, 0x00	; 0
     888:	d0 e0       	ldi	r29, 0x00	; 0
     88a:	06 c0       	rjmp	.+12     	; 0x898 <dxl_hal_rx+0x40>
     88c:	c9 df       	rcall	.-110    	; 0x820 <dxl_hal_get_queue>
     88e:	f7 01       	movw	r30, r14
     890:	ec 0f       	add	r30, r28
     892:	fd 1f       	adc	r31, r29
     894:	80 83       	st	Z, r24
     896:	21 96       	adiw	r28, 0x01	; 1
     898:	c0 17       	cp	r28, r16
     89a:	d1 07       	cpc	r29, r17
     89c:	bc f3       	brlt	.-18     	; 0x88c <dxl_hal_rx+0x34>
     89e:	c8 01       	movw	r24, r16
     8a0:	df 91       	pop	r29
     8a2:	cf 91       	pop	r28
     8a4:	1f 91       	pop	r17
     8a6:	0f 91       	pop	r16
     8a8:	ff 90       	pop	r15
     8aa:	ef 90       	pop	r14
     8ac:	08 95       	ret

000008ae <__vector_25>:
     8ae:	1f 92       	push	r1
     8b0:	0f 92       	push	r0
     8b2:	0f b6       	in	r0, 0x3f	; 63
     8b4:	0f 92       	push	r0
     8b6:	0b b6       	in	r0, 0x3b	; 59
     8b8:	0f 92       	push	r0
     8ba:	11 24       	eor	r1, r1
     8bc:	2f 93       	push	r18
     8be:	3f 93       	push	r19
     8c0:	4f 93       	push	r20
     8c2:	5f 93       	push	r21
     8c4:	6f 93       	push	r22
     8c6:	7f 93       	push	r23
     8c8:	8f 93       	push	r24
     8ca:	9f 93       	push	r25
     8cc:	af 93       	push	r26
     8ce:	bf 93       	push	r27
     8d0:	ef 93       	push	r30
     8d2:	ff 93       	push	r31
     8d4:	80 91 c6 00 	lds	r24, 0x00C6
     8d8:	89 df       	rcall	.-238    	; 0x7ec <dxl_hal_put_queue>
     8da:	ff 91       	pop	r31
     8dc:	ef 91       	pop	r30
     8de:	bf 91       	pop	r27
     8e0:	af 91       	pop	r26
     8e2:	9f 91       	pop	r25
     8e4:	8f 91       	pop	r24
     8e6:	7f 91       	pop	r23
     8e8:	6f 91       	pop	r22
     8ea:	5f 91       	pop	r21
     8ec:	4f 91       	pop	r20
     8ee:	3f 91       	pop	r19
     8f0:	2f 91       	pop	r18
     8f2:	0f 90       	pop	r0
     8f4:	0b be       	out	0x3b, r0	; 59
     8f6:	0f 90       	pop	r0
     8f8:	0f be       	out	0x3f, r0	; 63
     8fa:	0f 90       	pop	r0
     8fc:	1f 90       	pop	r1
     8fe:	18 95       	reti

00000900 <serial_write>:
     900:	ac 01       	movw	r20, r24
     902:	20 e0       	ldi	r18, 0x00	; 0
     904:	30 e0       	ldi	r19, 0x00	; 0
     906:	0c c0       	rjmp	.+24     	; 0x920 <serial_write+0x20>
     908:	80 91 c8 00 	lds	r24, 0x00C8
     90c:	85 ff       	sbrs	r24, 5
     90e:	fc cf       	rjmp	.-8      	; 0x908 <serial_write+0x8>
     910:	fa 01       	movw	r30, r20
     912:	e2 0f       	add	r30, r18
     914:	f3 1f       	adc	r31, r19
     916:	80 81       	ld	r24, Z
     918:	80 93 ce 00 	sts	0x00CE, r24
     91c:	2f 5f       	subi	r18, 0xFF	; 255
     91e:	3f 4f       	sbci	r19, 0xFF	; 255
     920:	26 17       	cp	r18, r22
     922:	37 07       	cpc	r19, r23
     924:	8c f3       	brlt	.-30     	; 0x908 <serial_write+0x8>
     926:	08 95       	ret

00000928 <serial_read>:
     928:	dc 01       	movw	r26, r24
     92a:	90 91 f8 10 	lds	r25, 0x10F8
     92e:	80 91 f9 10 	lds	r24, 0x10F9
     932:	98 17       	cp	r25, r24
     934:	11 f4       	brne	.+4      	; 0x93a <serial_read+0x12>
     936:	80 e0       	ldi	r24, 0x00	; 0
     938:	08 95       	ret
     93a:	90 91 f8 10 	lds	r25, 0x10F8
     93e:	80 91 f9 10 	lds	r24, 0x10F9
     942:	98 17       	cp	r25, r24
     944:	19 f4       	brne	.+6      	; 0x94c <serial_read+0x24>
     946:	20 e0       	ldi	r18, 0x00	; 0
     948:	30 e0       	ldi	r19, 0x00	; 0
     94a:	17 c0       	rjmp	.+46     	; 0x97a <serial_read+0x52>
     94c:	90 91 f8 10 	lds	r25, 0x10F8
     950:	80 91 f9 10 	lds	r24, 0x10F9
     954:	98 17       	cp	r25, r24
     956:	38 f4       	brcc	.+14     	; 0x966 <serial_read+0x3e>
     958:	80 91 f9 10 	lds	r24, 0x10F9
     95c:	90 91 f8 10 	lds	r25, 0x10F8
     960:	28 2f       	mov	r18, r24
     962:	30 e0       	ldi	r19, 0x00	; 0
     964:	08 c0       	rjmp	.+16     	; 0x976 <serial_read+0x4e>
     966:	80 91 f9 10 	lds	r24, 0x10F9
     96a:	90 91 f8 10 	lds	r25, 0x10F8
     96e:	28 2f       	mov	r18, r24
     970:	30 e0       	ldi	r19, 0x00	; 0
     972:	20 58       	subi	r18, 0x80	; 128
     974:	3f 4f       	sbci	r19, 0xFF	; 255
     976:	29 1b       	sub	r18, r25
     978:	31 09       	sbc	r19, r1
     97a:	a9 01       	movw	r20, r18
     97c:	62 17       	cp	r22, r18
     97e:	73 07       	cpc	r23, r19
     980:	0c f4       	brge	.+2      	; 0x984 <serial_read+0x5c>
     982:	ab 01       	movw	r20, r22
     984:	20 e0       	ldi	r18, 0x00	; 0
     986:	30 e0       	ldi	r19, 0x00	; 0
     988:	20 c0       	rjmp	.+64     	; 0x9ca <serial_read+0xa2>
     98a:	90 91 f8 10 	lds	r25, 0x10F8
     98e:	80 91 f9 10 	lds	r24, 0x10F9
     992:	98 17       	cp	r25, r24
     994:	11 f4       	brne	.+4      	; 0x99a <serial_read+0x72>
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	12 c0       	rjmp	.+36     	; 0x9be <serial_read+0x96>
     99a:	e0 91 f8 10 	lds	r30, 0x10F8
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	e8 58       	subi	r30, 0x88	; 136
     9a2:	ff 4e       	sbci	r31, 0xEF	; 239
     9a4:	90 81       	ld	r25, Z
     9a6:	80 91 f8 10 	lds	r24, 0x10F8
     9aa:	8f 37       	cpi	r24, 0x7F	; 127
     9ac:	19 f4       	brne	.+6      	; 0x9b4 <serial_read+0x8c>
     9ae:	10 92 f8 10 	sts	0x10F8, r1
     9b2:	05 c0       	rjmp	.+10     	; 0x9be <serial_read+0x96>
     9b4:	80 91 f8 10 	lds	r24, 0x10F8
     9b8:	8f 5f       	subi	r24, 0xFF	; 255
     9ba:	80 93 f8 10 	sts	0x10F8, r24
     9be:	fd 01       	movw	r30, r26
     9c0:	e2 0f       	add	r30, r18
     9c2:	f3 1f       	adc	r31, r19
     9c4:	90 83       	st	Z, r25
     9c6:	2f 5f       	subi	r18, 0xFF	; 255
     9c8:	3f 4f       	sbci	r19, 0xFF	; 255
     9ca:	24 17       	cp	r18, r20
     9cc:	35 07       	cpc	r19, r21
     9ce:	ec f2       	brlt	.-70     	; 0x98a <serial_read+0x62>
     9d0:	84 2f       	mov	r24, r20
     9d2:	08 95       	ret

000009d4 <serial_get_qstate>:
     9d4:	90 91 f8 10 	lds	r25, 0x10F8
     9d8:	80 91 f9 10 	lds	r24, 0x10F9
     9dc:	98 17       	cp	r25, r24
     9de:	19 f4       	brne	.+6      	; 0x9e6 <serial_get_qstate+0x12>
     9e0:	20 e0       	ldi	r18, 0x00	; 0
     9e2:	30 e0       	ldi	r19, 0x00	; 0
     9e4:	17 c0       	rjmp	.+46     	; 0xa14 <serial_get_qstate+0x40>
     9e6:	90 91 f8 10 	lds	r25, 0x10F8
     9ea:	80 91 f9 10 	lds	r24, 0x10F9
     9ee:	98 17       	cp	r25, r24
     9f0:	38 f4       	brcc	.+14     	; 0xa00 <serial_get_qstate+0x2c>
     9f2:	80 91 f9 10 	lds	r24, 0x10F9
     9f6:	90 91 f8 10 	lds	r25, 0x10F8
     9fa:	28 2f       	mov	r18, r24
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	08 c0       	rjmp	.+16     	; 0xa10 <serial_get_qstate+0x3c>
     a00:	80 91 f9 10 	lds	r24, 0x10F9
     a04:	90 91 f8 10 	lds	r25, 0x10F8
     a08:	28 2f       	mov	r18, r24
     a0a:	30 e0       	ldi	r19, 0x00	; 0
     a0c:	20 58       	subi	r18, 0x80	; 128
     a0e:	3f 4f       	sbci	r19, 0xFF	; 255
     a10:	29 1b       	sub	r18, r25
     a12:	31 09       	sbc	r19, r1
     a14:	c9 01       	movw	r24, r18
     a16:	08 95       	ret

00000a18 <serial_put_queue>:
     a18:	48 2f       	mov	r20, r24
     a1a:	90 91 f8 10 	lds	r25, 0x10F8
     a1e:	80 91 f9 10 	lds	r24, 0x10F9
     a22:	98 17       	cp	r25, r24
     a24:	d1 f0       	breq	.+52     	; 0xa5a <serial_put_queue+0x42>
     a26:	90 91 f8 10 	lds	r25, 0x10F8
     a2a:	80 91 f9 10 	lds	r24, 0x10F9
     a2e:	98 17       	cp	r25, r24
     a30:	38 f4       	brcc	.+14     	; 0xa40 <serial_put_queue+0x28>
     a32:	80 91 f9 10 	lds	r24, 0x10F9
     a36:	90 91 f8 10 	lds	r25, 0x10F8
     a3a:	28 2f       	mov	r18, r24
     a3c:	30 e0       	ldi	r19, 0x00	; 0
     a3e:	08 c0       	rjmp	.+16     	; 0xa50 <serial_put_queue+0x38>
     a40:	80 91 f9 10 	lds	r24, 0x10F9
     a44:	90 91 f8 10 	lds	r25, 0x10F8
     a48:	28 2f       	mov	r18, r24
     a4a:	30 e0       	ldi	r19, 0x00	; 0
     a4c:	20 58       	subi	r18, 0x80	; 128
     a4e:	3f 4f       	sbci	r19, 0xFF	; 255
     a50:	29 1b       	sub	r18, r25
     a52:	31 09       	sbc	r19, r1
     a54:	2f 37       	cpi	r18, 0x7F	; 127
     a56:	31 05       	cpc	r19, r1
     a58:	91 f0       	breq	.+36     	; 0xa7e <serial_put_queue+0x66>
     a5a:	e0 91 f9 10 	lds	r30, 0x10F9
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	e8 58       	subi	r30, 0x88	; 136
     a62:	ff 4e       	sbci	r31, 0xEF	; 239
     a64:	40 83       	st	Z, r20
     a66:	80 91 f9 10 	lds	r24, 0x10F9
     a6a:	8f 37       	cpi	r24, 0x7F	; 127
     a6c:	19 f4       	brne	.+6      	; 0xa74 <serial_put_queue+0x5c>
     a6e:	10 92 f9 10 	sts	0x10F9, r1
     a72:	08 95       	ret
     a74:	80 91 f9 10 	lds	r24, 0x10F9
     a78:	8f 5f       	subi	r24, 0xFF	; 255
     a7a:	80 93 f9 10 	sts	0x10F9, r24
     a7e:	08 95       	ret

00000a80 <serial_get_queue>:
     a80:	90 91 f8 10 	lds	r25, 0x10F8
     a84:	80 91 f9 10 	lds	r24, 0x10F9
     a88:	98 17       	cp	r25, r24
     a8a:	11 f4       	brne	.+4      	; 0xa90 <serial_get_queue+0x10>
     a8c:	ef ef       	ldi	r30, 0xFF	; 255
     a8e:	12 c0       	rjmp	.+36     	; 0xab4 <serial_get_queue+0x34>
     a90:	e0 91 f8 10 	lds	r30, 0x10F8
     a94:	f0 e0       	ldi	r31, 0x00	; 0
     a96:	e8 58       	subi	r30, 0x88	; 136
     a98:	ff 4e       	sbci	r31, 0xEF	; 239
     a9a:	e0 81       	ld	r30, Z
     a9c:	80 91 f8 10 	lds	r24, 0x10F8
     aa0:	8f 37       	cpi	r24, 0x7F	; 127
     aa2:	19 f4       	brne	.+6      	; 0xaaa <serial_get_queue+0x2a>
     aa4:	10 92 f8 10 	sts	0x10F8, r1
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <serial_get_queue+0x34>
     aaa:	80 91 f8 10 	lds	r24, 0x10F8
     aae:	8f 5f       	subi	r24, 0xFF	; 255
     ab0:	80 93 f8 10 	sts	0x10F8, r24
     ab4:	8e 2f       	mov	r24, r30
     ab6:	08 95       	ret

00000ab8 <__vector_36>:
     ab8:	1f 92       	push	r1
     aba:	0f 92       	push	r0
     abc:	0f b6       	in	r0, 0x3f	; 63
     abe:	0f 92       	push	r0
     ac0:	0b b6       	in	r0, 0x3b	; 59
     ac2:	0f 92       	push	r0
     ac4:	11 24       	eor	r1, r1
     ac6:	2f 93       	push	r18
     ac8:	3f 93       	push	r19
     aca:	4f 93       	push	r20
     acc:	5f 93       	push	r21
     ace:	6f 93       	push	r22
     ad0:	7f 93       	push	r23
     ad2:	8f 93       	push	r24
     ad4:	9f 93       	push	r25
     ad6:	af 93       	push	r26
     ad8:	bf 93       	push	r27
     ada:	ef 93       	push	r30
     adc:	ff 93       	push	r31
     ade:	80 91 ce 00 	lds	r24, 0x00CE
     ae2:	9a df       	rcall	.-204    	; 0xa18 <serial_put_queue>
     ae4:	ff 91       	pop	r31
     ae6:	ef 91       	pop	r30
     ae8:	bf 91       	pop	r27
     aea:	af 91       	pop	r26
     aec:	9f 91       	pop	r25
     aee:	8f 91       	pop	r24
     af0:	7f 91       	pop	r23
     af2:	6f 91       	pop	r22
     af4:	5f 91       	pop	r21
     af6:	4f 91       	pop	r20
     af8:	3f 91       	pop	r19
     afa:	2f 91       	pop	r18
     afc:	0f 90       	pop	r0
     afe:	0b be       	out	0x3b, r0	; 59
     b00:	0f 90       	pop	r0
     b02:	0f be       	out	0x3f, r0	; 63
     b04:	0f 90       	pop	r0
     b06:	1f 90       	pop	r1
     b08:	18 95       	reti

00000b0a <std_putchar>:
     b0a:	df 93       	push	r29
     b0c:	cf 93       	push	r28
     b0e:	0f 92       	push	r0
     b10:	0f 92       	push	r0
     b12:	cd b7       	in	r28, 0x3d	; 61
     b14:	de b7       	in	r29, 0x3e	; 62
     b16:	98 2f       	mov	r25, r24
     b18:	8a 30       	cpi	r24, 0x0A	; 10
     b1a:	99 f4       	brne	.+38     	; 0xb42 <std_putchar+0x38>
     b1c:	8d e0       	ldi	r24, 0x0D	; 13
     b1e:	89 83       	std	Y+1, r24	; 0x01
     b20:	9a 83       	std	Y+2, r25	; 0x02
     b22:	fe 01       	movw	r30, r28
     b24:	31 96       	adiw	r30, 0x01	; 1
     b26:	9e 01       	movw	r18, r28
     b28:	2d 5f       	subi	r18, 0xFD	; 253
     b2a:	3f 4f       	sbci	r19, 0xFF	; 255
     b2c:	80 91 c8 00 	lds	r24, 0x00C8
     b30:	85 ff       	sbrs	r24, 5
     b32:	fc cf       	rjmp	.-8      	; 0xb2c <std_putchar+0x22>
     b34:	81 91       	ld	r24, Z+
     b36:	80 93 ce 00 	sts	0x00CE, r24
     b3a:	e2 17       	cp	r30, r18
     b3c:	f3 07       	cpc	r31, r19
     b3e:	b1 f7       	brne	.-20     	; 0xb2c <std_putchar+0x22>
     b40:	06 c0       	rjmp	.+12     	; 0xb4e <std_putchar+0x44>
     b42:	80 91 c8 00 	lds	r24, 0x00C8
     b46:	85 ff       	sbrs	r24, 5
     b48:	fc cf       	rjmp	.-8      	; 0xb42 <std_putchar+0x38>
     b4a:	90 93 ce 00 	sts	0x00CE, r25
     b4e:	80 e0       	ldi	r24, 0x00	; 0
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	0f 90       	pop	r0
     b54:	0f 90       	pop	r0
     b56:	cf 91       	pop	r28
     b58:	df 91       	pop	r29
     b5a:	08 95       	ret

00000b5c <std_getchar>:
     b5c:	90 91 f8 10 	lds	r25, 0x10F8
     b60:	80 91 f9 10 	lds	r24, 0x10F9
     b64:	98 17       	cp	r25, r24
     b66:	d1 f3       	breq	.-12     	; 0xb5c <std_getchar>
     b68:	90 91 f8 10 	lds	r25, 0x10F8
     b6c:	80 91 f9 10 	lds	r24, 0x10F9
     b70:	98 17       	cp	r25, r24
     b72:	38 f4       	brcc	.+14     	; 0xb82 <std_getchar+0x26>
     b74:	80 91 f9 10 	lds	r24, 0x10F9
     b78:	90 91 f8 10 	lds	r25, 0x10F8
     b7c:	28 2f       	mov	r18, r24
     b7e:	30 e0       	ldi	r19, 0x00	; 0
     b80:	08 c0       	rjmp	.+16     	; 0xb92 <std_getchar+0x36>
     b82:	80 91 f9 10 	lds	r24, 0x10F9
     b86:	90 91 f8 10 	lds	r25, 0x10F8
     b8a:	28 2f       	mov	r18, r24
     b8c:	30 e0       	ldi	r19, 0x00	; 0
     b8e:	20 58       	subi	r18, 0x80	; 128
     b90:	3f 4f       	sbci	r19, 0xFF	; 255
     b92:	29 1b       	sub	r18, r25
     b94:	31 09       	sbc	r19, r1
     b96:	23 2b       	or	r18, r19
     b98:	09 f3       	breq	.-62     	; 0xb5c <std_getchar>
     b9a:	90 91 f8 10 	lds	r25, 0x10F8
     b9e:	80 91 f9 10 	lds	r24, 0x10F9
     ba2:	98 17       	cp	r25, r24
     ba4:	11 f4       	brne	.+4      	; 0xbaa <std_getchar+0x4e>
     ba6:	ef ef       	ldi	r30, 0xFF	; 255
     ba8:	15 c0       	rjmp	.+42     	; 0xbd4 <std_getchar+0x78>
     baa:	e0 91 f8 10 	lds	r30, 0x10F8
     bae:	f0 e0       	ldi	r31, 0x00	; 0
     bb0:	e8 58       	subi	r30, 0x88	; 136
     bb2:	ff 4e       	sbci	r31, 0xEF	; 239
     bb4:	e0 81       	ld	r30, Z
     bb6:	80 91 f8 10 	lds	r24, 0x10F8
     bba:	8f 37       	cpi	r24, 0x7F	; 127
     bbc:	19 f4       	brne	.+6      	; 0xbc4 <std_getchar+0x68>
     bbe:	10 92 f8 10 	sts	0x10F8, r1
     bc2:	05 c0       	rjmp	.+10     	; 0xbce <std_getchar+0x72>
     bc4:	80 91 f8 10 	lds	r24, 0x10F8
     bc8:	8f 5f       	subi	r24, 0xFF	; 255
     bca:	80 93 f8 10 	sts	0x10F8, r24
     bce:	ed 30       	cpi	r30, 0x0D	; 13
     bd0:	09 f4       	brne	.+2      	; 0xbd4 <std_getchar+0x78>
     bd2:	ea e0       	ldi	r30, 0x0A	; 10
     bd4:	8e 2f       	mov	r24, r30
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	08 95       	ret

00000bda <serial_initialize>:
     bda:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <__floatsisf>
     bde:	9b 01       	movw	r18, r22
     be0:	ac 01       	movw	r20, r24
     be2:	60 e0       	ldi	r22, 0x00	; 0
     be4:	74 e2       	ldi	r23, 0x24	; 36
     be6:	84 ef       	ldi	r24, 0xF4	; 244
     be8:	99 e4       	ldi	r25, 0x49	; 73
     bea:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <__divsf3>
     bee:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <__fixunssfsi>
     bf2:	61 50       	subi	r22, 0x01	; 1
     bf4:	70 40       	sbci	r23, 0x00	; 0
     bf6:	22 e4       	ldi	r18, 0x42	; 66
     bf8:	20 93 c8 00 	sts	0x00C8, r18
     bfc:	28 e9       	ldi	r18, 0x98	; 152
     bfe:	20 93 c9 00 	sts	0x00C9, r18
     c02:	26 e0       	ldi	r18, 0x06	; 6
     c04:	20 93 ca 00 	sts	0x00CA, r18
     c08:	2f ef       	ldi	r18, 0xFF	; 255
     c0a:	20 93 ce 00 	sts	0x00CE, r18
     c0e:	10 92 f8 10 	sts	0x10F8, r1
     c12:	10 92 f9 10 	sts	0x10F9, r1
     c16:	27 2f       	mov	r18, r23
     c18:	33 27       	eor	r19, r19
     c1a:	27 fd       	sbrc	r18, 7
     c1c:	3a 95       	dec	r19
     c1e:	20 93 cd 00 	sts	0x00CD, r18
     c22:	60 93 cc 00 	sts	0x00CC, r22
     c26:	72 98       	cbi	0x0e, 2	; 14
     c28:	73 9a       	sbi	0x0e, 3	; 14
     c2a:	85 e8       	ldi	r24, 0x85	; 133
     c2c:	95 e0       	ldi	r25, 0x05	; 5
     c2e:	6e ea       	ldi	r22, 0xAE	; 174
     c30:	75 e0       	ldi	r23, 0x05	; 5
     c32:	0e 94 38 11 	call	0x2270	; 0x2270 <fdevopen>
     c36:	90 93 fb 10 	sts	0x10FB, r25
     c3a:	80 93 fa 10 	sts	0x10FA, r24
     c3e:	08 95       	ret

00000c40 <initSerial>:
}

void clearSerialBuffer(){
//	printf( "clearSerialBuffer\n" );
	isRead = 0;
	memset( &readBuffer[0], 0x00, SERIAL_BUFFER_SIZE );
     c40:	60 e0       	ldi	r22, 0x00	; 0
     c42:	71 ee       	ldi	r23, 0xE1	; 225
     c44:	80 e0       	ldi	r24, 0x00	; 0
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	c8 df       	rcall	.-112    	; 0xbda <serial_initialize>
     c4a:	78 94       	sei
     c4c:	08 95       	ret

00000c4e <checkSerialRead>:
}

int checkSerialRead(void){
	int ret = 0;
	if( serial_get_qstate() > 0 ){
     c4e:	c2 de       	rcall	.-636    	; 0x9d4 <serial_get_qstate>
     c50:	18 16       	cp	r1, r24
     c52:	19 06       	cpc	r1, r25
     c54:	0c f0       	brlt	.+2      	; 0xc58 <checkSerialRead+0xa>
     c56:	3f c0       	rjmp	.+126    	; 0xcd6 <checkSerialRead+0x88>
		unsigned char ReceivedData = getchar();
     c58:	80 91 44 12 	lds	r24, 0x1244
     c5c:	90 91 45 12 	lds	r25, 0x1245
     c60:	0e 94 82 11 	call	0x2304	; 0x2304 <fgetc>
//		printf( "checkSerialRead %d\n", ReceivedData );
		if( ReceivedData == 10 || ReceivedData == 13 ){
     c64:	8a 30       	cpi	r24, 0x0A	; 10
     c66:	11 f0       	breq	.+4      	; 0xc6c <checkSerialRead+0x1e>
     c68:	8d 30       	cpi	r24, 0x0D	; 13
     c6a:	91 f4       	brne	.+36     	; 0xc90 <checkSerialRead+0x42>
			if( buffCnt > 0 ){
     c6c:	80 91 4e 11 	lds	r24, 0x114E
     c70:	90 91 4f 11 	lds	r25, 0x114F
     c74:	18 16       	cp	r1, r24
     c76:	19 06       	cpc	r1, r25
     c78:	8c f5       	brge	.+98     	; 0xcdc <checkSerialRead+0x8e>
				buffCnt = 0;
     c7a:	10 92 4f 11 	sts	0x114F, r1
     c7e:	10 92 4e 11 	sts	0x114E, r1
				isRead = 1;
     c82:	81 e0       	ldi	r24, 0x01	; 1
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	90 93 51 11 	sts	0x1151, r25
     c8a:	80 93 50 11 	sts	0x1150, r24
     c8e:	08 95       	ret
				ret = 1;
			}
		}else if( ReceivedData > 0 ){
     c90:	88 23       	and	r24, r24
     c92:	39 f1       	breq	.+78     	; 0xce2 <checkSerialRead+0x94>
			readBuffer[buffCnt++] = ReceivedData;
     c94:	20 91 4e 11 	lds	r18, 0x114E
     c98:	30 91 4f 11 	lds	r19, 0x114F
     c9c:	a9 01       	movw	r20, r18
     c9e:	4f 5f       	subi	r20, 0xFF	; 255
     ca0:	5f 4f       	sbci	r21, 0xFF	; 255
     ca2:	50 93 4f 11 	sts	0x114F, r21
     ca6:	40 93 4e 11 	sts	0x114E, r20
     caa:	f9 01       	movw	r30, r18
     cac:	e2 50       	subi	r30, 0x02	; 2
     cae:	ff 4e       	sbci	r31, 0xEF	; 239
     cb0:	80 83       	st	Z, r24
			if( buffCnt >= SERIAL_BUFFER_SIZE-1 ){
     cb2:	80 91 4e 11 	lds	r24, 0x114E
     cb6:	90 91 4f 11 	lds	r25, 0x114F
     cba:	8f 34       	cpi	r24, 0x4F	; 79
     cbc:	91 05       	cpc	r25, r1
     cbe:	a4 f0       	brlt	.+40     	; 0xce8 <checkSerialRead+0x9a>
				buffCnt = 0;
     cc0:	10 92 4f 11 	sts	0x114F, r1
     cc4:	10 92 4e 11 	sts	0x114E, r1
				isRead = 1;
     cc8:	81 e0       	ldi	r24, 0x01	; 1
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	90 93 51 11 	sts	0x1151, r25
     cd0:	80 93 50 11 	sts	0x1150, r24
     cd4:	08 95       	ret
	isRead = 0;
	memset( &readBuffer[0], 0x00, SERIAL_BUFFER_SIZE );
}

int checkSerialRead(void){
	int ret = 0;
     cd6:	80 e0       	ldi	r24, 0x00	; 0
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	08 95       	ret
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	08 95       	ret
     ce2:	80 e0       	ldi	r24, 0x00	; 0
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	08 95       	ret
     ce8:	80 e0       	ldi	r24, 0x00	; 0
     cea:	90 e0       	ldi	r25, 0x00	; 0
			}
		}
//		printf( "readBuffer %s\n", &readBuffer[0] );
	}
	return ret;
}
     cec:	08 95       	ret

00000cee <getReadBuffer>:

char * getReadBuffer(){
//	printf( "getReadBuffer %d\n", isRead );
	char * ret = NULL;
	if( isRead > 0 ){
     cee:	80 91 50 11 	lds	r24, 0x1150
     cf2:	90 91 51 11 	lds	r25, 0x1151
     cf6:	18 16       	cp	r1, r24
     cf8:	19 06       	cpc	r1, r25
     cfa:	3c f4       	brge	.+14     	; 0xd0a <getReadBuffer+0x1c>
			//memset( &readBuffer[0], 0x00, BUFFER_SIZE );
			//isRead = 0;
			//printf( "ret=%s\n", ret );
		//}
		ret = &readBuffer[0];
		isRead = 0;
     cfc:	10 92 51 11 	sts	0x1151, r1
     d00:	10 92 50 11 	sts	0x1150, r1
			//memcpy( &ret, &readBuffer, sizeof(unsigned char) * BUFFER_SIZE );
			//memset( &readBuffer[0], 0x00, BUFFER_SIZE );
			//isRead = 0;
			//printf( "ret=%s\n", ret );
		//}
		ret = &readBuffer[0];
     d04:	8e ef       	ldi	r24, 0xFE	; 254
     d06:	90 e1       	ldi	r25, 0x10	; 16
     d08:	08 95       	ret
	return ret;
}

char * getReadBuffer(){
//	printf( "getReadBuffer %d\n", isRead );
	char * ret = NULL;
     d0a:	80 e0       	ldi	r24, 0x00	; 0
     d0c:	90 e0       	ldi	r25, 0x00	; 0
		//}
		ret = &readBuffer[0];
		isRead = 0;
	}
	return ret;	
}
     d0e:	08 95       	ret

00000d10 <sensorInit>:
	}else{
		PrintCommStatus(CommStatus);
	}
}

void ServoReadState(){
     d10:	8c e8       	ldi	r24, 0x8C	; 140
     d12:	9b e0       	ldi	r25, 0x0B	; 11
     d14:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <puts>
     d18:	60 e0       	ldi	r22, 0x00	; 0
     d1a:	71 ee       	ldi	r23, 0xE1	; 225
     d1c:	80 e0       	ldi	r24, 0x00	; 0
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	5c df       	rcall	.-328    	; 0xbda <serial_initialize>
     d22:	78 94       	sei
     d24:	86 e8       	ldi	r24, 0x86	; 134
     d26:	80 93 7a 00 	sts	0x007A, r24
     d2a:	81 e0       	ldi	r24, 0x01	; 1
     d2c:	80 93 7c 00 	sts	0x007C, r24
     d30:	08 95       	ret

00000d32 <sensorTest>:
     d32:	81 30       	cpi	r24, 0x01	; 1
     d34:	91 05       	cpc	r25, r1
     d36:	51 f0       	breq	.+20     	; 0xd4c <sensorTest+0x1a>
     d38:	82 30       	cpi	r24, 0x02	; 2
     d3a:	91 05       	cpc	r25, r1
     d3c:	61 f0       	breq	.+24     	; 0xd56 <sensorTest+0x24>
     d3e:	00 97       	sbiw	r24, 0x00	; 0
     d40:	71 f4       	brne	.+28     	; 0xd5e <sensorTest+0x2c>
     d42:	21 e0       	ldi	r18, 0x01	; 1
     d44:	20 93 7c 00 	sts	0x007C, r18
     d48:	17 98       	cbi	0x02, 7	; 2
     d4a:	09 c0       	rjmp	.+18     	; 0xd5e <sensorTest+0x2c>
     d4c:	22 e0       	ldi	r18, 0x02	; 2
     d4e:	20 93 7c 00 	sts	0x007C, r18
     d52:	16 98       	cbi	0x02, 6	; 2
     d54:	04 c0       	rjmp	.+8      	; 0xd5e <sensorTest+0x2c>
     d56:	23 e0       	ldi	r18, 0x03	; 3
     d58:	20 93 7c 00 	sts	0x007C, r18
     d5c:	15 98       	cbi	0x02, 5	; 2
     d5e:	24 e0       	ldi	r18, 0x04	; 4
     d60:	2a 95       	dec	r18
     d62:	f1 f7       	brne	.-4      	; 0xd60 <sensorTest+0x2e>
     d64:	ea e7       	ldi	r30, 0x7A	; 122
     d66:	f0 e0       	ldi	r31, 0x00	; 0
     d68:	20 81       	ld	r18, Z
     d6a:	20 61       	ori	r18, 0x10	; 16
     d6c:	20 83       	st	Z, r18
     d6e:	20 81       	ld	r18, Z
     d70:	20 64       	ori	r18, 0x40	; 64
     d72:	20 83       	st	Z, r18
     d74:	20 81       	ld	r18, Z
     d76:	24 ff       	sbrs	r18, 4
     d78:	fd cf       	rjmp	.-6      	; 0xd74 <sensorTest+0x42>
     d7a:	2e ef       	ldi	r18, 0xFE	; 254
     d7c:	22 b9       	out	0x02, r18	; 2
     d7e:	9c 01       	movw	r18, r24
     d80:	22 0f       	add	r18, r18
     d82:	33 1f       	adc	r19, r19
     d84:	22 0f       	add	r18, r18
     d86:	33 1f       	adc	r19, r19
     d88:	22 0f       	add	r18, r18
     d8a:	33 1f       	adc	r19, r19
     d8c:	fc 01       	movw	r30, r24
     d8e:	ee 0f       	add	r30, r30
     d90:	ff 1f       	adc	r31, r31
     d92:	e2 0f       	add	r30, r18
     d94:	f3 1f       	adc	r31, r19
     d96:	e4 5e       	subi	r30, 0xE4	; 228
     d98:	fd 4e       	sbci	r31, 0xED	; 237
     d9a:	60 e0       	ldi	r22, 0x00	; 0
     d9c:	70 e0       	ldi	r23, 0x00	; 0
     d9e:	20 e0       	ldi	r18, 0x00	; 0
     da0:	30 e0       	ldi	r19, 0x00	; 0
     da2:	2f 5f       	subi	r18, 0xFF	; 255
     da4:	3f 4f       	sbci	r19, 0xFF	; 255
     da6:	42 81       	ldd	r20, Z+2	; 0x02
     da8:	53 81       	ldd	r21, Z+3	; 0x03
     daa:	41 93       	st	Z+, r20
     dac:	51 93       	st	Z+, r21
     dae:	64 0f       	add	r22, r20
     db0:	75 1f       	adc	r23, r21
     db2:	24 30       	cpi	r18, 0x04	; 4
     db4:	31 05       	cpc	r19, r1
     db6:	a9 f7       	brne	.-22     	; 0xda2 <sensorTest+0x70>
     db8:	20 91 78 00 	lds	r18, 0x0078
     dbc:	30 91 79 00 	lds	r19, 0x0079
     dc0:	ac 01       	movw	r20, r24
     dc2:	4f 5f       	subi	r20, 0xFF	; 255
     dc4:	5f 4f       	sbci	r21, 0xFF	; 255
     dc6:	fa 01       	movw	r30, r20
     dc8:	ee 0f       	add	r30, r30
     dca:	ff 1f       	adc	r31, r31
     dcc:	44 0f       	add	r20, r20
     dce:	55 1f       	adc	r21, r21
     dd0:	44 0f       	add	r20, r20
     dd2:	55 1f       	adc	r21, r21
     dd4:	44 0f       	add	r20, r20
     dd6:	55 1f       	adc	r21, r21
     dd8:	e4 0f       	add	r30, r20
     dda:	f5 1f       	adc	r31, r21
     ddc:	e4 5e       	subi	r30, 0xE4	; 228
     dde:	fd 4e       	sbci	r31, 0xED	; 237
     de0:	31 83       	std	Z+1, r19	; 0x01
     de2:	20 83       	st	Z, r18
     de4:	62 0f       	add	r22, r18
     de6:	73 1f       	adc	r23, r19
     de8:	6b 39       	cpi	r22, 0x9B	; 155
     dea:	71 05       	cpc	r23, r1
     dec:	54 f0       	brlt	.+20     	; 0xe02 <sensorTest+0xd0>
     dee:	fc 01       	movw	r30, r24
     df0:	ee 0f       	add	r30, r30
     df2:	ff 1f       	adc	r31, r31
     df4:	e8 5a       	subi	r30, 0xA8	; 168
     df6:	fe 4e       	sbci	r31, 0xEE	; 238
     df8:	81 e0       	ldi	r24, 0x01	; 1
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	91 83       	std	Z+1, r25	; 0x01
     dfe:	80 83       	st	Z, r24
     e00:	08 95       	ret
     e02:	fc 01       	movw	r30, r24
     e04:	ee 0f       	add	r30, r30
     e06:	ff 1f       	adc	r31, r31
     e08:	e8 5a       	subi	r30, 0xA8	; 168
     e0a:	fe 4e       	sbci	r31, 0xEE	; 238
     e0c:	11 82       	std	Z+1, r1	; 0x01
     e0e:	10 82       	st	Z, r1
     e10:	08 95       	ret

00000e12 <sendAck>:
     e12:	9f 93       	push	r25
     e14:	8f 93       	push	r24
     e16:	8b e9       	ldi	r24, 0x9B	; 155
     e18:	9b e0       	ldi	r25, 0x0B	; 11
     e1a:	9f 93       	push	r25
     e1c:	8f 93       	push	r24
     e1e:	0e 94 c0 11 	call	0x2380	; 0x2380 <printf>
     e22:	0f 90       	pop	r0
     e24:	0f 90       	pop	r0
     e26:	0f 90       	pop	r0
     e28:	0f 90       	pop	r0
     e2a:	08 95       	ret

00000e2c <MotorInit>:
     e2c:	61 e0       	ldi	r22, 0x01	; 1
     e2e:	70 e0       	ldi	r23, 0x00	; 0
     e30:	80 e0       	ldi	r24, 0x00	; 0
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	5c db       	rcall	.-2376   	; 0x4ee <dxl_initialize>
     e36:	41 e0       	ldi	r20, 0x01	; 1
     e38:	50 e0       	ldi	r21, 0x00	; 0
     e3a:	6f e2       	ldi	r22, 0x2F	; 47
     e3c:	70 e0       	ldi	r23, 0x00	; 0
     e3e:	8f e1       	ldi	r24, 0x1F	; 31
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	d9 da       	rcall	.-2638   	; 0x3f6 <dxl_write_word>
     e44:	40 e0       	ldi	r20, 0x00	; 0
     e46:	50 e0       	ldi	r21, 0x00	; 0
     e48:	60 e2       	ldi	r22, 0x20	; 32
     e4a:	70 e0       	ldi	r23, 0x00	; 0
     e4c:	8e ef       	ldi	r24, 0xFE	; 254
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	d2 da       	rcall	.-2652   	; 0x3f6 <dxl_write_word>
     e52:	40 e0       	ldi	r20, 0x00	; 0
     e54:	50 e0       	ldi	r21, 0x00	; 0
     e56:	68 e1       	ldi	r22, 0x18	; 24
     e58:	70 e0       	ldi	r23, 0x00	; 0
     e5a:	8e ef       	ldi	r24, 0xFE	; 254
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	03 db       	rcall	.-2554   	; 0x466 <dxl_write_byte>
     e60:	2f e3       	ldi	r18, 0x3F	; 63
     e62:	8d e0       	ldi	r24, 0x0D	; 13
     e64:	93 e0       	ldi	r25, 0x03	; 3
     e66:	21 50       	subi	r18, 0x01	; 1
     e68:	80 40       	sbci	r24, 0x00	; 0
     e6a:	90 40       	sbci	r25, 0x00	; 0
     e6c:	e1 f7       	brne	.-8      	; 0xe66 <MotorInit+0x3a>
     e6e:	00 c0       	rjmp	.+0      	; 0xe70 <MotorInit+0x44>
     e70:	00 00       	nop
     e72:	08 95       	ret

00000e74 <split>:
     e74:	0f 93       	push	r16
     e76:	1f 93       	push	r17
     e78:	cf 93       	push	r28
     e7a:	df 93       	push	r29
     e7c:	00 d0       	rcall	.+0      	; 0xe7e <split+0xa>
     e7e:	cd b7       	in	r28, 0x3d	; 61
     e80:	de b7       	in	r29, 0x3e	; 62
     e82:	20 e2       	ldi	r18, 0x20	; 32
     e84:	3c e2       	ldi	r19, 0x2C	; 44
     e86:	40 e0       	ldi	r20, 0x00	; 0
     e88:	29 83       	std	Y+1, r18	; 0x01
     e8a:	3a 83       	std	Y+2, r19	; 0x02
     e8c:	4b 83       	std	Y+3, r20	; 0x03
     e8e:	be 01       	movw	r22, r28
     e90:	6f 5f       	subi	r22, 0xFF	; 255
     e92:	7f 4f       	sbci	r23, 0xFF	; 255
     e94:	0e 94 06 11 	call	0x220c	; 0x220c <strtok>
     e98:	00 97       	sbiw	r24, 0x00	; 0
     e9a:	89 f0       	breq	.+34     	; 0xebe <split+0x4a>
     e9c:	0c e7       	ldi	r16, 0x7C	; 124
     e9e:	11 e1       	ldi	r17, 0x11	; 17
     ea0:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <atoi>
     ea4:	f8 01       	movw	r30, r16
     ea6:	81 93       	st	Z+, r24
     ea8:	91 93       	st	Z+, r25
     eaa:	8f 01       	movw	r16, r30
     eac:	be 01       	movw	r22, r28
     eae:	6f 5f       	subi	r22, 0xFF	; 255
     eb0:	7f 4f       	sbci	r23, 0xFF	; 255
     eb2:	80 e0       	ldi	r24, 0x00	; 0
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	0e 94 06 11 	call	0x220c	; 0x220c <strtok>
     eba:	00 97       	sbiw	r24, 0x00	; 0
     ebc:	89 f7       	brne	.-30     	; 0xea0 <split+0x2c>
     ebe:	0f 90       	pop	r0
     ec0:	0f 90       	pop	r0
     ec2:	0f 90       	pop	r0
     ec4:	df 91       	pop	r29
     ec6:	cf 91       	pop	r28
     ec8:	1f 91       	pop	r17
     eca:	0f 91       	pop	r16
     ecc:	08 95       	ret

00000ece <isMoving>:
     ece:	80 91 6e 11 	lds	r24, 0x116E
     ed2:	90 91 6f 11 	lds	r25, 0x116F
     ed6:	88 51       	subi	r24, 0x18	; 24
     ed8:	9c 4f       	sbci	r25, 0xFC	; 252
     eda:	90 93 6f 11 	sts	0x116F, r25
     ede:	80 93 6e 11 	sts	0x116E, r24
     ee2:	20 91 6c 11 	lds	r18, 0x116C
     ee6:	30 91 6d 11 	lds	r19, 0x116D
     eea:	82 17       	cp	r24, r18
     eec:	93 07       	cpc	r25, r19
     eee:	3c f0       	brlt	.+14     	; 0xefe <isMoving+0x30>
     ef0:	10 92 6f 11 	sts	0x116F, r1
     ef4:	10 92 6e 11 	sts	0x116E, r1
     ef8:	80 e0       	ldi	r24, 0x00	; 0
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	08 95       	ret
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	08 95       	ret

00000f04 <setAngle>:
     f04:	a0 91 7e 11 	lds	r26, 0x117E
     f08:	b0 91 7f 11 	lds	r27, 0x117F
     f0c:	a6 34       	cpi	r26, 0x46	; 70
     f0e:	b1 05       	cpc	r27, r1
     f10:	ac f4       	brge	.+42     	; 0xf3c <setAngle+0x38>
     f12:	e0 e8       	ldi	r30, 0x80	; 128
     f14:	f1 e1       	ldi	r31, 0x11	; 17
     f16:	aa 0f       	add	r26, r26
     f18:	bb 1f       	adc	r27, r27
     f1a:	a2 95       	swap	r26
     f1c:	b2 95       	swap	r27
     f1e:	b0 7f       	andi	r27, 0xF0	; 240
     f20:	ba 27       	eor	r27, r26
     f22:	a0 7f       	andi	r26, 0xF0	; 240
     f24:	ba 27       	eor	r27, r26
     f26:	a2 55       	subi	r26, 0x52	; 82
     f28:	bd 4f       	sbci	r27, 0xFD	; 253
     f2a:	20 ea       	ldi	r18, 0xA0	; 160
     f2c:	31 e1       	ldi	r19, 0x11	; 17
     f2e:	81 91       	ld	r24, Z+
     f30:	91 91       	ld	r25, Z+
     f32:	8d 93       	st	X+, r24
     f34:	9d 93       	st	X+, r25
     f36:	e2 17       	cp	r30, r18
     f38:	f3 07       	cpc	r31, r19
     f3a:	c9 f7       	brne	.-14     	; 0xf2e <setAngle+0x2a>
     f3c:	08 95       	ret

00000f3e <getAngle>:
     f3e:	cf 92       	push	r12
     f40:	df 92       	push	r13
     f42:	ef 92       	push	r14
     f44:	ff 92       	push	r15
     f46:	0f 93       	push	r16
     f48:	1f 93       	push	r17
     f4a:	cf 93       	push	r28
     f4c:	df 93       	push	r29
     f4e:	cd b7       	in	r28, 0x3d	; 61
     f50:	de b7       	in	r29, 0x3e	; 62
     f52:	6e 97       	sbiw	r28, 0x1e	; 30
     f54:	0f b6       	in	r0, 0x3f	; 63
     f56:	f8 94       	cli
     f58:	de bf       	out	0x3e, r29	; 62
     f5a:	0f be       	out	0x3f, r0	; 63
     f5c:	cd bf       	out	0x3d, r28	; 61
     f5e:	fe 01       	movw	r30, r28
     f60:	31 96       	adiw	r30, 0x01	; 1
     f62:	8e e1       	ldi	r24, 0x1E	; 30
     f64:	df 01       	movw	r26, r30
     f66:	1d 92       	st	X+, r1
     f68:	8a 95       	dec	r24
     f6a:	e9 f7       	brne	.-6      	; 0xf66 <getAngle+0x28>
     f6c:	0e e6       	ldi	r16, 0x6E	; 110
     f6e:	1b e0       	ldi	r17, 0x0B	; 11
     f70:	7f 01       	movw	r14, r30
     f72:	0f 2e       	mov	r0, r31
     f74:	fc e8       	ldi	r31, 0x8C	; 140
     f76:	cf 2e       	mov	r12, r31
     f78:	fb e0       	ldi	r31, 0x0B	; 11
     f7a:	df 2e       	mov	r13, r31
     f7c:	f0 2d       	mov	r31, r0
     f7e:	64 e2       	ldi	r22, 0x24	; 36
     f80:	70 e0       	ldi	r23, 0x00	; 0
     f82:	f8 01       	movw	r30, r16
     f84:	81 91       	ld	r24, Z+
     f86:	91 91       	ld	r25, Z+
     f88:	8f 01       	movw	r16, r30
     f8a:	4f da       	rcall	.-2914   	; 0x42a <dxl_read_word>
     f8c:	d7 01       	movw	r26, r14
     f8e:	8d 93       	st	X+, r24
     f90:	9d 93       	st	X+, r25
     f92:	7d 01       	movw	r14, r26
     f94:	0c 15       	cp	r16, r12
     f96:	1d 05       	cpc	r17, r13
     f98:	91 f7       	brne	.-28     	; 0xf7e <getAngle+0x40>
     f9a:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f9c:	8f 93       	push	r24
     f9e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     fa0:	8f 93       	push	r24
     fa2:	8c 8d       	ldd	r24, Y+28	; 0x1c
     fa4:	8f 93       	push	r24
     fa6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fa8:	8f 93       	push	r24
     faa:	8a 8d       	ldd	r24, Y+26	; 0x1a
     fac:	8f 93       	push	r24
     fae:	89 8d       	ldd	r24, Y+25	; 0x19
     fb0:	8f 93       	push	r24
     fb2:	88 8d       	ldd	r24, Y+24	; 0x18
     fb4:	8f 93       	push	r24
     fb6:	8f 89       	ldd	r24, Y+23	; 0x17
     fb8:	8f 93       	push	r24
     fba:	8e 89       	ldd	r24, Y+22	; 0x16
     fbc:	8f 93       	push	r24
     fbe:	8d 89       	ldd	r24, Y+21	; 0x15
     fc0:	8f 93       	push	r24
     fc2:	8c 89       	ldd	r24, Y+20	; 0x14
     fc4:	8f 93       	push	r24
     fc6:	8b 89       	ldd	r24, Y+19	; 0x13
     fc8:	8f 93       	push	r24
     fca:	8a 89       	ldd	r24, Y+18	; 0x12
     fcc:	8f 93       	push	r24
     fce:	89 89       	ldd	r24, Y+17	; 0x11
     fd0:	8f 93       	push	r24
     fd2:	1f 92       	push	r1
     fd4:	82 e0       	ldi	r24, 0x02	; 2
     fd6:	8f 93       	push	r24
     fd8:	80 ea       	ldi	r24, 0xA0	; 160
     fda:	9b e0       	ldi	r25, 0x0B	; 11
     fdc:	9f 93       	push	r25
     fde:	8f 93       	push	r24
     fe0:	0e 94 c0 11 	call	0x2380	; 0x2380 <printf>
     fe4:	0f b6       	in	r0, 0x3f	; 63
     fe6:	f8 94       	cli
     fe8:	de bf       	out	0x3e, r29	; 62
     fea:	0f be       	out	0x3f, r0	; 63
     fec:	cd bf       	out	0x3d, r28	; 61
     fee:	6e 96       	adiw	r28, 0x1e	; 30
     ff0:	0f b6       	in	r0, 0x3f	; 63
     ff2:	f8 94       	cli
     ff4:	de bf       	out	0x3e, r29	; 62
     ff6:	0f be       	out	0x3f, r0	; 63
     ff8:	cd bf       	out	0x3d, r28	; 61
     ffa:	df 91       	pop	r29
     ffc:	cf 91       	pop	r28
     ffe:	1f 91       	pop	r17
    1000:	0f 91       	pop	r16
    1002:	ff 90       	pop	r15
    1004:	ef 90       	pop	r14
    1006:	df 90       	pop	r13
    1008:	cf 90       	pop	r12
    100a:	08 95       	ret

0000100c <sendActAngle>:
    100c:	88 0f       	add	r24, r24
    100e:	99 1f       	adc	r25, r25
    1010:	82 95       	swap	r24
    1012:	92 95       	swap	r25
    1014:	90 7f       	andi	r25, 0xF0	; 240
    1016:	98 27       	eor	r25, r24
    1018:	80 7f       	andi	r24, 0xF0	; 240
    101a:	98 27       	eor	r25, r24
    101c:	fc 01       	movw	r30, r24
    101e:	e2 55       	subi	r30, 0x52	; 82
    1020:	fd 4f       	sbci	r31, 0xFD	; 253
    1022:	81 8d       	ldd	r24, Z+25	; 0x19
    1024:	8f 93       	push	r24
    1026:	80 8d       	ldd	r24, Z+24	; 0x18
    1028:	8f 93       	push	r24
    102a:	87 89       	ldd	r24, Z+23	; 0x17
    102c:	8f 93       	push	r24
    102e:	86 89       	ldd	r24, Z+22	; 0x16
    1030:	8f 93       	push	r24
    1032:	85 89       	ldd	r24, Z+21	; 0x15
    1034:	8f 93       	push	r24
    1036:	84 89       	ldd	r24, Z+20	; 0x14
    1038:	8f 93       	push	r24
    103a:	83 89       	ldd	r24, Z+19	; 0x13
    103c:	8f 93       	push	r24
    103e:	82 89       	ldd	r24, Z+18	; 0x12
    1040:	8f 93       	push	r24
    1042:	81 89       	ldd	r24, Z+17	; 0x11
    1044:	8f 93       	push	r24
    1046:	80 89       	ldd	r24, Z+16	; 0x10
    1048:	8f 93       	push	r24
    104a:	87 85       	ldd	r24, Z+15	; 0x0f
    104c:	8f 93       	push	r24
    104e:	86 85       	ldd	r24, Z+14	; 0x0e
    1050:	8f 93       	push	r24
    1052:	85 85       	ldd	r24, Z+13	; 0x0d
    1054:	8f 93       	push	r24
    1056:	84 85       	ldd	r24, Z+12	; 0x0c
    1058:	8f 93       	push	r24
    105a:	83 85       	ldd	r24, Z+11	; 0x0b
    105c:	8f 93       	push	r24
    105e:	82 85       	ldd	r24, Z+10	; 0x0a
    1060:	8f 93       	push	r24
    1062:	81 85       	ldd	r24, Z+9	; 0x09
    1064:	8f 93       	push	r24
    1066:	80 85       	ldd	r24, Z+8	; 0x08
    1068:	8f 93       	push	r24
    106a:	87 81       	ldd	r24, Z+7	; 0x07
    106c:	8f 93       	push	r24
    106e:	86 81       	ldd	r24, Z+6	; 0x06
    1070:	8f 93       	push	r24
    1072:	85 81       	ldd	r24, Z+5	; 0x05
    1074:	8f 93       	push	r24
    1076:	84 81       	ldd	r24, Z+4	; 0x04
    1078:	8f 93       	push	r24
    107a:	83 81       	ldd	r24, Z+3	; 0x03
    107c:	8f 93       	push	r24
    107e:	82 81       	ldd	r24, Z+2	; 0x02
    1080:	8f 93       	push	r24
    1082:	81 81       	ldd	r24, Z+1	; 0x01
    1084:	8f 93       	push	r24
    1086:	80 81       	ld	r24, Z
    1088:	8f 93       	push	r24
    108a:	1f 92       	push	r1
    108c:	83 e0       	ldi	r24, 0x03	; 3
    108e:	8f 93       	push	r24
    1090:	89 ec       	ldi	r24, 0xC9	; 201
    1092:	9b e0       	ldi	r25, 0x0B	; 11
    1094:	9f 93       	push	r25
    1096:	8f 93       	push	r24
    1098:	0e 94 c0 11 	call	0x2380	; 0x2380 <printf>
    109c:	8d b7       	in	r24, 0x3d	; 61
    109e:	9e b7       	in	r25, 0x3e	; 62
    10a0:	4e 96       	adiw	r24, 0x1e	; 30
    10a2:	0f b6       	in	r0, 0x3f	; 63
    10a4:	f8 94       	cli
    10a6:	9e bf       	out	0x3e, r25	; 62
    10a8:	0f be       	out	0x3f, r0	; 63
    10aa:	8d bf       	out	0x3d, r24	; 61
    10ac:	08 95       	ret

000010ae <getLoad>:
    10ae:	cf 92       	push	r12
    10b0:	df 92       	push	r13
    10b2:	ef 92       	push	r14
    10b4:	ff 92       	push	r15
    10b6:	0f 93       	push	r16
    10b8:	1f 93       	push	r17
    10ba:	cf 93       	push	r28
    10bc:	df 93       	push	r29
    10be:	cd b7       	in	r28, 0x3d	; 61
    10c0:	de b7       	in	r29, 0x3e	; 62
    10c2:	6e 97       	sbiw	r28, 0x1e	; 30
    10c4:	0f b6       	in	r0, 0x3f	; 63
    10c6:	f8 94       	cli
    10c8:	de bf       	out	0x3e, r29	; 62
    10ca:	0f be       	out	0x3f, r0	; 63
    10cc:	cd bf       	out	0x3d, r28	; 61
    10ce:	fe 01       	movw	r30, r28
    10d0:	31 96       	adiw	r30, 0x01	; 1
    10d2:	8e e1       	ldi	r24, 0x1E	; 30
    10d4:	df 01       	movw	r26, r30
    10d6:	1d 92       	st	X+, r1
    10d8:	8a 95       	dec	r24
    10da:	e9 f7       	brne	.-6      	; 0x10d6 <getLoad+0x28>
    10dc:	0e e6       	ldi	r16, 0x6E	; 110
    10de:	1b e0       	ldi	r17, 0x0B	; 11
    10e0:	7f 01       	movw	r14, r30
    10e2:	0f 2e       	mov	r0, r31
    10e4:	fc e8       	ldi	r31, 0x8C	; 140
    10e6:	cf 2e       	mov	r12, r31
    10e8:	fb e0       	ldi	r31, 0x0B	; 11
    10ea:	df 2e       	mov	r13, r31
    10ec:	f0 2d       	mov	r31, r0
    10ee:	68 e2       	ldi	r22, 0x28	; 40
    10f0:	70 e0       	ldi	r23, 0x00	; 0
    10f2:	f8 01       	movw	r30, r16
    10f4:	81 91       	ld	r24, Z+
    10f6:	91 91       	ld	r25, Z+
    10f8:	8f 01       	movw	r16, r30
    10fa:	97 d9       	rcall	.-3282   	; 0x42a <dxl_read_word>
    10fc:	d7 01       	movw	r26, r14
    10fe:	8d 93       	st	X+, r24
    1100:	9d 93       	st	X+, r25
    1102:	7d 01       	movw	r14, r26
    1104:	0c 15       	cp	r16, r12
    1106:	1d 05       	cpc	r17, r13
    1108:	91 f7       	brne	.-28     	; 0x10ee <getLoad+0x40>
    110a:	88 8d       	ldd	r24, Y+24	; 0x18
    110c:	8f 93       	push	r24
    110e:	8f 89       	ldd	r24, Y+23	; 0x17
    1110:	8f 93       	push	r24
    1112:	8e 89       	ldd	r24, Y+22	; 0x16
    1114:	8f 93       	push	r24
    1116:	8d 89       	ldd	r24, Y+21	; 0x15
    1118:	8f 93       	push	r24
    111a:	8c 89       	ldd	r24, Y+20	; 0x14
    111c:	8f 93       	push	r24
    111e:	8b 89       	ldd	r24, Y+19	; 0x13
    1120:	8f 93       	push	r24
    1122:	8a 89       	ldd	r24, Y+18	; 0x12
    1124:	8f 93       	push	r24
    1126:	89 89       	ldd	r24, Y+17	; 0x11
    1128:	8f 93       	push	r24
    112a:	88 89       	ldd	r24, Y+16	; 0x10
    112c:	8f 93       	push	r24
    112e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1130:	8f 93       	push	r24
    1132:	8e 85       	ldd	r24, Y+14	; 0x0e
    1134:	8f 93       	push	r24
    1136:	8d 85       	ldd	r24, Y+13	; 0x0d
    1138:	8f 93       	push	r24
    113a:	8c 85       	ldd	r24, Y+12	; 0x0c
    113c:	8f 93       	push	r24
    113e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1140:	8f 93       	push	r24
    1142:	8a 85       	ldd	r24, Y+10	; 0x0a
    1144:	8f 93       	push	r24
    1146:	89 85       	ldd	r24, Y+9	; 0x09
    1148:	8f 93       	push	r24
    114a:	88 85       	ldd	r24, Y+8	; 0x08
    114c:	8f 93       	push	r24
    114e:	8f 81       	ldd	r24, Y+7	; 0x07
    1150:	8f 93       	push	r24
    1152:	8e 81       	ldd	r24, Y+6	; 0x06
    1154:	8f 93       	push	r24
    1156:	8d 81       	ldd	r24, Y+5	; 0x05
    1158:	8f 93       	push	r24
    115a:	8c 81       	ldd	r24, Y+4	; 0x04
    115c:	8f 93       	push	r24
    115e:	8b 81       	ldd	r24, Y+3	; 0x03
    1160:	8f 93       	push	r24
    1162:	8a 81       	ldd	r24, Y+2	; 0x02
    1164:	8f 93       	push	r24
    1166:	89 81       	ldd	r24, Y+1	; 0x01
    1168:	8f 93       	push	r24
    116a:	1f 92       	push	r1
    116c:	84 e0       	ldi	r24, 0x04	; 4
    116e:	8f 93       	push	r24
    1170:	84 ef       	ldi	r24, 0xF4	; 244
    1172:	9b e0       	ldi	r25, 0x0B	; 11
    1174:	9f 93       	push	r25
    1176:	8f 93       	push	r24
    1178:	0e 94 c0 11 	call	0x2380	; 0x2380 <printf>
    117c:	0f b6       	in	r0, 0x3f	; 63
    117e:	f8 94       	cli
    1180:	de bf       	out	0x3e, r29	; 62
    1182:	0f be       	out	0x3f, r0	; 63
    1184:	cd bf       	out	0x3d, r28	; 61
    1186:	6e 96       	adiw	r28, 0x1e	; 30
    1188:	0f b6       	in	r0, 0x3f	; 63
    118a:	f8 94       	cli
    118c:	de bf       	out	0x3e, r29	; 62
    118e:	0f be       	out	0x3f, r0	; 63
    1190:	cd bf       	out	0x3d, r28	; 61
    1192:	df 91       	pop	r29
    1194:	cf 91       	pop	r28
    1196:	1f 91       	pop	r17
    1198:	0f 91       	pop	r16
    119a:	ff 90       	pop	r15
    119c:	ef 90       	pop	r14
    119e:	df 90       	pop	r13
    11a0:	cf 90       	pop	r12
    11a2:	08 95       	ret

000011a4 <getVoltage>:
    11a4:	cf 92       	push	r12
    11a6:	df 92       	push	r13
    11a8:	ef 92       	push	r14
    11aa:	ff 92       	push	r15
    11ac:	0f 93       	push	r16
    11ae:	1f 93       	push	r17
    11b0:	cf 93       	push	r28
    11b2:	df 93       	push	r29
    11b4:	cd b7       	in	r28, 0x3d	; 61
    11b6:	de b7       	in	r29, 0x3e	; 62
    11b8:	6e 97       	sbiw	r28, 0x1e	; 30
    11ba:	0f b6       	in	r0, 0x3f	; 63
    11bc:	f8 94       	cli
    11be:	de bf       	out	0x3e, r29	; 62
    11c0:	0f be       	out	0x3f, r0	; 63
    11c2:	cd bf       	out	0x3d, r28	; 61
    11c4:	fe 01       	movw	r30, r28
    11c6:	31 96       	adiw	r30, 0x01	; 1
    11c8:	8e e1       	ldi	r24, 0x1E	; 30
    11ca:	df 01       	movw	r26, r30
    11cc:	1d 92       	st	X+, r1
    11ce:	8a 95       	dec	r24
    11d0:	e9 f7       	brne	.-6      	; 0x11cc <getVoltage+0x28>
    11d2:	0e e6       	ldi	r16, 0x6E	; 110
    11d4:	1b e0       	ldi	r17, 0x0B	; 11
    11d6:	7f 01       	movw	r14, r30
    11d8:	0f 2e       	mov	r0, r31
    11da:	fc e8       	ldi	r31, 0x8C	; 140
    11dc:	cf 2e       	mov	r12, r31
    11de:	fb e0       	ldi	r31, 0x0B	; 11
    11e0:	df 2e       	mov	r13, r31
    11e2:	f0 2d       	mov	r31, r0
    11e4:	6a e2       	ldi	r22, 0x2A	; 42
    11e6:	70 e0       	ldi	r23, 0x00	; 0
    11e8:	f8 01       	movw	r30, r16
    11ea:	81 91       	ld	r24, Z+
    11ec:	91 91       	ld	r25, Z+
    11ee:	8f 01       	movw	r16, r30
    11f0:	1c d9       	rcall	.-3528   	; 0x42a <dxl_read_word>
    11f2:	0e 94 b5 00 	call	0x16a	; 0x16a <dxl_get_lowbyte>
    11f6:	d7 01       	movw	r26, r14
    11f8:	8d 93       	st	X+, r24
    11fa:	9d 93       	st	X+, r25
    11fc:	7d 01       	movw	r14, r26
    11fe:	0c 15       	cp	r16, r12
    1200:	1d 05       	cpc	r17, r13
    1202:	81 f7       	brne	.-32     	; 0x11e4 <getVoltage+0x40>
    1204:	88 8d       	ldd	r24, Y+24	; 0x18
    1206:	8f 93       	push	r24
    1208:	8f 89       	ldd	r24, Y+23	; 0x17
    120a:	8f 93       	push	r24
    120c:	8e 89       	ldd	r24, Y+22	; 0x16
    120e:	8f 93       	push	r24
    1210:	8d 89       	ldd	r24, Y+21	; 0x15
    1212:	8f 93       	push	r24
    1214:	8c 89       	ldd	r24, Y+20	; 0x14
    1216:	8f 93       	push	r24
    1218:	8b 89       	ldd	r24, Y+19	; 0x13
    121a:	8f 93       	push	r24
    121c:	8a 89       	ldd	r24, Y+18	; 0x12
    121e:	8f 93       	push	r24
    1220:	89 89       	ldd	r24, Y+17	; 0x11
    1222:	8f 93       	push	r24
    1224:	88 89       	ldd	r24, Y+16	; 0x10
    1226:	8f 93       	push	r24
    1228:	8f 85       	ldd	r24, Y+15	; 0x0f
    122a:	8f 93       	push	r24
    122c:	8e 85       	ldd	r24, Y+14	; 0x0e
    122e:	8f 93       	push	r24
    1230:	8d 85       	ldd	r24, Y+13	; 0x0d
    1232:	8f 93       	push	r24
    1234:	8c 85       	ldd	r24, Y+12	; 0x0c
    1236:	8f 93       	push	r24
    1238:	8b 85       	ldd	r24, Y+11	; 0x0b
    123a:	8f 93       	push	r24
    123c:	8a 85       	ldd	r24, Y+10	; 0x0a
    123e:	8f 93       	push	r24
    1240:	89 85       	ldd	r24, Y+9	; 0x09
    1242:	8f 93       	push	r24
    1244:	88 85       	ldd	r24, Y+8	; 0x08
    1246:	8f 93       	push	r24
    1248:	8f 81       	ldd	r24, Y+7	; 0x07
    124a:	8f 93       	push	r24
    124c:	8e 81       	ldd	r24, Y+6	; 0x06
    124e:	8f 93       	push	r24
    1250:	8d 81       	ldd	r24, Y+5	; 0x05
    1252:	8f 93       	push	r24
    1254:	8c 81       	ldd	r24, Y+4	; 0x04
    1256:	8f 93       	push	r24
    1258:	8b 81       	ldd	r24, Y+3	; 0x03
    125a:	8f 93       	push	r24
    125c:	8a 81       	ldd	r24, Y+2	; 0x02
    125e:	8f 93       	push	r24
    1260:	89 81       	ldd	r24, Y+1	; 0x01
    1262:	8f 93       	push	r24
    1264:	1f 92       	push	r1
    1266:	85 e0       	ldi	r24, 0x05	; 5
    1268:	8f 93       	push	r24
    126a:	84 ef       	ldi	r24, 0xF4	; 244
    126c:	9b e0       	ldi	r25, 0x0B	; 11
    126e:	9f 93       	push	r25
    1270:	8f 93       	push	r24
    1272:	0e 94 c0 11 	call	0x2380	; 0x2380 <printf>
    1276:	0f b6       	in	r0, 0x3f	; 63
    1278:	f8 94       	cli
    127a:	de bf       	out	0x3e, r29	; 62
    127c:	0f be       	out	0x3f, r0	; 63
    127e:	cd bf       	out	0x3d, r28	; 61
    1280:	6e 96       	adiw	r28, 0x1e	; 30
    1282:	0f b6       	in	r0, 0x3f	; 63
    1284:	f8 94       	cli
    1286:	de bf       	out	0x3e, r29	; 62
    1288:	0f be       	out	0x3f, r0	; 63
    128a:	cd bf       	out	0x3d, r28	; 61
    128c:	df 91       	pop	r29
    128e:	cf 91       	pop	r28
    1290:	1f 91       	pop	r17
    1292:	0f 91       	pop	r16
    1294:	ff 90       	pop	r15
    1296:	ef 90       	pop	r14
    1298:	df 90       	pop	r13
    129a:	cf 90       	pop	r12
    129c:	08 95       	ret

0000129e <startMotion>:
    129e:	90 93 6b 11 	sts	0x116B, r25
    12a2:	80 93 6a 11 	sts	0x116A, r24
    12a6:	70 93 69 11 	sts	0x1169, r23
    12aa:	60 93 68 11 	sts	0x1168, r22
    12ae:	20 91 70 11 	lds	r18, 0x1170
    12b2:	30 91 71 11 	lds	r19, 0x1171
    12b6:	23 2b       	or	r18, r19
    12b8:	61 f4       	brne	.+24     	; 0x12d2 <startMotion+0x34>
    12ba:	90 93 73 11 	sts	0x1173, r25
    12be:	80 93 72 11 	sts	0x1172, r24
    12c2:	70 93 71 11 	sts	0x1171, r23
    12c6:	60 93 70 11 	sts	0x1170, r22
    12ca:	10 92 69 11 	sts	0x1169, r1
    12ce:	10 92 68 11 	sts	0x1168, r1
    12d2:	08 95       	ret

000012d4 <setModeAction>:
    12d4:	80 91 70 11 	lds	r24, 0x1170
    12d8:	90 91 71 11 	lds	r25, 0x1171
    12dc:	18 16       	cp	r1, r24
    12de:	19 06       	cpc	r1, r25
    12e0:	0c f4       	brge	.+2      	; 0x12e4 <setModeAction+0x10>
    12e2:	50 c0       	rjmp	.+160    	; 0x1384 <setModeAction+0xb0>
    12e4:	80 91 7a 11 	lds	r24, 0x117A
    12e8:	90 91 7b 11 	lds	r25, 0x117B
    12ec:	01 97       	sbiw	r24, 0x01	; 1
    12ee:	09 f0       	breq	.+2      	; 0x12f2 <setModeAction+0x1e>
    12f0:	49 c0       	rjmp	.+146    	; 0x1384 <setModeAction+0xb0>
    12f2:	80 91 62 11 	lds	r24, 0x1162
    12f6:	90 91 63 11 	lds	r25, 0x1163
    12fa:	89 2b       	or	r24, r25
    12fc:	d1 f4       	brne	.+52     	; 0x1332 <setModeAction+0x5e>
    12fe:	e0 91 74 11 	lds	r30, 0x1174
    1302:	f0 91 75 11 	lds	r31, 0x1175
    1306:	ee 0f       	add	r30, r30
    1308:	ff 1f       	adc	r31, r31
    130a:	ee 0f       	add	r30, r30
    130c:	ff 1f       	adc	r31, r31
    130e:	e0 5f       	subi	r30, 0xF0	; 240
    1310:	fd 4f       	sbci	r31, 0xFD	; 253
    1312:	80 81       	ld	r24, Z
    1314:	91 81       	ldd	r25, Z+1	; 0x01
    1316:	02 97       	sbiw	r24, 0x02	; 2
    1318:	61 f4       	brne	.+24     	; 0x1332 <setModeAction+0x5e>
    131a:	61 e0       	ldi	r22, 0x01	; 1
    131c:	70 e0       	ldi	r23, 0x00	; 0
    131e:	81 e0       	ldi	r24, 0x01	; 1
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	bd df       	rcall	.-134    	; 0x129e <startMotion>
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	90 93 63 11 	sts	0x1163, r25
    132c:	80 93 62 11 	sts	0x1162, r24
    1330:	08 95       	ret
    1332:	10 92 63 11 	sts	0x1163, r1
    1336:	10 92 62 11 	sts	0x1162, r1
    133a:	e0 91 74 11 	lds	r30, 0x1174
    133e:	f0 91 75 11 	lds	r31, 0x1175
    1342:	ee 0f       	add	r30, r30
    1344:	ff 1f       	adc	r31, r31
    1346:	ee 0f       	add	r30, r30
    1348:	ff 1f       	adc	r31, r31
    134a:	e0 5f       	subi	r30, 0xF0	; 240
    134c:	fd 4f       	sbci	r31, 0xFD	; 253
    134e:	62 81       	ldd	r22, Z+2	; 0x02
    1350:	73 81       	ldd	r23, Z+3	; 0x03
    1352:	80 81       	ld	r24, Z
    1354:	91 81       	ldd	r25, Z+1	; 0x01
    1356:	a3 df       	rcall	.-186    	; 0x129e <startMotion>
    1358:	80 91 74 11 	lds	r24, 0x1174
    135c:	90 91 75 11 	lds	r25, 0x1175
    1360:	01 96       	adiw	r24, 0x01	; 1
    1362:	90 93 75 11 	sts	0x1175, r25
    1366:	80 93 74 11 	sts	0x1174, r24
    136a:	20 91 12 02 	lds	r18, 0x0212
    136e:	30 91 13 02 	lds	r19, 0x0213
    1372:	28 17       	cp	r18, r24
    1374:	39 07       	cpc	r19, r25
    1376:	34 f4       	brge	.+12     	; 0x1384 <setModeAction+0xb0>
    1378:	81 e0       	ldi	r24, 0x01	; 1
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	90 93 75 11 	sts	0x1175, r25
    1380:	80 93 74 11 	sts	0x1174, r24
    1384:	08 95       	ret

00001386 <forceMotion>:
    1386:	90 93 73 11 	sts	0x1173, r25
    138a:	80 93 72 11 	sts	0x1172, r24
    138e:	70 93 71 11 	sts	0x1171, r23
    1392:	60 93 70 11 	sts	0x1170, r22
    1396:	10 92 69 11 	sts	0x1169, r1
    139a:	10 92 68 11 	sts	0x1168, r1
    139e:	81 e0       	ldi	r24, 0x01	; 1
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	90 93 0f 02 	sts	0x020F, r25
    13a6:	80 93 0e 02 	sts	0x020E, r24
    13aa:	10 92 6f 11 	sts	0x116F, r1
    13ae:	10 92 6e 11 	sts	0x116E, r1
    13b2:	08 95       	ret

000013b4 <stopMotion>:
    13b4:	81 e0       	ldi	r24, 0x01	; 1
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	90 93 0f 02 	sts	0x020F, r25
    13bc:	80 93 0e 02 	sts	0x020E, r24
    13c0:	10 92 71 11 	sts	0x1171, r1
    13c4:	10 92 70 11 	sts	0x1170, r1
    13c8:	10 92 6f 11 	sts	0x116F, r1
    13cc:	10 92 6e 11 	sts	0x116E, r1
    13d0:	8f ef       	ldi	r24, 0xFF	; 255
    13d2:	9f ef       	ldi	r25, 0xFF	; 255
    13d4:	90 93 0d 02 	sts	0x020D, r25
    13d8:	80 93 0c 02 	sts	0x020C, r24
    13dc:	08 95       	ret

000013de <PrintErrorCode>:
	
}

void PrintErrorCode()
{
	if(dxl_get_rxpacket_error(ERRBIT_VOLTAGE) == 1)
    13de:	81 e0       	ldi	r24, 0x01	; 1
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	0e 94 9b 00 	call	0x136	; 0x136 <dxl_get_rxpacket_error>
    13e6:	01 97       	sbiw	r24, 0x01	; 1
    13e8:	19 f4       	brne	.+6      	; 0x13f0 <PrintErrorCode+0x12>
	printf("Input voltage error!\n");
    13ea:	81 e2       	ldi	r24, 0x21	; 33
    13ec:	9c e0       	ldi	r25, 0x0C	; 12
    13ee:	d9 d7       	rcall	.+4018   	; 0x23a2 <puts>

	if(dxl_get_rxpacket_error(ERRBIT_ANGLE) == 1)
    13f0:	82 e0       	ldi	r24, 0x02	; 2
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	0e 94 9b 00 	call	0x136	; 0x136 <dxl_get_rxpacket_error>
    13f8:	01 97       	sbiw	r24, 0x01	; 1
    13fa:	19 f4       	brne	.+6      	; 0x1402 <PrintErrorCode+0x24>
	printf("Angle limit error!\n");
    13fc:	86 e3       	ldi	r24, 0x36	; 54
    13fe:	9c e0       	ldi	r25, 0x0C	; 12
    1400:	d0 d7       	rcall	.+4000   	; 0x23a2 <puts>

	if(dxl_get_rxpacket_error(ERRBIT_OVERHEAT) == 1)
    1402:	84 e0       	ldi	r24, 0x04	; 4
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	0e 94 9b 00 	call	0x136	; 0x136 <dxl_get_rxpacket_error>
    140a:	01 97       	sbiw	r24, 0x01	; 1
    140c:	19 f4       	brne	.+6      	; 0x1414 <PrintErrorCode+0x36>
	printf("Overheat error!\n");
    140e:	89 e4       	ldi	r24, 0x49	; 73
    1410:	9c e0       	ldi	r25, 0x0C	; 12
    1412:	c7 d7       	rcall	.+3982   	; 0x23a2 <puts>

	if(dxl_get_rxpacket_error(ERRBIT_RANGE) == 1)
    1414:	88 e0       	ldi	r24, 0x08	; 8
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	0e 94 9b 00 	call	0x136	; 0x136 <dxl_get_rxpacket_error>
    141c:	01 97       	sbiw	r24, 0x01	; 1
    141e:	19 f4       	brne	.+6      	; 0x1426 <PrintErrorCode+0x48>
	printf("Out of range error!\n");
    1420:	89 e5       	ldi	r24, 0x59	; 89
    1422:	9c e0       	ldi	r25, 0x0C	; 12
    1424:	be d7       	rcall	.+3964   	; 0x23a2 <puts>

	if(dxl_get_rxpacket_error(ERRBIT_CHECKSUM) == 1)
    1426:	80 e1       	ldi	r24, 0x10	; 16
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	0e 94 9b 00 	call	0x136	; 0x136 <dxl_get_rxpacket_error>
    142e:	01 97       	sbiw	r24, 0x01	; 1
    1430:	19 f4       	brne	.+6      	; 0x1438 <PrintErrorCode+0x5a>
	printf("Checksum error!\n");
    1432:	8d e6       	ldi	r24, 0x6D	; 109
    1434:	9c e0       	ldi	r25, 0x0C	; 12
    1436:	b5 d7       	rcall	.+3946   	; 0x23a2 <puts>

	if(dxl_get_rxpacket_error(ERRBIT_OVERLOAD) == 1)
    1438:	80 e2       	ldi	r24, 0x20	; 32
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	0e 94 9b 00 	call	0x136	; 0x136 <dxl_get_rxpacket_error>
    1440:	01 97       	sbiw	r24, 0x01	; 1
    1442:	19 f4       	brne	.+6      	; 0x144a <PrintErrorCode+0x6c>
	printf("Overload error!\n");
    1444:	8d e7       	ldi	r24, 0x7D	; 125
    1446:	9c e0       	ldi	r25, 0x0C	; 12
    1448:	ac d7       	rcall	.+3928   	; 0x23a2 <puts>

	if(dxl_get_rxpacket_error(ERRBIT_INSTRUCTION) == 1)
    144a:	80 e4       	ldi	r24, 0x40	; 64
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	0e 94 9b 00 	call	0x136	; 0x136 <dxl_get_rxpacket_error>
    1452:	01 97       	sbiw	r24, 0x01	; 1
    1454:	19 f4       	brne	.+6      	; 0x145c <PrintErrorCode+0x7e>
	printf("Instruction code error!\n");
    1456:	8d e8       	ldi	r24, 0x8D	; 141
    1458:	9c e0       	ldi	r25, 0x0C	; 12
    145a:	a3 c7       	rjmp	.+3910   	; 0x23a2 <puts>
    145c:	08 95       	ret

0000145e <PrintCommStatus>:
}

// Print communication result
void PrintCommStatus(int CommStatus)
{
	switch(CommStatus)
    145e:	84 30       	cpi	r24, 0x04	; 4
    1460:	91 05       	cpc	r25, r1
    1462:	91 f0       	breq	.+36     	; 0x1488 <PrintCommStatus+0x2a>
    1464:	34 f4       	brge	.+12     	; 0x1472 <PrintCommStatus+0x14>
    1466:	82 30       	cpi	r24, 0x02	; 2
    1468:	91 05       	cpc	r25, r1
    146a:	51 f0       	breq	.+20     	; 0x1480 <PrintCommStatus+0x22>
    146c:	03 97       	sbiw	r24, 0x03	; 3
    146e:	81 f0       	breq	.+32     	; 0x1490 <PrintCommStatus+0x32>
    1470:	1f c0       	rjmp	.+62     	; 0x14b0 <PrintCommStatus+0x52>
    1472:	86 30       	cpi	r24, 0x06	; 6
    1474:	91 05       	cpc	r25, r1
    1476:	a1 f0       	breq	.+40     	; 0x14a0 <PrintCommStatus+0x42>
    1478:	7c f0       	brlt	.+30     	; 0x1498 <PrintCommStatus+0x3a>
    147a:	07 97       	sbiw	r24, 0x07	; 7
    147c:	a9 f0       	breq	.+42     	; 0x14a8 <PrintCommStatus+0x4a>
    147e:	18 c0       	rjmp	.+48     	; 0x14b0 <PrintCommStatus+0x52>
	{
		case COMM_TXFAIL:
		printf("COMM_TXFAIL: Failed transmit instruction packet!\n");
    1480:	85 ea       	ldi	r24, 0xA5	; 165
    1482:	9c e0       	ldi	r25, 0x0C	; 12
    1484:	8e c7       	rjmp	.+3868   	; 0x23a2 <puts>
		break;
    1486:	08 95       	ret

		case COMM_TXERROR:
		printf("COMM_TXERROR: Incorrect instruction packet!\n");
    1488:	86 ed       	ldi	r24, 0xD6	; 214
    148a:	9c e0       	ldi	r25, 0x0C	; 12
    148c:	8a c7       	rjmp	.+3860   	; 0x23a2 <puts>
		break;
    148e:	08 95       	ret

		case COMM_RXFAIL:
		printf("COMM_RXFAIL: Failed get status packet from device!\n");
    1490:	82 e0       	ldi	r24, 0x02	; 2
    1492:	9d e0       	ldi	r25, 0x0D	; 13
    1494:	86 c7       	rjmp	.+3852   	; 0x23a2 <puts>
		break;
    1496:	08 95       	ret

		case COMM_RXWAITING:
		printf("COMM_RXWAITING: Now recieving status packet!\n");
    1498:	85 e3       	ldi	r24, 0x35	; 53
    149a:	9d e0       	ldi	r25, 0x0D	; 13
    149c:	82 c7       	rjmp	.+3844   	; 0x23a2 <puts>
		break;
    149e:	08 95       	ret

		case COMM_RXTIMEOUT:
		printf("COMM_RXTIMEOUT: There is no status packet!\n");
    14a0:	82 e6       	ldi	r24, 0x62	; 98
    14a2:	9d e0       	ldi	r25, 0x0D	; 13
    14a4:	7e c7       	rjmp	.+3836   	; 0x23a2 <puts>
		break;
    14a6:	08 95       	ret

		case COMM_RXCORRUPT:
		printf("COMM_RXCORRUPT: Incorrect status packet!\n");
    14a8:	8d e8       	ldi	r24, 0x8D	; 141
    14aa:	9d e0       	ldi	r25, 0x0D	; 13
    14ac:	7a c7       	rjmp	.+3828   	; 0x23a2 <puts>
		break;
    14ae:	08 95       	ret

		default:
		printf("This is unknown error code!\n");
    14b0:	86 eb       	ldi	r24, 0xB6	; 182
    14b2:	9d e0       	ldi	r25, 0x0D	; 13
    14b4:	76 c7       	rjmp	.+3820   	; 0x23a2 <puts>
    14b6:	08 95       	ret

000014b8 <MotorControl>:
	
	printf( "%d:%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d\n",
	EVT_GET_VOLTAGE, tmp[0],tmp[1],tmp[2],tmp[3],tmp[4],tmp[5],tmp[6],tmp[7],tmp[8],tmp[9],tmp[10],tmp[11] );
}

void MotorControl( int id, int power ){
    14b8:	0f 93       	push	r16
    14ba:	1f 93       	push	r17
    14bc:	cf 93       	push	r28
    14be:	df 93       	push	r29
    14c0:	8c 01       	movw	r16, r24
    14c2:	eb 01       	movw	r28, r22
	int CommStatus;
//	printf( "%d %d\n", id, power );
//	dxl_write_word( id, P_GOAL_SPEED_L, power );
	if(1){
		dxl_set_txpacket_id(BROADCAST_ID);
    14c4:	8e ef       	ldi	r24, 0xFE	; 254
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	0e 94 8d 00 	call	0x11a	; 0x11a <dxl_set_txpacket_id>
		dxl_set_txpacket_instruction(INST_SYNC_WRITE);
    14cc:	83 e8       	ldi	r24, 0x83	; 131
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	0e 94 90 00 	call	0x120	; 0x120 <dxl_set_txpacket_instruction>
		dxl_set_txpacket_parameter(0, P_GOAL_SPEED_L);
    14d4:	60 e2       	ldi	r22, 0x20	; 32
    14d6:	70 e0       	ldi	r23, 0x00	; 0
    14d8:	80 e0       	ldi	r24, 0x00	; 0
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	0e 94 93 00 	call	0x126	; 0x126 <dxl_set_txpacket_parameter>
		dxl_set_txpacket_parameter(1, 2);
    14e0:	62 e0       	ldi	r22, 0x02	; 2
    14e2:	70 e0       	ldi	r23, 0x00	; 0
    14e4:	81 e0       	ldi	r24, 0x01	; 1
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	0e 94 93 00 	call	0x126	; 0x126 <dxl_set_txpacket_parameter>
		dxl_set_txpacket_parameter(2, id);
    14ec:	b8 01       	movw	r22, r16
    14ee:	82 e0       	ldi	r24, 0x02	; 2
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	0e 94 93 00 	call	0x126	; 0x126 <dxl_set_txpacket_parameter>
		dxl_set_txpacket_parameter(3, dxl_get_lowbyte(power));
    14f6:	ce 01       	movw	r24, r28
    14f8:	0e 94 b5 00 	call	0x16a	; 0x16a <dxl_get_lowbyte>
    14fc:	bc 01       	movw	r22, r24
    14fe:	83 e0       	ldi	r24, 0x03	; 3
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	0e 94 93 00 	call	0x126	; 0x126 <dxl_set_txpacket_parameter>
		dxl_set_txpacket_parameter(4, dxl_get_highbyte(power));
    1506:	ce 01       	movw	r24, r28
    1508:	0e 94 b9 00 	call	0x172	; 0x172 <dxl_get_highbyte>
    150c:	bc 01       	movw	r22, r24
    150e:	84 e0       	ldi	r24, 0x04	; 4
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	0e 94 93 00 	call	0x126	; 0x126 <dxl_set_txpacket_parameter>
		dxl_set_txpacket_length(4+3*1);
    1516:	87 e0       	ldi	r24, 0x07	; 7
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	0e 94 98 00 	call	0x130	; 0x130 <dxl_set_txpacket_length>
		dxl_txrx_packet();
    151e:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <dxl_txrx_packet>
		CommStatus = dxl_get_result();
    1522:	0e 94 88 00 	call	0x110	; 0x110 <dxl_get_result>
		if( CommStatus == COMM_RXSUCCESS )
    1526:	81 30       	cpi	r24, 0x01	; 1
    1528:	91 05       	cpc	r25, r1
    152a:	11 f4       	brne	.+4      	; 0x1530 <MotorControl+0x78>
			PrintErrorCode();
    152c:	58 df       	rcall	.-336    	; 0x13de <PrintErrorCode>
    152e:	01 c0       	rjmp	.+2      	; 0x1532 <MotorControl+0x7a>
		else
			PrintCommStatus(CommStatus);
    1530:	96 df       	rcall	.-212    	; 0x145e <PrintCommStatus>
	}
}
    1532:	df 91       	pop	r29
    1534:	cf 91       	pop	r28
    1536:	1f 91       	pop	r17
    1538:	0f 91       	pop	r16
    153a:	08 95       	ret

0000153c <ServoControl>:
//	printf( "%d:%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d: %d:\n",
//	EVT_ACTION, speed[0],speed[1],speed[2],speed[3],speed[4],
//	speed[5],speed[6],speed[7],speed[8],speed[9],speed[10],speed[11], movingTime );
}

void ServoControl( int act ){
    153c:	2f 92       	push	r2
    153e:	3f 92       	push	r3
    1540:	4f 92       	push	r4
    1542:	5f 92       	push	r5
    1544:	6f 92       	push	r6
    1546:	7f 92       	push	r7
    1548:	8f 92       	push	r8
    154a:	9f 92       	push	r9
    154c:	af 92       	push	r10
    154e:	bf 92       	push	r11
    1550:	cf 92       	push	r12
    1552:	df 92       	push	r13
    1554:	ef 92       	push	r14
    1556:	ff 92       	push	r15
    1558:	0f 93       	push	r16
    155a:	1f 93       	push	r17
    155c:	cf 93       	push	r28
    155e:	df 93       	push	r29
    1560:	cd b7       	in	r28, 0x3d	; 61
    1562:	de b7       	in	r29, 0x3e	; 62
    1564:	c8 54       	subi	r28, 0x48	; 72
    1566:	d1 09       	sbc	r29, r1
    1568:	0f b6       	in	r0, 0x3f	; 63
    156a:	f8 94       	cli
    156c:	de bf       	out	0x3e, r29	; 62
    156e:	0f be       	out	0x3f, r0	; 63
    1570:	cd bf       	out	0x3d, r28	; 61
    1572:	25 96       	adiw	r28, 0x05	; 5
    1574:	9f af       	std	Y+63, r25	; 0x3f
    1576:	8e af       	std	Y+62, r24	; 0x3e
    1578:	25 97       	sbiw	r28, 0x05	; 5
	int i;
	int CommStatus = 0;
	if( act >= ACT_MAX ){
    157a:	86 34       	cpi	r24, 0x46	; 70
    157c:	91 05       	cpc	r25, r1
    157e:	0c f0       	brlt	.+2      	; 0x1582 <ServoControl+0x46>
    1580:	83 c1       	rjmp	.+774    	; 0x1888 <ServoControl+0x34c>
	}
	
	//GetAngle
	int angle = 0;
	int diffMax = 0;
	int angleDiff[SERVO_MAX] = {0};
    1582:	fe 01       	movw	r30, r28
    1584:	31 96       	adiw	r30, 0x01	; 1
    1586:	8e e1       	ldi	r24, 0x1E	; 30
    1588:	df 01       	movw	r26, r30
    158a:	1d 92       	st	X+, r1
    158c:	8a 95       	dec	r24
    158e:	e9 f7       	brne	.-6      	; 0x158a <ServoControl+0x4e>
    1590:	25 96       	adiw	r28, 0x05	; 5
    1592:	8e ad       	ldd	r24, Y+62	; 0x3e
    1594:	9f ad       	ldd	r25, Y+63	; 0x3f
    1596:	25 97       	sbiw	r28, 0x05	; 5
    1598:	88 0f       	add	r24, r24
    159a:	99 1f       	adc	r25, r25
    159c:	82 95       	swap	r24
    159e:	92 95       	swap	r25
    15a0:	90 7f       	andi	r25, 0xF0	; 240
    15a2:	98 27       	eor	r25, r24
    15a4:	80 7f       	andi	r24, 0xF0	; 240
    15a6:	98 27       	eor	r25, r24
    15a8:	9c 01       	movw	r18, r24
    15aa:	22 55       	subi	r18, 0x52	; 82
    15ac:	3d 4f       	sbci	r19, 0xFD	; 253
    15ae:	27 96       	adiw	r28, 0x07	; 7
    15b0:	3f af       	std	Y+63, r19	; 0x3f
    15b2:	2e af       	std	Y+62, r18	; 0x3e
    15b4:	27 97       	sbiw	r28, 0x07	; 7
    15b6:	6e 2e       	mov	r6, r30
    15b8:	7f 2e       	mov	r7, r31
    15ba:	0f 2e       	mov	r0, r31
    15bc:	fc e8       	ldi	r31, 0x8C	; 140
    15be:	8f 2e       	mov	r8, r31
    15c0:	fb e0       	ldi	r31, 0x0B	; 11
    15c2:	9f 2e       	mov	r9, r31
    15c4:	f0 2d       	mov	r31, r0
    15c6:	7f 01       	movw	r14, r30
    15c8:	59 01       	movw	r10, r18
    15ca:	0e e6       	ldi	r16, 0x6E	; 110
    15cc:	1b e0       	ldi	r17, 0x0B	; 11
		return;
	}
	
	//GetAngle
	int angle = 0;
	int diffMax = 0;
    15ce:	c1 2c       	mov	r12, r1
    15d0:	d1 2c       	mov	r13, r1
	int angleDiff[SERVO_MAX] = {0};
	for(int i=0; i<SERVO_MAX; i++ ){
//		if( motionFirst < 0 ){
			angle = dxl_read_word( servoId[i], P_PRESENT_POSITION_L );
    15d2:	64 e2       	ldi	r22, 0x24	; 36
    15d4:	70 e0       	ldi	r23, 0x00	; 0
    15d6:	d8 01       	movw	r26, r16
    15d8:	8d 91       	ld	r24, X+
    15da:	9d 91       	ld	r25, X+
    15dc:	8d 01       	movw	r16, r26
    15de:	0e 94 15 02 	call	0x42a	; 0x42a <dxl_read_word>
//		}else{
//			angle = angleList[motionFirst][i];
//		}
		angleDiff[i] = angleList[act][i] - angle;
    15e2:	f5 01       	movw	r30, r10
    15e4:	21 91       	ld	r18, Z+
    15e6:	31 91       	ld	r19, Z+
    15e8:	5f 01       	movw	r10, r30
    15ea:	a9 01       	movw	r20, r18
    15ec:	48 1b       	sub	r20, r24
    15ee:	59 0b       	sbc	r21, r25
    15f0:	ca 01       	movw	r24, r20
		if( angleDiff[i] < 0 ){
    15f2:	99 23       	and	r25, r25
    15f4:	24 f0       	brlt	.+8      	; 0x15fe <ServoControl+0xc2>
//		if( motionFirst < 0 ){
			angle = dxl_read_word( servoId[i], P_PRESENT_POSITION_L );
//		}else{
//			angle = angleList[motionFirst][i];
//		}
		angleDiff[i] = angleList[act][i] - angle;
    15f6:	d7 01       	movw	r26, r14
    15f8:	4d 93       	st	X+, r20
    15fa:	5c 93       	st	X, r21
    15fc:	06 c0       	rjmp	.+12     	; 0x160a <ServoControl+0xce>
		if( angleDiff[i] < 0 ){
			angleDiff[i] = angleDiff[i] * -1;
    15fe:	91 95       	neg	r25
    1600:	81 95       	neg	r24
    1602:	91 09       	sbc	r25, r1
    1604:	f7 01       	movw	r30, r14
    1606:	91 83       	std	Z+1, r25	; 0x01
    1608:	80 83       	st	Z, r24
		}
		if( diffMax < angleDiff[i] ){
    160a:	d7 01       	movw	r26, r14
    160c:	8d 91       	ld	r24, X+
    160e:	9d 91       	ld	r25, X+
    1610:	7d 01       	movw	r14, r26
    1612:	c8 16       	cp	r12, r24
    1614:	d9 06       	cpc	r13, r25
    1616:	0c f4       	brge	.+2      	; 0x161a <ServoControl+0xde>
    1618:	6c 01       	movw	r12, r24
	
	//GetAngle
	int angle = 0;
	int diffMax = 0;
	int angleDiff[SERVO_MAX] = {0};
	for(int i=0; i<SERVO_MAX; i++ ){
    161a:	08 15       	cp	r16, r8
    161c:	19 05       	cpc	r17, r9
    161e:	c9 f6       	brne	.-78     	; 0x15d2 <ServoControl+0x96>
			diffMax = angleDiff[i];
		}
	}
//	motionFirst = act;
	
	int speed[SERVO_MAX] = {100};
    1620:	1e 01       	movw	r2, r28
    1622:	bf e1       	ldi	r27, 0x1F	; 31
    1624:	2b 0e       	add	r2, r27
    1626:	31 1c       	adc	r3, r1
    1628:	8e e1       	ldi	r24, 0x1E	; 30
    162a:	f1 01       	movw	r30, r2
    162c:	11 92       	st	Z+, r1
    162e:	8a 95       	dec	r24
    1630:	e9 f7       	brne	.-6      	; 0x162c <ServoControl+0xf0>
    1632:	84 e6       	ldi	r24, 0x64	; 100
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	98 a3       	std	Y+32, r25	; 0x20
    1638:	8f 8f       	std	Y+31, r24	; 0x1f
	for(int i=0; i<SERVO_MAX; i++ ){
		speed[i] = (int)((float)(angleList[act][SERVO_MAX]) * ((float)angleDiff[i] / diffMax));
    163a:	25 96       	adiw	r28, 0x05	; 5
    163c:	ee ad       	ldd	r30, Y+62	; 0x3e
    163e:	ff ad       	ldd	r31, Y+63	; 0x3f
    1640:	25 97       	sbiw	r28, 0x05	; 5
    1642:	ee 0f       	add	r30, r30
    1644:	ff 1f       	adc	r31, r31
    1646:	e2 95       	swap	r30
    1648:	f2 95       	swap	r31
    164a:	f0 7f       	andi	r31, 0xF0	; 240
    164c:	fe 27       	eor	r31, r30
    164e:	e0 7f       	andi	r30, 0xF0	; 240
    1650:	fe 27       	eor	r31, r30
    1652:	e2 55       	subi	r30, 0x52	; 82
    1654:	fd 4f       	sbci	r31, 0xFD	; 253
    1656:	66 8d       	ldd	r22, Z+30	; 0x1e
    1658:	77 8d       	ldd	r23, Z+31	; 0x1f
    165a:	88 27       	eor	r24, r24
    165c:	77 fd       	sbrc	r23, 7
    165e:	80 95       	com	r24
    1660:	98 2f       	mov	r25, r24
    1662:	75 d4       	rcall	.+2282   	; 0x1f4e <__floatsisf>
    1664:	23 96       	adiw	r28, 0x03	; 3
    1666:	6c af       	std	Y+60, r22	; 0x3c
    1668:	7d af       	std	Y+61, r23	; 0x3d
    166a:	8e af       	std	Y+62, r24	; 0x3e
    166c:	9f af       	std	Y+63, r25	; 0x3f
    166e:	23 97       	sbiw	r28, 0x03	; 3
    1670:	28 96       	adiw	r28, 0x08	; 8
    1672:	2f ae       	std	Y+63, r2	; 0x3f
    1674:	28 97       	sbiw	r28, 0x08	; 8
    1676:	29 96       	adiw	r28, 0x09	; 9
    1678:	3f ae       	std	Y+63, r3	; 0x3f
    167a:	29 97       	sbiw	r28, 0x09	; 9
    167c:	3e ae       	std	Y+62, r3	; 0x3e
    167e:	2d ae       	std	Y+61, r2	; 0x3d
    1680:	a6 2c       	mov	r10, r6
    1682:	b7 2c       	mov	r11, r7
    1684:	ee 24       	eor	r14, r14
    1686:	d7 fc       	sbrc	r13, 7
    1688:	e0 94       	com	r14
    168a:	fe 2c       	mov	r15, r14
    168c:	d5 01       	movw	r26, r10
    168e:	0d 91       	ld	r16, X+
    1690:	1d 91       	ld	r17, X+
    1692:	5d 01       	movw	r10, r26
    1694:	c7 01       	movw	r24, r14
    1696:	b6 01       	movw	r22, r12
    1698:	5a d4       	rcall	.+2228   	; 0x1f4e <__floatsisf>
    169a:	2b 01       	movw	r4, r22
    169c:	3c 01       	movw	r6, r24
    169e:	b8 01       	movw	r22, r16
    16a0:	88 27       	eor	r24, r24
    16a2:	77 fd       	sbrc	r23, 7
    16a4:	80 95       	com	r24
    16a6:	98 2f       	mov	r25, r24
    16a8:	52 d4       	rcall	.+2212   	; 0x1f4e <__floatsisf>
    16aa:	a3 01       	movw	r20, r6
    16ac:	92 01       	movw	r18, r4
    16ae:	b4 d3       	rcall	.+1896   	; 0x1e18 <__divsf3>
    16b0:	9b 01       	movw	r18, r22
    16b2:	ac 01       	movw	r20, r24
    16b4:	23 96       	adiw	r28, 0x03	; 3
    16b6:	6c ad       	ldd	r22, Y+60	; 0x3c
    16b8:	7d ad       	ldd	r23, Y+61	; 0x3d
    16ba:	8e ad       	ldd	r24, Y+62	; 0x3e
    16bc:	9f ad       	ldd	r25, Y+63	; 0x3f
    16be:	23 97       	sbiw	r28, 0x03	; 3
    16c0:	d2 d4       	rcall	.+2468   	; 0x2066 <__mulsf3>
    16c2:	12 d4       	rcall	.+2084   	; 0x1ee8 <__fixsfsi>
		if( speed[i] == 0 ){
    16c4:	61 15       	cp	r22, r1
    16c6:	71 05       	cpc	r23, r1
    16c8:	21 f0       	breq	.+8      	; 0x16d2 <ServoControl+0x196>
	}
//	motionFirst = act;
	
	int speed[SERVO_MAX] = {100};
	for(int i=0; i<SERVO_MAX; i++ ){
		speed[i] = (int)((float)(angleList[act][SERVO_MAX]) * ((float)angleDiff[i] / diffMax));
    16ca:	f1 01       	movw	r30, r2
    16cc:	71 83       	std	Z+1, r23	; 0x01
    16ce:	60 83       	st	Z, r22
    16d0:	05 c0       	rjmp	.+10     	; 0x16dc <ServoControl+0x1a0>
		if( speed[i] == 0 ){
			speed[i] = 1;
    16d2:	e1 e0       	ldi	r30, 0x01	; 1
    16d4:	f0 e0       	ldi	r31, 0x00	; 0
    16d6:	d1 01       	movw	r26, r2
    16d8:	ed 93       	st	X+, r30
    16da:	fc 93       	st	X, r31
    16dc:	f2 e0       	ldi	r31, 0x02	; 2
    16de:	2f 0e       	add	r2, r31
    16e0:	31 1c       	adc	r3, r1
		}
	}
//	motionFirst = act;
	
	int speed[SERVO_MAX] = {100};
	for(int i=0; i<SERVO_MAX; i++ ){
    16e2:	2d ad       	ldd	r18, Y+61	; 0x3d
    16e4:	3e ad       	ldd	r19, Y+62	; 0x3e
    16e6:	a2 16       	cp	r10, r18
    16e8:	b3 06       	cpc	r11, r19
    16ea:	81 f6       	brne	.-96     	; 0x168c <ServoControl+0x150>
		}
	}

//    diffmaxTest[motionCount-1] = diffMax;
//	movingTime = ((float)CYCLE_TIME/VALUE_MAX) * ((float)VALUE_MAX / angleList[act][SERVO_MAX]) * diffMax;
    movingTime = diffMax * (float)(((VALUE_MAX*10)/angleList[act][SERVO_MAX])/2);
    16ec:	25 96       	adiw	r28, 0x05	; 5
    16ee:	ee ad       	ldd	r30, Y+62	; 0x3e
    16f0:	ff ad       	ldd	r31, Y+63	; 0x3f
    16f2:	25 97       	sbiw	r28, 0x05	; 5
    16f4:	ee 0f       	add	r30, r30
    16f6:	ff 1f       	adc	r31, r31
    16f8:	e2 95       	swap	r30
    16fa:	f2 95       	swap	r31
    16fc:	f0 7f       	andi	r31, 0xF0	; 240
    16fe:	fe 27       	eor	r31, r30
    1700:	e0 7f       	andi	r30, 0xF0	; 240
    1702:	fe 27       	eor	r31, r30
    1704:	e2 55       	subi	r30, 0x52	; 82
    1706:	fd 4f       	sbci	r31, 0xFD	; 253
    1708:	66 8d       	ldd	r22, Z+30	; 0x1e
    170a:	77 8d       	ldd	r23, Z+31	; 0x1f
    170c:	8b ef       	ldi	r24, 0xFB	; 251
    170e:	93 e1       	ldi	r25, 0x13	; 19
    1710:	39 d5       	rcall	.+2674   	; 0x2184 <__divmodhi4>
    1712:	88 27       	eor	r24, r24
    1714:	77 fd       	sbrc	r23, 7
    1716:	80 95       	com	r24
    1718:	98 2f       	mov	r25, r24
    171a:	19 d4       	rcall	.+2098   	; 0x1f4e <__floatsisf>
    171c:	9b 01       	movw	r18, r22
    171e:	ac 01       	movw	r20, r24
    1720:	c3 01       	movw	r24, r6
    1722:	b2 01       	movw	r22, r4
    1724:	a0 d4       	rcall	.+2368   	; 0x2066 <__mulsf3>
    1726:	e0 d3       	rcall	.+1984   	; 0x1ee8 <__fixsfsi>
	if( movingTime < MAIN_DELAY ){
    1728:	68 3e       	cpi	r22, 0xE8	; 232
    172a:	33 e0       	ldi	r19, 0x03	; 3
    172c:	73 07       	cpc	r23, r19
    172e:	2c f0       	brlt	.+10     	; 0x173a <ServoControl+0x1fe>
		}
	}

//    diffmaxTest[motionCount-1] = diffMax;
//	movingTime = ((float)CYCLE_TIME/VALUE_MAX) * ((float)VALUE_MAX / angleList[act][SERVO_MAX]) * diffMax;
    movingTime = diffMax * (float)(((VALUE_MAX*10)/angleList[act][SERVO_MAX])/2);
    1730:	70 93 6d 11 	sts	0x116D, r23
    1734:	60 93 6c 11 	sts	0x116C, r22
    1738:	06 c0       	rjmp	.+12     	; 0x1746 <ServoControl+0x20a>
	if( movingTime < MAIN_DELAY ){
		movingTime = MAIN_DELAY;
    173a:	88 ee       	ldi	r24, 0xE8	; 232
    173c:	93 e0       	ldi	r25, 0x03	; 3
    173e:	90 93 6d 11 	sts	0x116D, r25
    1742:	80 93 6c 11 	sts	0x116C, r24
	}
	
	//Speed
	dxl_set_txpacket_id(BROADCAST_ID);
    1746:	8e ef       	ldi	r24, 0xFE	; 254
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	0e 94 8d 00 	call	0x11a	; 0x11a <dxl_set_txpacket_id>
	dxl_set_txpacket_instruction(INST_SYNC_WRITE);
    174e:	83 e8       	ldi	r24, 0x83	; 131
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	0e 94 90 00 	call	0x120	; 0x120 <dxl_set_txpacket_instruction>
	dxl_set_txpacket_parameter(0, P_GOAL_SPEED_L);
    1756:	60 e2       	ldi	r22, 0x20	; 32
    1758:	70 e0       	ldi	r23, 0x00	; 0
    175a:	80 e0       	ldi	r24, 0x00	; 0
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	0e 94 93 00 	call	0x126	; 0x126 <dxl_set_txpacket_parameter>
	dxl_set_txpacket_parameter(1, 2);
    1762:	62 e0       	ldi	r22, 0x02	; 2
    1764:	70 e0       	ldi	r23, 0x00	; 0
    1766:	81 e0       	ldi	r24, 0x01	; 1
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	0e 94 93 00 	call	0x126	; 0x126 <dxl_set_txpacket_parameter>
    176e:	28 96       	adiw	r28, 0x08	; 8
    1770:	cf ac       	ldd	r12, Y+63	; 0x3f
    1772:	28 97       	sbiw	r28, 0x08	; 8
    1774:	29 96       	adiw	r28, 0x09	; 9
    1776:	df ac       	ldd	r13, Y+63	; 0x3f
    1778:	29 97       	sbiw	r28, 0x09	; 9
    177a:	0f 2e       	mov	r0, r31
    177c:	fe e6       	ldi	r31, 0x6E	; 110
    177e:	ef 2e       	mov	r14, r31
    1780:	fb e0       	ldi	r31, 0x0B	; 11
    1782:	ff 2e       	mov	r15, r31
    1784:	f0 2d       	mov	r31, r0
    1786:	02 e0       	ldi	r16, 0x02	; 2
    1788:	10 e0       	ldi	r17, 0x00	; 0
	for( i=0; i<SERVO_MAX; i++ ){
		dxl_set_txpacket_parameter(2+(3*i), servoId[i]);
    178a:	d7 01       	movw	r26, r14
    178c:	6d 91       	ld	r22, X+
    178e:	7d 91       	ld	r23, X+
    1790:	7d 01       	movw	r14, r26
    1792:	c8 01       	movw	r24, r16
    1794:	0e 94 93 00 	call	0x126	; 0x126 <dxl_set_txpacket_parameter>
		dxl_set_txpacket_parameter(3+(3*i), dxl_get_lowbyte(speed[i]));
    1798:	f6 01       	movw	r30, r12
    179a:	a1 90       	ld	r10, Z+
    179c:	b1 90       	ld	r11, Z+
    179e:	6f 01       	movw	r12, r30
    17a0:	c5 01       	movw	r24, r10
    17a2:	0e 94 b5 00 	call	0x16a	; 0x16a <dxl_get_lowbyte>
    17a6:	bc 01       	movw	r22, r24
    17a8:	c8 01       	movw	r24, r16
    17aa:	01 96       	adiw	r24, 0x01	; 1
    17ac:	0e 94 93 00 	call	0x126	; 0x126 <dxl_set_txpacket_parameter>
		dxl_set_txpacket_parameter(4+(3*i), dxl_get_highbyte(speed[i]));
    17b0:	c5 01       	movw	r24, r10
    17b2:	0e 94 b9 00 	call	0x172	; 0x172 <dxl_get_highbyte>
    17b6:	bc 01       	movw	r22, r24
    17b8:	c8 01       	movw	r24, r16
    17ba:	02 96       	adiw	r24, 0x02	; 2
    17bc:	0e 94 93 00 	call	0x126	; 0x126 <dxl_set_txpacket_parameter>
    17c0:	0d 5f       	subi	r16, 0xFD	; 253
    17c2:	1f 4f       	sbci	r17, 0xFF	; 255
	//Speed
	dxl_set_txpacket_id(BROADCAST_ID);
	dxl_set_txpacket_instruction(INST_SYNC_WRITE);
	dxl_set_txpacket_parameter(0, P_GOAL_SPEED_L);
	dxl_set_txpacket_parameter(1, 2);
	for( i=0; i<SERVO_MAX; i++ ){
    17c4:	e8 14       	cp	r14, r8
    17c6:	f9 04       	cpc	r15, r9
    17c8:	01 f7       	brne	.-64     	; 0x178a <ServoControl+0x24e>
		dxl_set_txpacket_parameter(2+(3*i), servoId[i]);
		dxl_set_txpacket_parameter(3+(3*i), dxl_get_lowbyte(speed[i]));
		dxl_set_txpacket_parameter(4+(3*i), dxl_get_highbyte(speed[i]));
	}
	dxl_set_txpacket_length(4+3*SERVO_MAX);
    17ca:	81 e3       	ldi	r24, 0x31	; 49
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	0e 94 98 00 	call	0x130	; 0x130 <dxl_set_txpacket_length>
	dxl_txrx_packet();
    17d2:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <dxl_txrx_packet>
	CommStatus = dxl_get_result();
    17d6:	0e 94 88 00 	call	0x110	; 0x110 <dxl_get_result>
	if( CommStatus == COMM_RXSUCCESS ){
    17da:	81 30       	cpi	r24, 0x01	; 1
    17dc:	91 05       	cpc	r25, r1
    17de:	09 f0       	breq	.+2      	; 0x17e2 <ServoControl+0x2a6>
    17e0:	52 c0       	rjmp	.+164    	; 0x1886 <ServoControl+0x34a>
		PrintErrorCode();
    17e2:	fd dd       	rcall	.-1030   	; 0x13de <PrintErrorCode>
		
		//Angle
		dxl_set_txpacket_id(BROADCAST_ID);
    17e4:	8e ef       	ldi	r24, 0xFE	; 254
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	0e 94 8d 00 	call	0x11a	; 0x11a <dxl_set_txpacket_id>
		dxl_set_txpacket_instruction(INST_SYNC_WRITE);
    17ec:	83 e8       	ldi	r24, 0x83	; 131
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	0e 94 90 00 	call	0x120	; 0x120 <dxl_set_txpacket_instruction>
		dxl_set_txpacket_parameter(0, P_GOAL_POSITION_L);
    17f4:	6e e1       	ldi	r22, 0x1E	; 30
    17f6:	70 e0       	ldi	r23, 0x00	; 0
    17f8:	80 e0       	ldi	r24, 0x00	; 0
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	0e 94 93 00 	call	0x126	; 0x126 <dxl_set_txpacket_parameter>
		dxl_set_txpacket_parameter(1, 2);
    1800:	62 e0       	ldi	r22, 0x02	; 2
    1802:	70 e0       	ldi	r23, 0x00	; 0
    1804:	81 e0       	ldi	r24, 0x01	; 1
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	0e 94 93 00 	call	0x126	; 0x126 <dxl_set_txpacket_parameter>
    180c:	27 96       	adiw	r28, 0x07	; 7
    180e:	ce ac       	ldd	r12, Y+62	; 0x3e
    1810:	df ac       	ldd	r13, Y+63	; 0x3f
    1812:	27 97       	sbiw	r28, 0x07	; 7
    1814:	0f 2e       	mov	r0, r31
    1816:	fe e6       	ldi	r31, 0x6E	; 110
    1818:	ef 2e       	mov	r14, r31
    181a:	fb e0       	ldi	r31, 0x0B	; 11
    181c:	ff 2e       	mov	r15, r31
    181e:	f0 2d       	mov	r31, r0
    1820:	02 e0       	ldi	r16, 0x02	; 2
    1822:	10 e0       	ldi	r17, 0x00	; 0
		for( i=0; i<SERVO_MAX; i++ ){
			dxl_set_txpacket_parameter(2+(3*i), servoId[i]);
    1824:	d7 01       	movw	r26, r14
    1826:	6d 91       	ld	r22, X+
    1828:	7d 91       	ld	r23, X+
    182a:	7d 01       	movw	r14, r26
    182c:	c8 01       	movw	r24, r16
    182e:	0e 94 93 00 	call	0x126	; 0x126 <dxl_set_txpacket_parameter>
    1832:	56 01       	movw	r10, r12
			dxl_set_txpacket_parameter(3+(3*i), dxl_get_lowbyte(angleList[act][i]));
    1834:	f6 01       	movw	r30, r12
    1836:	81 91       	ld	r24, Z+
    1838:	91 91       	ld	r25, Z+
    183a:	6f 01       	movw	r12, r30
    183c:	0e 94 b5 00 	call	0x16a	; 0x16a <dxl_get_lowbyte>
    1840:	bc 01       	movw	r22, r24
    1842:	c8 01       	movw	r24, r16
    1844:	01 96       	adiw	r24, 0x01	; 1
    1846:	0e 94 93 00 	call	0x126	; 0x126 <dxl_set_txpacket_parameter>
			dxl_set_txpacket_parameter(4+(3*i), dxl_get_highbyte(angleList[act][i]));
    184a:	d5 01       	movw	r26, r10
    184c:	8d 91       	ld	r24, X+
    184e:	9c 91       	ld	r25, X
    1850:	0e 94 b9 00 	call	0x172	; 0x172 <dxl_get_highbyte>
    1854:	bc 01       	movw	r22, r24
    1856:	c8 01       	movw	r24, r16
    1858:	02 96       	adiw	r24, 0x02	; 2
    185a:	0e 94 93 00 	call	0x126	; 0x126 <dxl_set_txpacket_parameter>
    185e:	0d 5f       	subi	r16, 0xFD	; 253
    1860:	1f 4f       	sbci	r17, 0xFF	; 255
		//Angle
		dxl_set_txpacket_id(BROADCAST_ID);
		dxl_set_txpacket_instruction(INST_SYNC_WRITE);
		dxl_set_txpacket_parameter(0, P_GOAL_POSITION_L);
		dxl_set_txpacket_parameter(1, 2);
		for( i=0; i<SERVO_MAX; i++ ){
    1862:	e8 14       	cp	r14, r8
    1864:	f9 04       	cpc	r15, r9
    1866:	f1 f6       	brne	.-68     	; 0x1824 <ServoControl+0x2e8>
			dxl_set_txpacket_parameter(2+(3*i), servoId[i]);
			dxl_set_txpacket_parameter(3+(3*i), dxl_get_lowbyte(angleList[act][i]));
			dxl_set_txpacket_parameter(4+(3*i), dxl_get_highbyte(angleList[act][i]));
		}
		dxl_set_txpacket_length(4+3*SERVO_MAX);
    1868:	81 e3       	ldi	r24, 0x31	; 49
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	0e 94 98 00 	call	0x130	; 0x130 <dxl_set_txpacket_length>
		dxl_txrx_packet();
    1870:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <dxl_txrx_packet>
		CommStatus = dxl_get_result();
    1874:	0e 94 88 00 	call	0x110	; 0x110 <dxl_get_result>
		if( CommStatus == COMM_RXSUCCESS ){
    1878:	81 30       	cpi	r24, 0x01	; 1
    187a:	91 05       	cpc	r25, r1
    187c:	11 f4       	brne	.+4      	; 0x1882 <ServoControl+0x346>
			PrintErrorCode();
    187e:	af dd       	rcall	.-1186   	; 0x13de <PrintErrorCode>
    1880:	03 c0       	rjmp	.+6      	; 0x1888 <ServoControl+0x34c>
		}else{
			PrintCommStatus(CommStatus);
    1882:	ed dd       	rcall	.-1062   	; 0x145e <PrintCommStatus>
    1884:	01 c0       	rjmp	.+2      	; 0x1888 <ServoControl+0x34c>
		}
	}else{
		PrintCommStatus(CommStatus);
    1886:	eb dd       	rcall	.-1066   	; 0x145e <PrintCommStatus>
	}
}
    1888:	c8 5b       	subi	r28, 0xB8	; 184
    188a:	df 4f       	sbci	r29, 0xFF	; 255
    188c:	0f b6       	in	r0, 0x3f	; 63
    188e:	f8 94       	cli
    1890:	de bf       	out	0x3e, r29	; 62
    1892:	0f be       	out	0x3f, r0	; 63
    1894:	cd bf       	out	0x3d, r28	; 61
    1896:	df 91       	pop	r29
    1898:	cf 91       	pop	r28
    189a:	1f 91       	pop	r17
    189c:	0f 91       	pop	r16
    189e:	ff 90       	pop	r15
    18a0:	ef 90       	pop	r14
    18a2:	df 90       	pop	r13
    18a4:	cf 90       	pop	r12
    18a6:	bf 90       	pop	r11
    18a8:	af 90       	pop	r10
    18aa:	9f 90       	pop	r9
    18ac:	8f 90       	pop	r8
    18ae:	7f 90       	pop	r7
    18b0:	6f 90       	pop	r6
    18b2:	5f 90       	pop	r5
    18b4:	4f 90       	pop	r4
    18b6:	3f 90       	pop	r3
    18b8:	2f 90       	pop	r2
    18ba:	08 95       	ret

000018bc <setMode>:
}

void setMode(void){
	//		PORTC = ~(LED_BAT|LED_TxD|LED_RxD|LED_AUX|LED_MANAGE|LED_PROGRAM|LED_PLAY);
	//		PORTC = LED_BAT|LED_TxD|LED_RxD|LED_AUX|LED_MANAGE|LED_PROGRAM|LED_PLAY;
	if( ~PIND & SW_BUTTON ){
    18bc:	48 99       	sbic	0x09, 0	; 9
    18be:	0e c0       	rjmp	.+28     	; 0x18dc <setMode+0x20>
//        printf( "PIND is OFF\n");
		if( SwitchSts == 0 ){
    18c0:	80 91 78 11 	lds	r24, 0x1178
    18c4:	90 91 79 11 	lds	r25, 0x1179
    18c8:	89 2b       	or	r24, r25
    18ca:	09 f0       	breq	.+2      	; 0x18ce <setMode+0x12>
    18cc:	50 c0       	rjmp	.+160    	; 0x196e <setMode+0xb2>
			SwitchSts = 1;
    18ce:	81 e0       	ldi	r24, 0x01	; 1
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	90 93 79 11 	sts	0x1179, r25
    18d6:	80 93 78 11 	sts	0x1178, r24
    18da:	08 95       	ret
		}
	}else{
//		printf( "PIND is ON\n");	
		if( SwitchSts == 1 ){
    18dc:	80 91 78 11 	lds	r24, 0x1178
    18e0:	90 91 79 11 	lds	r25, 0x1179
    18e4:	01 97       	sbiw	r24, 0x01	; 1
    18e6:	09 f0       	breq	.+2      	; 0x18ea <setMode+0x2e>
    18e8:	42 c0       	rjmp	.+132    	; 0x196e <setMode+0xb2>
			SwitchSts = 0;
    18ea:	10 92 79 11 	sts	0x1179, r1
    18ee:	10 92 78 11 	sts	0x1178, r1
			mMode++;
    18f2:	80 91 7a 11 	lds	r24, 0x117A
    18f6:	90 91 7b 11 	lds	r25, 0x117B
    18fa:	9c 01       	movw	r18, r24
    18fc:	2f 5f       	subi	r18, 0xFF	; 255
    18fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1900:	30 93 7b 11 	sts	0x117B, r19
    1904:	20 93 7a 11 	sts	0x117A, r18
			if( (LED_MAX - mMode) <= 0 ){
    1908:	26 e0       	ldi	r18, 0x06	; 6
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	a9 01       	movw	r20, r18
    190e:	48 1b       	sub	r20, r24
    1910:	59 0b       	sbc	r21, r25
    1912:	ca 01       	movw	r24, r20
    1914:	18 16       	cp	r1, r24
    1916:	19 06       	cpc	r1, r25
    1918:	3c f0       	brlt	.+14     	; 0x1928 <setMode+0x6c>
				PORTC = LED_BAT|LED_TxD|LED_RxD|LED_AUX|LED_MANAGE|LED_PROGRAM;
    191a:	8f e3       	ldi	r24, 0x3F	; 63
    191c:	88 b9       	out	0x08, r24	; 8
				mMode = MODE_0;
    191e:	10 92 7b 11 	sts	0x117B, r1
    1922:	10 92 7a 11 	sts	0x117A, r1
    1926:	0b c0       	rjmp	.+22     	; 0x193e <setMode+0x82>
			}else{
				PORTC = ~(1 << (LED_MAX - mMode));
    1928:	21 e0       	ldi	r18, 0x01	; 1
    192a:	30 e0       	ldi	r19, 0x00	; 0
    192c:	a9 01       	movw	r20, r18
    192e:	02 c0       	rjmp	.+4      	; 0x1934 <setMode+0x78>
    1930:	44 0f       	add	r20, r20
    1932:	55 1f       	adc	r21, r21
    1934:	8a 95       	dec	r24
    1936:	e2 f7       	brpl	.-8      	; 0x1930 <setMode+0x74>
    1938:	ca 01       	movw	r24, r20
    193a:	80 95       	com	r24
    193c:	88 b9       	out	0x08, r24	; 8
			}
			stopMotion();
    193e:	3a dd       	rcall	.-1420   	; 0x13b4 <stopMotion>
			ServoControl( 0 );
    1940:	80 e0       	ldi	r24, 0x00	; 0
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	fb dd       	rcall	.-1034   	; 0x153c <ServoControl>

			modeCounter = 1;
    1946:	81 e0       	ldi	r24, 0x01	; 1
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	90 93 75 11 	sts	0x1175, r25
    194e:	80 93 74 11 	sts	0x1174, r24
			if( mMode == MODE_1 ){
    1952:	80 91 7a 11 	lds	r24, 0x117A
    1956:	90 91 7b 11 	lds	r25, 0x117B
    195a:	01 97       	sbiw	r24, 0x01	; 1
    195c:	41 f4       	brne	.+16     	; 0x196e <setMode+0xb2>
				modeWait = mode1act[0][0];
    195e:	80 91 10 02 	lds	r24, 0x0210
    1962:	90 91 11 02 	lds	r25, 0x0211
    1966:	90 93 77 11 	sts	0x1177, r25
    196a:	80 93 76 11 	sts	0x1176, r24
    196e:	08 95       	ret

00001970 <move>:
	motionTime = 0;
	motionFirst = -1;
}

void move(void){
	if( /* motionTimes > 0 && */ isMoving() == 0 ){
    1970:	ae da       	rcall	.-2724   	; 0xece <isMoving>
    1972:	89 2b       	or	r24, r25
    1974:	a1 f5       	brne	.+104    	; 0x19de <move+0x6e>
		int *motion = motionList[motionNumber];
    1976:	e0 91 72 11 	lds	r30, 0x1172
    197a:	f0 91 73 11 	lds	r31, 0x1173
    197e:	ee 0f       	add	r30, r30
    1980:	ff 1f       	adc	r31, r31
    1982:	e4 5c       	subi	r30, 0xC4	; 196
    1984:	fd 4f       	sbci	r31, 0xFD	; 253
    1986:	01 90       	ld	r0, Z+
    1988:	f0 81       	ld	r31, Z
    198a:	e0 2d       	mov	r30, r0
//        printf("### motionNumber = %d, motion = %d\n", motionNumber, *motion);
		int max = motion[0];

		if( motionCount > max ){
    198c:	20 81       	ld	r18, Z
    198e:	31 81       	ldd	r19, Z+1	; 0x01
    1990:	80 91 0e 02 	lds	r24, 0x020E
    1994:	90 91 0f 02 	lds	r25, 0x020F
    1998:	28 17       	cp	r18, r24
    199a:	39 07       	cpc	r19, r25
    199c:	64 f4       	brge	.+24     	; 0x19b6 <move+0x46>
			motionNumber = ACT_WALK2;
    199e:	83 e0       	ldi	r24, 0x03	; 3
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	90 93 73 11 	sts	0x1173, r25
    19a6:	80 93 72 11 	sts	0x1172, r24
		    }
			*/
			
//        printf("### motionCount > max. motionCount:%d, max:%d\n", motionCount, max);
//			printf("#%d,%d,%d,%d,%d,%d;\n", diffmaxTest[0],diffmaxTest[1],diffmaxTest[2],diffmaxTest[3],diffmaxTest[4],diffmaxTest[5] );
			motionCount = 1;
    19aa:	81 e0       	ldi	r24, 0x01	; 1
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	90 93 0f 02 	sts	0x020F, r25
    19b2:	80 93 0e 02 	sts	0x020E, r24
				return;
			}
			*/
		}
//		printf("### motionCount:%d\n", motionCount);
		ServoControl( motion[motionCount] );
    19b6:	80 91 0e 02 	lds	r24, 0x020E
    19ba:	90 91 0f 02 	lds	r25, 0x020F
    19be:	88 0f       	add	r24, r24
    19c0:	99 1f       	adc	r25, r25
    19c2:	e8 0f       	add	r30, r24
    19c4:	f9 1f       	adc	r31, r25
    19c6:	80 81       	ld	r24, Z
    19c8:	91 81       	ldd	r25, Z+1	; 0x01
    19ca:	b8 dd       	rcall	.-1168   	; 0x153c <ServoControl>
		motionCount++;
    19cc:	80 91 0e 02 	lds	r24, 0x020E
    19d0:	90 91 0f 02 	lds	r25, 0x020F
    19d4:	01 96       	adiw	r24, 0x01	; 1
    19d6:	90 93 0f 02 	sts	0x020F, r25
    19da:	80 93 0e 02 	sts	0x020E, r24
    19de:	08 95       	ret

000019e0 <moveTest>:
	}
}

void moveTest(void){
	if(isMoving() == 0 ){
    19e0:	76 da       	rcall	.-2836   	; 0xece <isMoving>
    19e2:	89 2b       	or	r24, r25
    19e4:	a1 f5       	brne	.+104    	; 0x1a4e <moveTest+0x6e>
		int *motion = motionList[motionNumber];
    19e6:	e0 91 72 11 	lds	r30, 0x1172
    19ea:	f0 91 73 11 	lds	r31, 0x1173
    19ee:	ee 0f       	add	r30, r30
    19f0:	ff 1f       	adc	r31, r31
    19f2:	e4 5c       	subi	r30, 0xC4	; 196
    19f4:	fd 4f       	sbci	r31, 0xFD	; 253
    19f6:	01 90       	ld	r0, Z+
    19f8:	f0 81       	ld	r31, Z
    19fa:	e0 2d       	mov	r30, r0
		int max = motion[0];
		if( motionCount > max ){
    19fc:	20 81       	ld	r18, Z
    19fe:	31 81       	ldd	r19, Z+1	; 0x01
    1a00:	80 91 0e 02 	lds	r24, 0x020E
    1a04:	90 91 0f 02 	lds	r25, 0x020F
    1a08:	28 17       	cp	r18, r24
    1a0a:	39 07       	cpc	r19, r25
    1a0c:	64 f4       	brge	.+24     	; 0x1a26 <moveTest+0x46>
			motionNumber = ACT_WALK2;
    1a0e:	83 e0       	ldi	r24, 0x03	; 3
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	90 93 73 11 	sts	0x1173, r25
    1a16:	80 93 72 11 	sts	0x1172, r24
			} else {
				printf("### workCounter reset\n");
				walkCounter=0;
			}
			*/
			motionCount = 1;
    1a1a:	81 e0       	ldi	r24, 0x01	; 1
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    1a1e:	90 93 0f 02 	sts	0x020F, r25
    1a22:	80 93 0e 02 	sts	0x020E, r24
		}
		ServoControl( motion[motionCount] );
    1a26:	80 91 0e 02 	lds	r24, 0x020E
    1a2a:	90 91 0f 02 	lds	r25, 0x020F
    1a2e:	88 0f       	add	r24, r24
    1a30:	99 1f       	adc	r25, r25
    1a32:	e8 0f       	add	r30, r24
    1a34:	f9 1f       	adc	r31, r25
    1a36:	80 81       	ld	r24, Z
    1a38:	91 81       	ldd	r25, Z+1	; 0x01
    1a3a:	80 dd       	rcall	.-1280   	; 0x153c <ServoControl>
		motionCount++;
    1a3c:	80 91 0e 02 	lds	r24, 0x020E
    1a40:	90 91 0f 02 	lds	r25, 0x020F
    1a44:	01 96       	adiw	r24, 0x01	; 1
    1a46:	90 93 0f 02 	sts	0x020F, r25
    1a4a:	80 93 0e 02 	sts	0x020E, r24
    1a4e:	08 95       	ret

00001a50 <main>:
	EVT_WATCH_DOG       = 10,
	EVT_MOTION_EDIT     = 11,
	EVT_MAX
	};

int main(void){
    1a50:	2f 92       	push	r2
    1a52:	3f 92       	push	r3
    1a54:	4f 92       	push	r4
    1a56:	5f 92       	push	r5
    1a58:	6f 92       	push	r6
    1a5a:	7f 92       	push	r7
    1a5c:	8f 92       	push	r8
    1a5e:	9f 92       	push	r9
    1a60:	af 92       	push	r10
    1a62:	bf 92       	push	r11
    1a64:	cf 92       	push	r12
    1a66:	df 92       	push	r13
    1a68:	ef 92       	push	r14
    1a6a:	ff 92       	push	r15
    1a6c:	0f 93       	push	r16
    1a6e:	1f 93       	push	r17
    1a70:	cf 93       	push	r28
    1a72:	df 93       	push	r29
	//Start Switch
//	DDRA  = 0x00;
//	PORTA = 0x12;
	
	//Start PORT A for switch and IR sensors
	DDRA  = 0xFC;
    1a74:	8c ef       	ldi	r24, 0xFC	; 252
    1a76:	81 b9       	out	0x01, r24	; 1
	PORTA = 0xFE;
    1a78:	8e ef       	ldi	r24, 0xFE	; 254
    1a7a:	82 b9       	out	0x02, r24	; 2
	
	//LED Initial
	DDRC  = 0x7F;
    1a7c:	8f e7       	ldi	r24, 0x7F	; 127
    1a7e:	87 b9       	out	0x07, r24	; 7
	PORTC = 0x7E;
    1a80:	8e e7       	ldi	r24, 0x7E	; 126
    1a82:	88 b9       	out	0x08, r24	; 8
	DDRD  = 0x70;
    1a84:	80 e7       	ldi	r24, 0x70	; 112
    1a86:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x11;
    1a88:	81 e1       	ldi	r24, 0x11	; 17
    1a8a:	8b b9       	out	0x0b, r24	; 11

	MotorInit();
    1a8c:	cf d9       	rcall	.-3170   	; 0xe2c <MotorInit>
	initSerial();
    1a8e:	d8 d8       	rcall	.-3664   	; 0xc40 <initSerial>
	char * readData = NULL;	
	int isFinish = 0;

    sensorInit();
    1a90:	3f d9       	rcall	.-3458   	; 0xd10 <sensorInit>
	if (isCaptureMode ==1) dxl_write_byte( BROADCAST_ID, P_TORQUE_ENABLE, 0 );
    1a92:	80 91 5e 11 	lds	r24, 0x115E
    1a96:	90 91 5f 11 	lds	r25, 0x115F
    1a9a:	01 97       	sbiw	r24, 0x01	; 1
    1a9c:	41 f4       	brne	.+16     	; 0x1aae <main+0x5e>
    1a9e:	40 e0       	ldi	r20, 0x00	; 0
    1aa0:	50 e0       	ldi	r21, 0x00	; 0
    1aa2:	68 e1       	ldi	r22, 0x18	; 24
    1aa4:	70 e0       	ldi	r23, 0x00	; 0
    1aa6:	8e ef       	ldi	r24, 0xFE	; 254
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
    1aaa:	0e 94 33 02 	call	0x466	; 0x466 <dxl_write_byte>
		if( checkSerialRead() > 0 ){
			readData = getReadBuffer();
			if( readData != NULL ){
//				printf( "readData=%s\n", &readData[0] );
				split( &readData[0] );
				switch( serCmd[0] ){
    1aae:	0f 2e       	mov	r0, r31
    1ab0:	fc e7       	ldi	r31, 0x7C	; 124
    1ab2:	4f 2e       	mov	r4, r31
    1ab4:	f1 e1       	ldi	r31, 0x11	; 17
    1ab6:	5f 2e       	mov	r5, r31
    1ab8:	f0 2d       	mov	r31, r0
				}
				if( isFinish > 0 ){
					MotorControl( 0, 0 );
					break;
				}
				memset( readData, 0x00, SERIAL_BUFFER_SIZE );
    1aba:	0f 2e       	mov	r0, r31
    1abc:	f0 e5       	ldi	r31, 0x50	; 80
    1abe:	3f 2e       	mov	r3, r31
    1ac0:	f0 2d       	mov	r31, r0
			}
		}
		memset( &serCmd[0], 0x00, sizeof(int) * SERIAL_BUFFER_SIZE );
    1ac2:	0f 2e       	mov	r0, r31
    1ac4:	f0 ea       	ldi	r31, 0xA0	; 160
    1ac6:	2f 2e       	mov	r2, r31
    1ac8:	f0 2d       	mov	r31, r0
				}
			}else{
				modeWait -= MAIN_DELAY;
			}
		}
		if (sensorValue[0] == 0 && sensorValueOld[0] != sensorValue[0]) {
    1aca:	0f 2e       	mov	r0, r31
    1acc:	f8 e5       	ldi	r31, 0x58	; 88
    1ace:	cf 2e       	mov	r12, r31
    1ad0:	f1 e1       	ldi	r31, 0x11	; 17
    1ad2:	df 2e       	mov	r13, r31
    1ad4:	f0 2d       	mov	r31, r0
			printf( "### main() sensorValue[0] == 0\n");
			PORTC &= ~LED_PROGRAM;
		}else if (sensorValueOld[0] != sensorValue[0]){
    1ad6:	0f 2e       	mov	r0, r31
    1ad8:	f2 e5       	ldi	r31, 0x52	; 82
    1ada:	af 2e       	mov	r10, r31
    1adc:	f1 e1       	ldi	r31, 0x11	; 17
    1ade:	bf 2e       	mov	r11, r31
    1ae0:	f0 2d       	mov	r31, r0
			printf( "### main() sensorValue[0] == 1\n");
			PORTC = LED_BAT|LED_TxD|LED_RxD|LED_AUX|LED_MANAGE|LED_PLAY;
		}
		
		if (sensorValue[1] == 0 && sensorValueOld[1] != sensorValue[1]) {
    1ae2:	0f 2e       	mov	r0, r31
    1ae4:	fa e5       	ldi	r31, 0x5A	; 90
    1ae6:	ef 2e       	mov	r14, r31
    1ae8:	f1 e1       	ldi	r31, 0x11	; 17
    1aea:	ff 2e       	mov	r15, r31
    1aec:	f0 2d       	mov	r31, r0
			printf( "### main() sensorValue[1] == 0\n");
			PORTC &= ~LED_MANAGE;
		}else if (sensorValueOld[1] != sensorValue[1]){
    1aee:	0f 2e       	mov	r0, r31
    1af0:	f4 e5       	ldi	r31, 0x54	; 84
    1af2:	8f 2e       	mov	r8, r31
    1af4:	f1 e1       	ldi	r31, 0x11	; 17
    1af6:	9f 2e       	mov	r9, r31
    1af8:	f0 2d       	mov	r31, r0
			printf( "### main() sensorValue[1] == 1\n");
			PORTC = LED_BAT|LED_TxD|LED_RxD|LED_AUX|LED_PROGRAM|LED_PLAY;
		}

		if (sensorValue[2] == 0 && sensorValueOld[2] != sensorValue[2]) {
    1afa:	0c e5       	ldi	r16, 0x5C	; 92
    1afc:	11 e1       	ldi	r17, 0x11	; 17
			printf( "### main() sensorValue[2] == 0\n");
			PORTC &= ~LED_AUX;
		}else if (sensorValueOld[2] != sensorValue[2]){
    1afe:	0f 2e       	mov	r0, r31
    1b00:	f6 e5       	ldi	r31, 0x56	; 86
    1b02:	6f 2e       	mov	r6, r31
    1b04:	f1 e1       	ldi	r31, 0x11	; 17
    1b06:	7f 2e       	mov	r7, r31
    1b08:	f0 2d       	mov	r31, r0
	int isFinish = 0;

    sensorInit();
	if (isCaptureMode ==1) dxl_write_byte( BROADCAST_ID, P_TORQUE_ENABLE, 0 );
	while(1){
        sensorTest(0);
    1b0a:	80 e0       	ldi	r24, 0x00	; 0
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	11 d9       	rcall	.-3550   	; 0xd32 <sensorTest>
        sensorTest(1);
    1b10:	81 e0       	ldi	r24, 0x01	; 1
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	0e d9       	rcall	.-3556   	; 0xd32 <sensorTest>
        sensorTest(2);
    1b16:	82 e0       	ldi	r24, 0x02	; 2
    1b18:	90 e0       	ldi	r25, 0x00	; 0
    1b1a:	0b d9       	rcall	.-3562   	; 0xd32 <sensorTest>

		setMode();
    1b1c:	cf de       	rcall	.-610    	; 0x18bc <setMode>
		
		if( checkSerialRead() > 0 ){
    1b1e:	97 d8       	rcall	.-3794   	; 0xc4e <checkSerialRead>
    1b20:	18 16       	cp	r1, r24
    1b22:	19 06       	cpc	r1, r25
    1b24:	0c f0       	brlt	.+2      	; 0x1b28 <main+0xd8>
    1b26:	8a c0       	rjmp	.+276    	; 0x1c3c <main+0x1ec>
			readData = getReadBuffer();
    1b28:	e2 d8       	rcall	.-3644   	; 0xcee <getReadBuffer>
    1b2a:	ec 01       	movw	r28, r24
			if( readData != NULL ){
    1b2c:	00 97       	sbiw	r24, 0x00	; 0
    1b2e:	09 f4       	brne	.+2      	; 0x1b32 <main+0xe2>
    1b30:	85 c0       	rjmp	.+266    	; 0x1c3c <main+0x1ec>
//				printf( "readData=%s\n", &readData[0] );
				split( &readData[0] );
    1b32:	a0 d9       	rcall	.-3264   	; 0xe74 <split>
				switch( serCmd[0] ){
    1b34:	f2 01       	movw	r30, r4
    1b36:	80 81       	ld	r24, Z
    1b38:	91 81       	ldd	r25, Z+1	; 0x01
    1b3a:	86 30       	cpi	r24, 0x06	; 6
    1b3c:	91 05       	cpc	r25, r1
    1b3e:	09 f4       	brne	.+2      	; 0x1b42 <main+0xf2>
    1b40:	63 c0       	rjmp	.+198    	; 0x1c08 <main+0x1b8>
    1b42:	94 f4       	brge	.+36     	; 0x1b68 <main+0x118>
    1b44:	82 30       	cpi	r24, 0x02	; 2
    1b46:	91 05       	cpc	r25, r1
    1b48:	09 f4       	brne	.+2      	; 0x1b4c <main+0xfc>
    1b4a:	4a c0       	rjmp	.+148    	; 0x1be0 <main+0x190>
    1b4c:	34 f4       	brge	.+12     	; 0x1b5a <main+0x10a>
    1b4e:	00 97       	sbiw	r24, 0x00	; 0
    1b50:	01 f1       	breq	.+64     	; 0x1b92 <main+0x142>
    1b52:	01 97       	sbiw	r24, 0x01	; 1
    1b54:	09 f4       	brne	.+2      	; 0x1b58 <main+0x108>
    1b56:	46 c0       	rjmp	.+140    	; 0x1be4 <main+0x194>
    1b58:	69 c0       	rjmp	.+210    	; 0x1c2c <main+0x1dc>
    1b5a:	84 30       	cpi	r24, 0x04	; 4
    1b5c:	91 05       	cpc	r25, r1
    1b5e:	09 f4       	brne	.+2      	; 0x1b62 <main+0x112>
    1b60:	4f c0       	rjmp	.+158    	; 0x1c00 <main+0x1b0>
    1b62:	0c f4       	brge	.+2      	; 0x1b66 <main+0x116>
    1b64:	40 c0       	rjmp	.+128    	; 0x1be6 <main+0x196>
    1b66:	4e c0       	rjmp	.+156    	; 0x1c04 <main+0x1b4>
    1b68:	89 30       	cpi	r24, 0x09	; 9
    1b6a:	91 05       	cpc	r25, r1
    1b6c:	79 f1       	breq	.+94     	; 0x1bcc <main+0x17c>
    1b6e:	34 f4       	brge	.+12     	; 0x1b7c <main+0x12c>
    1b70:	87 30       	cpi	r24, 0x07	; 7
    1b72:	91 05       	cpc	r25, r1
    1b74:	b9 f0       	breq	.+46     	; 0x1ba4 <main+0x154>
    1b76:	08 97       	sbiw	r24, 0x08	; 8
    1b78:	21 f1       	breq	.+72     	; 0x1bc2 <main+0x172>
    1b7a:	58 c0       	rjmp	.+176    	; 0x1c2c <main+0x1dc>
    1b7c:	8b 30       	cpi	r24, 0x0B	; 11
    1b7e:	91 05       	cpc	r25, r1
    1b80:	09 f4       	brne	.+2      	; 0x1b84 <main+0x134>
    1b82:	57 c0       	rjmp	.+174    	; 0x1c32 <main+0x1e2>
    1b84:	0c f4       	brge	.+2      	; 0x1b88 <main+0x138>
    1b86:	49 c0       	rjmp	.+146    	; 0x1c1a <main+0x1ca>
    1b88:	87 3e       	cpi	r24, 0xE7	; 231
    1b8a:	93 40       	sbci	r25, 0x03	; 3
    1b8c:	09 f4       	brne	.+2      	; 0x1b90 <main+0x140>
    1b8e:	27 c1       	rjmp	.+590    	; 0x1dde <main+0x38e>
    1b90:	4d c0       	rjmp	.+154    	; 0x1c2c <main+0x1dc>
				case EVT_ACTION:
					ServoControl( serCmd[1] );
    1b92:	ee e7       	ldi	r30, 0x7E	; 126
    1b94:	f1 e1       	ldi	r31, 0x11	; 17
    1b96:	80 81       	ld	r24, Z
    1b98:	91 81       	ldd	r25, Z+1	; 0x01
    1b9a:	d0 dc       	rcall	.-1632   	; 0x153c <ServoControl>
//                    setSpeedTest( serCmd[1] );
					sendAck(1);
    1b9c:	81 e0       	ldi	r24, 0x01	; 1
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	38 d9       	rcall	.-3472   	; 0xe12 <sendAck>
					break;
    1ba2:	47 c0       	rjmp	.+142    	; 0x1c32 <main+0x1e2>
				case EVT_START_MOTION:
				    startMotion( serCmd[1], serCmd[2] );
    1ba4:	e0 e8       	ldi	r30, 0x80	; 128
    1ba6:	f1 e1       	ldi	r31, 0x11	; 17
    1ba8:	60 81       	ld	r22, Z
    1baa:	71 81       	ldd	r23, Z+1	; 0x01
    1bac:	ee e7       	ldi	r30, 0x7E	; 126
    1bae:	f1 e1       	ldi	r31, 0x11	; 17
    1bb0:	80 81       	ld	r24, Z
    1bb2:	91 81       	ldd	r25, Z+1	; 0x01
    1bb4:	74 db       	rcall	.-2328   	; 0x129e <startMotion>
					PORTC = ~(1 << (LED_MAX - 2));
    1bb6:	ff ed       	ldi	r31, 0xDF	; 223
    1bb8:	f8 b9       	out	0x08, r31	; 8
					sendAck(1);
    1bba:	81 e0       	ldi	r24, 0x01	; 1
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	29 d9       	rcall	.-3502   	; 0xe12 <sendAck>
					break;
    1bc0:	38 c0       	rjmp	.+112    	; 0x1c32 <main+0x1e2>
				case EVT_STOP_MOTION:
					stopMotion();
    1bc2:	f8 db       	rcall	.-2064   	; 0x13b4 <stopMotion>
					sendAck(1);
    1bc4:	81 e0       	ldi	r24, 0x01	; 1
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	24 d9       	rcall	.-3512   	; 0xe12 <sendAck>
					break;
    1bca:	33 c0       	rjmp	.+102    	; 0x1c32 <main+0x1e2>
				case EVT_FORCE_MOTION:
					forceMotion( serCmd[1], serCmd[2] );
    1bcc:	e0 e8       	ldi	r30, 0x80	; 128
    1bce:	f1 e1       	ldi	r31, 0x11	; 17
    1bd0:	60 81       	ld	r22, Z
    1bd2:	71 81       	ldd	r23, Z+1	; 0x01
    1bd4:	ee e7       	ldi	r30, 0x7E	; 126
    1bd6:	f1 e1       	ldi	r31, 0x11	; 17
    1bd8:	80 81       	ld	r24, Z
    1bda:	91 81       	ldd	r25, Z+1	; 0x01
    1bdc:	d4 db       	rcall	.-2136   	; 0x1386 <forceMotion>
					break;
    1bde:	29 c0       	rjmp	.+82     	; 0x1c32 <main+0x1e2>
				case EVT_GET_NOW_ANGLE:
					getAngle();
    1be0:	ae d9       	rcall	.-3236   	; 0xf3e <getAngle>
					break;
    1be2:	27 c0       	rjmp	.+78     	; 0x1c32 <main+0x1e2>
				case EVT_SET_ANGLE:
					setAngle();
    1be4:	8f d9       	rcall	.-3298   	; 0xf04 <setAngle>
				case EVT_GET_ACT_ANGLE:
				    if( serCmd[1] >= ACT_MAX ){
    1be6:	ee e7       	ldi	r30, 0x7E	; 126
    1be8:	f1 e1       	ldi	r31, 0x11	; 17
    1bea:	80 81       	ld	r24, Z
    1bec:	91 81       	ldd	r25, Z+1	; 0x01
    1bee:	86 34       	cpi	r24, 0x46	; 70
    1bf0:	91 05       	cpc	r25, r1
    1bf2:	24 f0       	brlt	.+8      	; 0x1bfc <main+0x1ac>
					    sendAck(0);
    1bf4:	80 e0       	ldi	r24, 0x00	; 0
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
    1bf8:	0c d9       	rcall	.-3560   	; 0xe12 <sendAck>
    1bfa:	1b c0       	rjmp	.+54     	; 0x1c32 <main+0x1e2>
					}else{
						sendActAngle(serCmd[1]);
    1bfc:	07 da       	rcall	.-3058   	; 0x100c <sendActAngle>
    1bfe:	19 c0       	rjmp	.+50     	; 0x1c32 <main+0x1e2>
					}
					break;
				case EVT_GET_LOAD:
					getLoad();
    1c00:	56 da       	rcall	.-2900   	; 0x10ae <getLoad>
//					printf( "%d\n", movingTime );
					break;
    1c02:	17 c0       	rjmp	.+46     	; 0x1c32 <main+0x1e2>
				case EVT_GET_VOLTAGE:
					getVoltage();
    1c04:	cf da       	rcall	.-2658   	; 0x11a4 <getVoltage>
					break;
    1c06:	15 c0       	rjmp	.+42     	; 0x1c32 <main+0x1e2>
				case EVT_TORQUE_DISABLE:
					dxl_write_byte( BROADCAST_ID, P_TORQUE_ENABLE, 0 );
    1c08:	40 e0       	ldi	r20, 0x00	; 0
    1c0a:	50 e0       	ldi	r21, 0x00	; 0
    1c0c:	68 e1       	ldi	r22, 0x18	; 24
    1c0e:	70 e0       	ldi	r23, 0x00	; 0
    1c10:	8e ef       	ldi	r24, 0xFE	; 254
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	0e 94 33 02 	call	0x466	; 0x466 <dxl_write_byte>
					break;
    1c18:	0c c0       	rjmp	.+24     	; 0x1c32 <main+0x1e2>
				case EVT_WATCH_DOG:
					watchDogCnt = 0;
    1c1a:	10 92 64 11 	sts	0x1164, r1
    1c1e:	10 92 65 11 	sts	0x1165, r1
    1c22:	10 92 66 11 	sts	0x1166, r1
    1c26:	10 92 67 11 	sts	0x1167, r1
					break;
    1c2a:	03 c0       	rjmp	.+6      	; 0x1c32 <main+0x1e2>
//					printf( "finish\n");
					sendAck(999);
					isFinish = 1;
					break;
				default:
					sendAck(0);
    1c2c:	80 e0       	ldi	r24, 0x00	; 0
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	f0 d8       	rcall	.-3616   	; 0xe12 <sendAck>
				}
				if( isFinish > 0 ){
					MotorControl( 0, 0 );
					break;
				}
				memset( readData, 0x00, SERIAL_BUFFER_SIZE );
    1c32:	fe 01       	movw	r30, r28
    1c34:	23 2d       	mov	r18, r3
    1c36:	11 92       	st	Z+, r1
    1c38:	2a 95       	dec	r18
    1c3a:	e9 f7       	brne	.-6      	; 0x1c36 <main+0x1e6>
			}
		}
		memset( &serCmd[0], 0x00, sizeof(int) * SERIAL_BUFFER_SIZE );
    1c3c:	f2 01       	movw	r30, r4
    1c3e:	22 2d       	mov	r18, r2
    1c40:	11 92       	st	Z+, r1
    1c42:	2a 95       	dec	r18
    1c44:	e9 f7       	brne	.-6      	; 0x1c40 <main+0x1f0>
		
		if (~PINA & SW_START ) {
    1c46:	01 99       	sbic	0x00, 1	; 0
    1c48:	17 c0       	rjmp	.+46     	; 0x1c78 <main+0x228>
			if( iStart > 0 ){
    1c4a:	80 91 0a 02 	lds	r24, 0x020A
    1c4e:	90 91 0b 02 	lds	r25, 0x020B
    1c52:	18 16       	cp	r1, r24
    1c54:	19 06       	cpc	r1, r25
    1c56:	ac f5       	brge	.+106    	; 0x1cc2 <main+0x272>
				iStart = 0;
    1c58:	10 92 0b 02 	sts	0x020B, r1
    1c5c:	10 92 0a 02 	sts	0x020A, r1
				PORTC = LED_BAT|LED_TxD|LED_RxD|LED_AUX|LED_MANAGE|LED_PROGRAM|LED_PLAY;
    1c60:	8f e7       	ldi	r24, 0x7F	; 127
    1c62:	88 b9       	out	0x08, r24	; 8
				if (isCaptureMode != 1) ServoControl( 0 );
    1c64:	80 91 5e 11 	lds	r24, 0x115E
    1c68:	90 91 5f 11 	lds	r25, 0x115F
    1c6c:	01 97       	sbiw	r24, 0x01	; 1
    1c6e:	49 f1       	breq	.+82     	; 0x1cc2 <main+0x272>
    1c70:	80 e0       	ldi	r24, 0x00	; 0
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	63 dc       	rcall	.-1850   	; 0x153c <ServoControl>
    1c76:	25 c0       	rjmp	.+74     	; 0x1cc2 <main+0x272>
			}
		}else{
			if( iStart == 0 ){
    1c78:	80 91 0a 02 	lds	r24, 0x020A
    1c7c:	90 91 0b 02 	lds	r25, 0x020B
    1c80:	89 2b       	or	r24, r25
    1c82:	39 f4       	brne	.+14     	; 0x1c92 <main+0x242>
				PORTC &= ~LED_PLAY;
    1c84:	46 98       	cbi	0x08, 6	; 8
				iStart = 1;
    1c86:	81 e0       	ldi	r24, 0x01	; 1
    1c88:	90 e0       	ldi	r25, 0x00	; 0
    1c8a:	90 93 0b 02 	sts	0x020B, r25
    1c8e:	80 93 0a 02 	sts	0x020A, r24
			}
			if( modeWait <= 0 ){
    1c92:	80 91 76 11 	lds	r24, 0x1176
    1c96:	90 91 77 11 	lds	r25, 0x1177
    1c9a:	18 16       	cp	r1, r24
    1c9c:	19 06       	cpc	r1, r25
    1c9e:	5c f0       	brlt	.+22     	; 0x1cb6 <main+0x266>
				setModeAction();
    1ca0:	19 db       	rcall	.-2510   	; 0x12d4 <setModeAction>
				if (isMovetest == 1) {
    1ca2:	80 91 08 02 	lds	r24, 0x0208
    1ca6:	90 91 09 02 	lds	r25, 0x0209
    1caa:	01 97       	sbiw	r24, 0x01	; 1
    1cac:	11 f4       	brne	.+4      	; 0x1cb2 <main+0x262>
					moveTest();
    1cae:	98 de       	rcall	.-720    	; 0x19e0 <moveTest>
    1cb0:	08 c0       	rjmp	.+16     	; 0x1cc2 <main+0x272>
				} else {
					move();
    1cb2:	5e de       	rcall	.-836    	; 0x1970 <move>
    1cb4:	06 c0       	rjmp	.+12     	; 0x1cc2 <main+0x272>
				}
			}else{
				modeWait -= MAIN_DELAY;
    1cb6:	88 5e       	subi	r24, 0xE8	; 232
    1cb8:	93 40       	sbci	r25, 0x03	; 3
    1cba:	90 93 77 11 	sts	0x1177, r25
    1cbe:	80 93 76 11 	sts	0x1176, r24
			}
		}
		if (sensorValue[0] == 0 && sensorValueOld[0] != sensorValue[0]) {
    1cc2:	f6 01       	movw	r30, r12
    1cc4:	80 81       	ld	r24, Z
    1cc6:	91 81       	ldd	r25, Z+1	; 0x01
    1cc8:	00 97       	sbiw	r24, 0x00	; 0
    1cca:	51 f4       	brne	.+20     	; 0x1ce0 <main+0x290>
    1ccc:	f5 01       	movw	r30, r10
    1cce:	80 81       	ld	r24, Z
    1cd0:	91 81       	ldd	r25, Z+1	; 0x01
    1cd2:	89 2b       	or	r24, r25
    1cd4:	81 f0       	breq	.+32     	; 0x1cf6 <main+0x2a6>
			printf( "### main() sensorValue[0] == 0\n");
    1cd6:	82 ed       	ldi	r24, 0xD2	; 210
    1cd8:	9d e0       	ldi	r25, 0x0D	; 13
    1cda:	63 d3       	rcall	.+1734   	; 0x23a2 <puts>
			PORTC &= ~LED_PROGRAM;
    1cdc:	45 98       	cbi	0x08, 5	; 8
    1cde:	0b c0       	rjmp	.+22     	; 0x1cf6 <main+0x2a6>
		}else if (sensorValueOld[0] != sensorValue[0]){
    1ce0:	f5 01       	movw	r30, r10
    1ce2:	20 81       	ld	r18, Z
    1ce4:	31 81       	ldd	r19, Z+1	; 0x01
    1ce6:	82 17       	cp	r24, r18
    1ce8:	93 07       	cpc	r25, r19
    1cea:	29 f0       	breq	.+10     	; 0x1cf6 <main+0x2a6>
			printf( "### main() sensorValue[0] == 1\n");
    1cec:	81 ef       	ldi	r24, 0xF1	; 241
    1cee:	9d e0       	ldi	r25, 0x0D	; 13
    1cf0:	58 d3       	rcall	.+1712   	; 0x23a2 <puts>
			PORTC = LED_BAT|LED_TxD|LED_RxD|LED_AUX|LED_MANAGE|LED_PLAY;
    1cf2:	8f e5       	ldi	r24, 0x5F	; 95
    1cf4:	88 b9       	out	0x08, r24	; 8
		}
		
		if (sensorValue[1] == 0 && sensorValueOld[1] != sensorValue[1]) {
    1cf6:	f7 01       	movw	r30, r14
    1cf8:	80 81       	ld	r24, Z
    1cfa:	91 81       	ldd	r25, Z+1	; 0x01
    1cfc:	00 97       	sbiw	r24, 0x00	; 0
    1cfe:	51 f4       	brne	.+20     	; 0x1d14 <main+0x2c4>
    1d00:	f4 01       	movw	r30, r8
    1d02:	80 81       	ld	r24, Z
    1d04:	91 81       	ldd	r25, Z+1	; 0x01
    1d06:	89 2b       	or	r24, r25
    1d08:	81 f0       	breq	.+32     	; 0x1d2a <main+0x2da>
			printf( "### main() sensorValue[1] == 0\n");
    1d0a:	80 e1       	ldi	r24, 0x10	; 16
    1d0c:	9e e0       	ldi	r25, 0x0E	; 14
    1d0e:	49 d3       	rcall	.+1682   	; 0x23a2 <puts>
			PORTC &= ~LED_MANAGE;
    1d10:	44 98       	cbi	0x08, 4	; 8
    1d12:	0b c0       	rjmp	.+22     	; 0x1d2a <main+0x2da>
		}else if (sensorValueOld[1] != sensorValue[1]){
    1d14:	f4 01       	movw	r30, r8
    1d16:	20 81       	ld	r18, Z
    1d18:	31 81       	ldd	r19, Z+1	; 0x01
    1d1a:	82 17       	cp	r24, r18
    1d1c:	93 07       	cpc	r25, r19
    1d1e:	29 f0       	breq	.+10     	; 0x1d2a <main+0x2da>
			printf( "### main() sensorValue[1] == 1\n");
    1d20:	8f e2       	ldi	r24, 0x2F	; 47
    1d22:	9e e0       	ldi	r25, 0x0E	; 14
    1d24:	3e d3       	rcall	.+1660   	; 0x23a2 <puts>
			PORTC = LED_BAT|LED_TxD|LED_RxD|LED_AUX|LED_PROGRAM|LED_PLAY;
    1d26:	8f e6       	ldi	r24, 0x6F	; 111
    1d28:	88 b9       	out	0x08, r24	; 8
		}

		if (sensorValue[2] == 0 && sensorValueOld[2] != sensorValue[2]) {
    1d2a:	f8 01       	movw	r30, r16
    1d2c:	80 81       	ld	r24, Z
    1d2e:	91 81       	ldd	r25, Z+1	; 0x01
    1d30:	00 97       	sbiw	r24, 0x00	; 0
    1d32:	51 f4       	brne	.+20     	; 0x1d48 <main+0x2f8>
    1d34:	f3 01       	movw	r30, r6
    1d36:	80 81       	ld	r24, Z
    1d38:	91 81       	ldd	r25, Z+1	; 0x01
    1d3a:	89 2b       	or	r24, r25
    1d3c:	81 f0       	breq	.+32     	; 0x1d5e <main+0x30e>
			printf( "### main() sensorValue[2] == 0\n");
    1d3e:	8e e4       	ldi	r24, 0x4E	; 78
    1d40:	9e e0       	ldi	r25, 0x0E	; 14
    1d42:	2f d3       	rcall	.+1630   	; 0x23a2 <puts>
			PORTC &= ~LED_AUX;
    1d44:	43 98       	cbi	0x08, 3	; 8
    1d46:	0b c0       	rjmp	.+22     	; 0x1d5e <main+0x30e>
		}else if (sensorValueOld[2] != sensorValue[2]){
    1d48:	f3 01       	movw	r30, r6
    1d4a:	20 81       	ld	r18, Z
    1d4c:	31 81       	ldd	r19, Z+1	; 0x01
    1d4e:	82 17       	cp	r24, r18
    1d50:	93 07       	cpc	r25, r19
    1d52:	29 f0       	breq	.+10     	; 0x1d5e <main+0x30e>
			printf( "### main() sensorValue[2] == 1\n");
    1d54:	8d e6       	ldi	r24, 0x6D	; 109
    1d56:	9e e0       	ldi	r25, 0x0E	; 14
    1d58:	24 d3       	rcall	.+1608   	; 0x23a2 <puts>
			PORTC = LED_BAT|LED_TxD|LED_RxD|LED_MANAGE|LED_PROGRAM|LED_PLAY;
    1d5a:	87 e7       	ldi	r24, 0x77	; 119
    1d5c:	88 b9       	out	0x08, r24	; 8
    	}
	    sensorValueOld[0] = sensorValue[0];
    1d5e:	f6 01       	movw	r30, r12
    1d60:	80 81       	ld	r24, Z
    1d62:	91 81       	ldd	r25, Z+1	; 0x01
    1d64:	f5 01       	movw	r30, r10
    1d66:	91 83       	std	Z+1, r25	; 0x01
    1d68:	80 83       	st	Z, r24
		sensorValueOld[1] = sensorValue[1];
    1d6a:	f7 01       	movw	r30, r14
    1d6c:	80 81       	ld	r24, Z
    1d6e:	91 81       	ldd	r25, Z+1	; 0x01
    1d70:	f4 01       	movw	r30, r8
    1d72:	91 83       	std	Z+1, r25	; 0x01
    1d74:	80 83       	st	Z, r24
		sensorValueOld[2] = sensorValue[2];
    1d76:	f8 01       	movw	r30, r16
    1d78:	80 81       	ld	r24, Z
    1d7a:	91 81       	ldd	r25, Z+1	; 0x01
    1d7c:	f3 01       	movw	r30, r6
    1d7e:	91 83       	std	Z+1, r25	; 0x01
    1d80:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1d82:	ff e3       	ldi	r31, 0x3F	; 63
    1d84:	2d e0       	ldi	r18, 0x0D	; 13
    1d86:	83 e0       	ldi	r24, 0x03	; 3
    1d88:	f1 50       	subi	r31, 0x01	; 1
    1d8a:	20 40       	sbci	r18, 0x00	; 0
    1d8c:	80 40       	sbci	r24, 0x00	; 0
    1d8e:	e1 f7       	brne	.-8      	; 0x1d88 <main+0x338>
    1d90:	00 c0       	rjmp	.+0      	; 0x1d92 <main+0x342>
    1d92:	00 00       	nop
		
		_delay_ms(MAIN_DELAY);
		watchDogCnt++;
    1d94:	80 91 64 11 	lds	r24, 0x1164
    1d98:	90 91 65 11 	lds	r25, 0x1165
    1d9c:	a0 91 66 11 	lds	r26, 0x1166
    1da0:	b0 91 67 11 	lds	r27, 0x1167
    1da4:	01 96       	adiw	r24, 0x01	; 1
    1da6:	a1 1d       	adc	r26, r1
    1da8:	b1 1d       	adc	r27, r1
    1daa:	80 93 64 11 	sts	0x1164, r24
    1dae:	90 93 65 11 	sts	0x1165, r25
    1db2:	a0 93 66 11 	sts	0x1166, r26
    1db6:	b0 93 67 11 	sts	0x1167, r27
		
		caputureCount1++;
    1dba:	80 91 60 11 	lds	r24, 0x1160
    1dbe:	90 91 61 11 	lds	r25, 0x1161
    1dc2:	01 96       	adiw	r24, 0x01	; 1
    1dc4:	90 93 61 11 	sts	0x1161, r25
    1dc8:	80 93 60 11 	sts	0x1160, r24
		if (caputureCount1 == 25){
    1dcc:	49 97       	sbiw	r24, 0x19	; 25
    1dce:	09 f0       	breq	.+2      	; 0x1dd2 <main+0x382>
    1dd0:	9c ce       	rjmp	.-712    	; 0x1b0a <main+0xba>
			getAngle();
    1dd2:	b5 d8       	rcall	.-3734   	; 0xf3e <getAngle>
			caputureCount1 = 0;
    1dd4:	10 92 61 11 	sts	0x1161, r1
    1dd8:	10 92 60 11 	sts	0x1160, r1
    1ddc:	96 ce       	rjmp	.-724    	; 0x1b0a <main+0xba>
					break;
				case EVT_MOTION_EDIT:
					break;
				case 999:
//					printf( "finish\n");
					sendAck(999);
    1dde:	87 ee       	ldi	r24, 0xE7	; 231
    1de0:	93 e0       	ldi	r25, 0x03	; 3
    1de2:	17 d8       	rcall	.-4050   	; 0xe12 <sendAck>
					break;
				default:
					sendAck(0);
				}
				if( isFinish > 0 ){
					MotorControl( 0, 0 );
    1de4:	60 e0       	ldi	r22, 0x00	; 0
    1de6:	70 e0       	ldi	r23, 0x00	; 0
    1de8:	80 e0       	ldi	r24, 0x00	; 0
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	65 db       	rcall	.-2358   	; 0x14b8 <MotorControl>
		if (caputureCount1 == 25){
			getAngle();
			caputureCount1 = 0;
		}
	}
}
    1dee:	80 e0       	ldi	r24, 0x00	; 0
    1df0:	90 e0       	ldi	r25, 0x00	; 0
    1df2:	df 91       	pop	r29
    1df4:	cf 91       	pop	r28
    1df6:	1f 91       	pop	r17
    1df8:	0f 91       	pop	r16
    1dfa:	ff 90       	pop	r15
    1dfc:	ef 90       	pop	r14
    1dfe:	df 90       	pop	r13
    1e00:	cf 90       	pop	r12
    1e02:	bf 90       	pop	r11
    1e04:	af 90       	pop	r10
    1e06:	9f 90       	pop	r9
    1e08:	8f 90       	pop	r8
    1e0a:	7f 90       	pop	r7
    1e0c:	6f 90       	pop	r6
    1e0e:	5f 90       	pop	r5
    1e10:	4f 90       	pop	r4
    1e12:	3f 90       	pop	r3
    1e14:	2f 90       	pop	r2
    1e16:	08 95       	ret

00001e18 <__divsf3>:
    1e18:	0c d0       	rcall	.+24     	; 0x1e32 <__divsf3x>
    1e1a:	eb c0       	rjmp	.+470    	; 0x1ff2 <__fp_round>
    1e1c:	e3 d0       	rcall	.+454    	; 0x1fe4 <__fp_pscB>
    1e1e:	40 f0       	brcs	.+16     	; 0x1e30 <__divsf3+0x18>
    1e20:	da d0       	rcall	.+436    	; 0x1fd6 <__fp_pscA>
    1e22:	30 f0       	brcs	.+12     	; 0x1e30 <__divsf3+0x18>
    1e24:	21 f4       	brne	.+8      	; 0x1e2e <__divsf3+0x16>
    1e26:	5f 3f       	cpi	r21, 0xFF	; 255
    1e28:	19 f0       	breq	.+6      	; 0x1e30 <__divsf3+0x18>
    1e2a:	cc c0       	rjmp	.+408    	; 0x1fc4 <__fp_inf>
    1e2c:	51 11       	cpse	r21, r1
    1e2e:	15 c1       	rjmp	.+554    	; 0x205a <__fp_szero>
    1e30:	cf c0       	rjmp	.+414    	; 0x1fd0 <__fp_nan>

00001e32 <__divsf3x>:
    1e32:	f0 d0       	rcall	.+480    	; 0x2014 <__fp_split3>
    1e34:	98 f3       	brcs	.-26     	; 0x1e1c <__divsf3+0x4>

00001e36 <__divsf3_pse>:
    1e36:	99 23       	and	r25, r25
    1e38:	c9 f3       	breq	.-14     	; 0x1e2c <__divsf3+0x14>
    1e3a:	55 23       	and	r21, r21
    1e3c:	b1 f3       	breq	.-20     	; 0x1e2a <__divsf3+0x12>
    1e3e:	95 1b       	sub	r25, r21
    1e40:	55 0b       	sbc	r21, r21
    1e42:	bb 27       	eor	r27, r27
    1e44:	aa 27       	eor	r26, r26
    1e46:	62 17       	cp	r22, r18
    1e48:	73 07       	cpc	r23, r19
    1e4a:	84 07       	cpc	r24, r20
    1e4c:	38 f0       	brcs	.+14     	; 0x1e5c <__divsf3_pse+0x26>
    1e4e:	9f 5f       	subi	r25, 0xFF	; 255
    1e50:	5f 4f       	sbci	r21, 0xFF	; 255
    1e52:	22 0f       	add	r18, r18
    1e54:	33 1f       	adc	r19, r19
    1e56:	44 1f       	adc	r20, r20
    1e58:	aa 1f       	adc	r26, r26
    1e5a:	a9 f3       	breq	.-22     	; 0x1e46 <__divsf3_pse+0x10>
    1e5c:	33 d0       	rcall	.+102    	; 0x1ec4 <__divsf3_pse+0x8e>
    1e5e:	0e 2e       	mov	r0, r30
    1e60:	3a f0       	brmi	.+14     	; 0x1e70 <__divsf3_pse+0x3a>
    1e62:	e0 e8       	ldi	r30, 0x80	; 128
    1e64:	30 d0       	rcall	.+96     	; 0x1ec6 <__divsf3_pse+0x90>
    1e66:	91 50       	subi	r25, 0x01	; 1
    1e68:	50 40       	sbci	r21, 0x00	; 0
    1e6a:	e6 95       	lsr	r30
    1e6c:	00 1c       	adc	r0, r0
    1e6e:	ca f7       	brpl	.-14     	; 0x1e62 <__divsf3_pse+0x2c>
    1e70:	29 d0       	rcall	.+82     	; 0x1ec4 <__divsf3_pse+0x8e>
    1e72:	fe 2f       	mov	r31, r30
    1e74:	27 d0       	rcall	.+78     	; 0x1ec4 <__divsf3_pse+0x8e>
    1e76:	66 0f       	add	r22, r22
    1e78:	77 1f       	adc	r23, r23
    1e7a:	88 1f       	adc	r24, r24
    1e7c:	bb 1f       	adc	r27, r27
    1e7e:	26 17       	cp	r18, r22
    1e80:	37 07       	cpc	r19, r23
    1e82:	48 07       	cpc	r20, r24
    1e84:	ab 07       	cpc	r26, r27
    1e86:	b0 e8       	ldi	r27, 0x80	; 128
    1e88:	09 f0       	breq	.+2      	; 0x1e8c <__divsf3_pse+0x56>
    1e8a:	bb 0b       	sbc	r27, r27
    1e8c:	80 2d       	mov	r24, r0
    1e8e:	bf 01       	movw	r22, r30
    1e90:	ff 27       	eor	r31, r31
    1e92:	93 58       	subi	r25, 0x83	; 131
    1e94:	5f 4f       	sbci	r21, 0xFF	; 255
    1e96:	2a f0       	brmi	.+10     	; 0x1ea2 <__divsf3_pse+0x6c>
    1e98:	9e 3f       	cpi	r25, 0xFE	; 254
    1e9a:	51 05       	cpc	r21, r1
    1e9c:	68 f0       	brcs	.+26     	; 0x1eb8 <__divsf3_pse+0x82>
    1e9e:	92 c0       	rjmp	.+292    	; 0x1fc4 <__fp_inf>
    1ea0:	dc c0       	rjmp	.+440    	; 0x205a <__fp_szero>
    1ea2:	5f 3f       	cpi	r21, 0xFF	; 255
    1ea4:	ec f3       	brlt	.-6      	; 0x1ea0 <__divsf3_pse+0x6a>
    1ea6:	98 3e       	cpi	r25, 0xE8	; 232
    1ea8:	dc f3       	brlt	.-10     	; 0x1ea0 <__divsf3_pse+0x6a>
    1eaa:	86 95       	lsr	r24
    1eac:	77 95       	ror	r23
    1eae:	67 95       	ror	r22
    1eb0:	b7 95       	ror	r27
    1eb2:	f7 95       	ror	r31
    1eb4:	9f 5f       	subi	r25, 0xFF	; 255
    1eb6:	c9 f7       	brne	.-14     	; 0x1eaa <__divsf3_pse+0x74>
    1eb8:	88 0f       	add	r24, r24
    1eba:	91 1d       	adc	r25, r1
    1ebc:	96 95       	lsr	r25
    1ebe:	87 95       	ror	r24
    1ec0:	97 f9       	bld	r25, 7
    1ec2:	08 95       	ret
    1ec4:	e1 e0       	ldi	r30, 0x01	; 1
    1ec6:	66 0f       	add	r22, r22
    1ec8:	77 1f       	adc	r23, r23
    1eca:	88 1f       	adc	r24, r24
    1ecc:	bb 1f       	adc	r27, r27
    1ece:	62 17       	cp	r22, r18
    1ed0:	73 07       	cpc	r23, r19
    1ed2:	84 07       	cpc	r24, r20
    1ed4:	ba 07       	cpc	r27, r26
    1ed6:	20 f0       	brcs	.+8      	; 0x1ee0 <__divsf3_pse+0xaa>
    1ed8:	62 1b       	sub	r22, r18
    1eda:	73 0b       	sbc	r23, r19
    1edc:	84 0b       	sbc	r24, r20
    1ede:	ba 0b       	sbc	r27, r26
    1ee0:	ee 1f       	adc	r30, r30
    1ee2:	88 f7       	brcc	.-30     	; 0x1ec6 <__divsf3_pse+0x90>
    1ee4:	e0 95       	com	r30
    1ee6:	08 95       	ret

00001ee8 <__fixsfsi>:
    1ee8:	04 d0       	rcall	.+8      	; 0x1ef2 <__fixunssfsi>
    1eea:	68 94       	set
    1eec:	b1 11       	cpse	r27, r1
    1eee:	b5 c0       	rjmp	.+362    	; 0x205a <__fp_szero>
    1ef0:	08 95       	ret

00001ef2 <__fixunssfsi>:
    1ef2:	98 d0       	rcall	.+304    	; 0x2024 <__fp_splitA>
    1ef4:	88 f0       	brcs	.+34     	; 0x1f18 <__fixunssfsi+0x26>
    1ef6:	9f 57       	subi	r25, 0x7F	; 127
    1ef8:	90 f0       	brcs	.+36     	; 0x1f1e <__fixunssfsi+0x2c>
    1efa:	b9 2f       	mov	r27, r25
    1efc:	99 27       	eor	r25, r25
    1efe:	b7 51       	subi	r27, 0x17	; 23
    1f00:	a0 f0       	brcs	.+40     	; 0x1f2a <__fixunssfsi+0x38>
    1f02:	d1 f0       	breq	.+52     	; 0x1f38 <__fixunssfsi+0x46>
    1f04:	66 0f       	add	r22, r22
    1f06:	77 1f       	adc	r23, r23
    1f08:	88 1f       	adc	r24, r24
    1f0a:	99 1f       	adc	r25, r25
    1f0c:	1a f0       	brmi	.+6      	; 0x1f14 <__fixunssfsi+0x22>
    1f0e:	ba 95       	dec	r27
    1f10:	c9 f7       	brne	.-14     	; 0x1f04 <__fixunssfsi+0x12>
    1f12:	12 c0       	rjmp	.+36     	; 0x1f38 <__fixunssfsi+0x46>
    1f14:	b1 30       	cpi	r27, 0x01	; 1
    1f16:	81 f0       	breq	.+32     	; 0x1f38 <__fixunssfsi+0x46>
    1f18:	9f d0       	rcall	.+318    	; 0x2058 <__fp_zero>
    1f1a:	b1 e0       	ldi	r27, 0x01	; 1
    1f1c:	08 95       	ret
    1f1e:	9c c0       	rjmp	.+312    	; 0x2058 <__fp_zero>
    1f20:	67 2f       	mov	r22, r23
    1f22:	78 2f       	mov	r23, r24
    1f24:	88 27       	eor	r24, r24
    1f26:	b8 5f       	subi	r27, 0xF8	; 248
    1f28:	39 f0       	breq	.+14     	; 0x1f38 <__fixunssfsi+0x46>
    1f2a:	b9 3f       	cpi	r27, 0xF9	; 249
    1f2c:	cc f3       	brlt	.-14     	; 0x1f20 <__fixunssfsi+0x2e>
    1f2e:	86 95       	lsr	r24
    1f30:	77 95       	ror	r23
    1f32:	67 95       	ror	r22
    1f34:	b3 95       	inc	r27
    1f36:	d9 f7       	brne	.-10     	; 0x1f2e <__fixunssfsi+0x3c>
    1f38:	3e f4       	brtc	.+14     	; 0x1f48 <__fixunssfsi+0x56>
    1f3a:	90 95       	com	r25
    1f3c:	80 95       	com	r24
    1f3e:	70 95       	com	r23
    1f40:	61 95       	neg	r22
    1f42:	7f 4f       	sbci	r23, 0xFF	; 255
    1f44:	8f 4f       	sbci	r24, 0xFF	; 255
    1f46:	9f 4f       	sbci	r25, 0xFF	; 255
    1f48:	08 95       	ret

00001f4a <__floatunsisf>:
    1f4a:	e8 94       	clt
    1f4c:	09 c0       	rjmp	.+18     	; 0x1f60 <__floatsisf+0x12>

00001f4e <__floatsisf>:
    1f4e:	97 fb       	bst	r25, 7
    1f50:	3e f4       	brtc	.+14     	; 0x1f60 <__floatsisf+0x12>
    1f52:	90 95       	com	r25
    1f54:	80 95       	com	r24
    1f56:	70 95       	com	r23
    1f58:	61 95       	neg	r22
    1f5a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f5c:	8f 4f       	sbci	r24, 0xFF	; 255
    1f5e:	9f 4f       	sbci	r25, 0xFF	; 255
    1f60:	99 23       	and	r25, r25
    1f62:	a9 f0       	breq	.+42     	; 0x1f8e <__floatsisf+0x40>
    1f64:	f9 2f       	mov	r31, r25
    1f66:	96 e9       	ldi	r25, 0x96	; 150
    1f68:	bb 27       	eor	r27, r27
    1f6a:	93 95       	inc	r25
    1f6c:	f6 95       	lsr	r31
    1f6e:	87 95       	ror	r24
    1f70:	77 95       	ror	r23
    1f72:	67 95       	ror	r22
    1f74:	b7 95       	ror	r27
    1f76:	f1 11       	cpse	r31, r1
    1f78:	f8 cf       	rjmp	.-16     	; 0x1f6a <__floatsisf+0x1c>
    1f7a:	fa f4       	brpl	.+62     	; 0x1fba <__floatsisf+0x6c>
    1f7c:	bb 0f       	add	r27, r27
    1f7e:	11 f4       	brne	.+4      	; 0x1f84 <__floatsisf+0x36>
    1f80:	60 ff       	sbrs	r22, 0
    1f82:	1b c0       	rjmp	.+54     	; 0x1fba <__floatsisf+0x6c>
    1f84:	6f 5f       	subi	r22, 0xFF	; 255
    1f86:	7f 4f       	sbci	r23, 0xFF	; 255
    1f88:	8f 4f       	sbci	r24, 0xFF	; 255
    1f8a:	9f 4f       	sbci	r25, 0xFF	; 255
    1f8c:	16 c0       	rjmp	.+44     	; 0x1fba <__floatsisf+0x6c>
    1f8e:	88 23       	and	r24, r24
    1f90:	11 f0       	breq	.+4      	; 0x1f96 <__floatsisf+0x48>
    1f92:	96 e9       	ldi	r25, 0x96	; 150
    1f94:	11 c0       	rjmp	.+34     	; 0x1fb8 <__floatsisf+0x6a>
    1f96:	77 23       	and	r23, r23
    1f98:	21 f0       	breq	.+8      	; 0x1fa2 <__floatsisf+0x54>
    1f9a:	9e e8       	ldi	r25, 0x8E	; 142
    1f9c:	87 2f       	mov	r24, r23
    1f9e:	76 2f       	mov	r23, r22
    1fa0:	05 c0       	rjmp	.+10     	; 0x1fac <__floatsisf+0x5e>
    1fa2:	66 23       	and	r22, r22
    1fa4:	71 f0       	breq	.+28     	; 0x1fc2 <__floatsisf+0x74>
    1fa6:	96 e8       	ldi	r25, 0x86	; 134
    1fa8:	86 2f       	mov	r24, r22
    1faa:	70 e0       	ldi	r23, 0x00	; 0
    1fac:	60 e0       	ldi	r22, 0x00	; 0
    1fae:	2a f0       	brmi	.+10     	; 0x1fba <__floatsisf+0x6c>
    1fb0:	9a 95       	dec	r25
    1fb2:	66 0f       	add	r22, r22
    1fb4:	77 1f       	adc	r23, r23
    1fb6:	88 1f       	adc	r24, r24
    1fb8:	da f7       	brpl	.-10     	; 0x1fb0 <__floatsisf+0x62>
    1fba:	88 0f       	add	r24, r24
    1fbc:	96 95       	lsr	r25
    1fbe:	87 95       	ror	r24
    1fc0:	97 f9       	bld	r25, 7
    1fc2:	08 95       	ret

00001fc4 <__fp_inf>:
    1fc4:	97 f9       	bld	r25, 7
    1fc6:	9f 67       	ori	r25, 0x7F	; 127
    1fc8:	80 e8       	ldi	r24, 0x80	; 128
    1fca:	70 e0       	ldi	r23, 0x00	; 0
    1fcc:	60 e0       	ldi	r22, 0x00	; 0
    1fce:	08 95       	ret

00001fd0 <__fp_nan>:
    1fd0:	9f ef       	ldi	r25, 0xFF	; 255
    1fd2:	80 ec       	ldi	r24, 0xC0	; 192
    1fd4:	08 95       	ret

00001fd6 <__fp_pscA>:
    1fd6:	00 24       	eor	r0, r0
    1fd8:	0a 94       	dec	r0
    1fda:	16 16       	cp	r1, r22
    1fdc:	17 06       	cpc	r1, r23
    1fde:	18 06       	cpc	r1, r24
    1fe0:	09 06       	cpc	r0, r25
    1fe2:	08 95       	ret

00001fe4 <__fp_pscB>:
    1fe4:	00 24       	eor	r0, r0
    1fe6:	0a 94       	dec	r0
    1fe8:	12 16       	cp	r1, r18
    1fea:	13 06       	cpc	r1, r19
    1fec:	14 06       	cpc	r1, r20
    1fee:	05 06       	cpc	r0, r21
    1ff0:	08 95       	ret

00001ff2 <__fp_round>:
    1ff2:	09 2e       	mov	r0, r25
    1ff4:	03 94       	inc	r0
    1ff6:	00 0c       	add	r0, r0
    1ff8:	11 f4       	brne	.+4      	; 0x1ffe <__fp_round+0xc>
    1ffa:	88 23       	and	r24, r24
    1ffc:	52 f0       	brmi	.+20     	; 0x2012 <__fp_round+0x20>
    1ffe:	bb 0f       	add	r27, r27
    2000:	40 f4       	brcc	.+16     	; 0x2012 <__fp_round+0x20>
    2002:	bf 2b       	or	r27, r31
    2004:	11 f4       	brne	.+4      	; 0x200a <__fp_round+0x18>
    2006:	60 ff       	sbrs	r22, 0
    2008:	04 c0       	rjmp	.+8      	; 0x2012 <__fp_round+0x20>
    200a:	6f 5f       	subi	r22, 0xFF	; 255
    200c:	7f 4f       	sbci	r23, 0xFF	; 255
    200e:	8f 4f       	sbci	r24, 0xFF	; 255
    2010:	9f 4f       	sbci	r25, 0xFF	; 255
    2012:	08 95       	ret

00002014 <__fp_split3>:
    2014:	57 fd       	sbrc	r21, 7
    2016:	90 58       	subi	r25, 0x80	; 128
    2018:	44 0f       	add	r20, r20
    201a:	55 1f       	adc	r21, r21
    201c:	59 f0       	breq	.+22     	; 0x2034 <__fp_splitA+0x10>
    201e:	5f 3f       	cpi	r21, 0xFF	; 255
    2020:	71 f0       	breq	.+28     	; 0x203e <__fp_splitA+0x1a>
    2022:	47 95       	ror	r20

00002024 <__fp_splitA>:
    2024:	88 0f       	add	r24, r24
    2026:	97 fb       	bst	r25, 7
    2028:	99 1f       	adc	r25, r25
    202a:	61 f0       	breq	.+24     	; 0x2044 <__fp_splitA+0x20>
    202c:	9f 3f       	cpi	r25, 0xFF	; 255
    202e:	79 f0       	breq	.+30     	; 0x204e <__fp_splitA+0x2a>
    2030:	87 95       	ror	r24
    2032:	08 95       	ret
    2034:	12 16       	cp	r1, r18
    2036:	13 06       	cpc	r1, r19
    2038:	14 06       	cpc	r1, r20
    203a:	55 1f       	adc	r21, r21
    203c:	f2 cf       	rjmp	.-28     	; 0x2022 <__fp_split3+0xe>
    203e:	46 95       	lsr	r20
    2040:	f1 df       	rcall	.-30     	; 0x2024 <__fp_splitA>
    2042:	08 c0       	rjmp	.+16     	; 0x2054 <__fp_splitA+0x30>
    2044:	16 16       	cp	r1, r22
    2046:	17 06       	cpc	r1, r23
    2048:	18 06       	cpc	r1, r24
    204a:	99 1f       	adc	r25, r25
    204c:	f1 cf       	rjmp	.-30     	; 0x2030 <__fp_splitA+0xc>
    204e:	86 95       	lsr	r24
    2050:	71 05       	cpc	r23, r1
    2052:	61 05       	cpc	r22, r1
    2054:	08 94       	sec
    2056:	08 95       	ret

00002058 <__fp_zero>:
    2058:	e8 94       	clt

0000205a <__fp_szero>:
    205a:	bb 27       	eor	r27, r27
    205c:	66 27       	eor	r22, r22
    205e:	77 27       	eor	r23, r23
    2060:	cb 01       	movw	r24, r22
    2062:	97 f9       	bld	r25, 7
    2064:	08 95       	ret

00002066 <__mulsf3>:
    2066:	0b d0       	rcall	.+22     	; 0x207e <__mulsf3x>
    2068:	c4 cf       	rjmp	.-120    	; 0x1ff2 <__fp_round>
    206a:	b5 df       	rcall	.-150    	; 0x1fd6 <__fp_pscA>
    206c:	28 f0       	brcs	.+10     	; 0x2078 <__mulsf3+0x12>
    206e:	ba df       	rcall	.-140    	; 0x1fe4 <__fp_pscB>
    2070:	18 f0       	brcs	.+6      	; 0x2078 <__mulsf3+0x12>
    2072:	95 23       	and	r25, r21
    2074:	09 f0       	breq	.+2      	; 0x2078 <__mulsf3+0x12>
    2076:	a6 cf       	rjmp	.-180    	; 0x1fc4 <__fp_inf>
    2078:	ab cf       	rjmp	.-170    	; 0x1fd0 <__fp_nan>
    207a:	11 24       	eor	r1, r1
    207c:	ee cf       	rjmp	.-36     	; 0x205a <__fp_szero>

0000207e <__mulsf3x>:
    207e:	ca df       	rcall	.-108    	; 0x2014 <__fp_split3>
    2080:	a0 f3       	brcs	.-24     	; 0x206a <__mulsf3+0x4>

00002082 <__mulsf3_pse>:
    2082:	95 9f       	mul	r25, r21
    2084:	d1 f3       	breq	.-12     	; 0x207a <__mulsf3+0x14>
    2086:	95 0f       	add	r25, r21
    2088:	50 e0       	ldi	r21, 0x00	; 0
    208a:	55 1f       	adc	r21, r21
    208c:	62 9f       	mul	r22, r18
    208e:	f0 01       	movw	r30, r0
    2090:	72 9f       	mul	r23, r18
    2092:	bb 27       	eor	r27, r27
    2094:	f0 0d       	add	r31, r0
    2096:	b1 1d       	adc	r27, r1
    2098:	63 9f       	mul	r22, r19
    209a:	aa 27       	eor	r26, r26
    209c:	f0 0d       	add	r31, r0
    209e:	b1 1d       	adc	r27, r1
    20a0:	aa 1f       	adc	r26, r26
    20a2:	64 9f       	mul	r22, r20
    20a4:	66 27       	eor	r22, r22
    20a6:	b0 0d       	add	r27, r0
    20a8:	a1 1d       	adc	r26, r1
    20aa:	66 1f       	adc	r22, r22
    20ac:	82 9f       	mul	r24, r18
    20ae:	22 27       	eor	r18, r18
    20b0:	b0 0d       	add	r27, r0
    20b2:	a1 1d       	adc	r26, r1
    20b4:	62 1f       	adc	r22, r18
    20b6:	73 9f       	mul	r23, r19
    20b8:	b0 0d       	add	r27, r0
    20ba:	a1 1d       	adc	r26, r1
    20bc:	62 1f       	adc	r22, r18
    20be:	83 9f       	mul	r24, r19
    20c0:	a0 0d       	add	r26, r0
    20c2:	61 1d       	adc	r22, r1
    20c4:	22 1f       	adc	r18, r18
    20c6:	74 9f       	mul	r23, r20
    20c8:	33 27       	eor	r19, r19
    20ca:	a0 0d       	add	r26, r0
    20cc:	61 1d       	adc	r22, r1
    20ce:	23 1f       	adc	r18, r19
    20d0:	84 9f       	mul	r24, r20
    20d2:	60 0d       	add	r22, r0
    20d4:	21 1d       	adc	r18, r1
    20d6:	82 2f       	mov	r24, r18
    20d8:	76 2f       	mov	r23, r22
    20da:	6a 2f       	mov	r22, r26
    20dc:	11 24       	eor	r1, r1
    20de:	9f 57       	subi	r25, 0x7F	; 127
    20e0:	50 40       	sbci	r21, 0x00	; 0
    20e2:	8a f0       	brmi	.+34     	; 0x2106 <__mulsf3_pse+0x84>
    20e4:	e1 f0       	breq	.+56     	; 0x211e <__mulsf3_pse+0x9c>
    20e6:	88 23       	and	r24, r24
    20e8:	4a f0       	brmi	.+18     	; 0x20fc <__mulsf3_pse+0x7a>
    20ea:	ee 0f       	add	r30, r30
    20ec:	ff 1f       	adc	r31, r31
    20ee:	bb 1f       	adc	r27, r27
    20f0:	66 1f       	adc	r22, r22
    20f2:	77 1f       	adc	r23, r23
    20f4:	88 1f       	adc	r24, r24
    20f6:	91 50       	subi	r25, 0x01	; 1
    20f8:	50 40       	sbci	r21, 0x00	; 0
    20fa:	a9 f7       	brne	.-22     	; 0x20e6 <__mulsf3_pse+0x64>
    20fc:	9e 3f       	cpi	r25, 0xFE	; 254
    20fe:	51 05       	cpc	r21, r1
    2100:	70 f0       	brcs	.+28     	; 0x211e <__mulsf3_pse+0x9c>
    2102:	60 cf       	rjmp	.-320    	; 0x1fc4 <__fp_inf>
    2104:	aa cf       	rjmp	.-172    	; 0x205a <__fp_szero>
    2106:	5f 3f       	cpi	r21, 0xFF	; 255
    2108:	ec f3       	brlt	.-6      	; 0x2104 <__mulsf3_pse+0x82>
    210a:	98 3e       	cpi	r25, 0xE8	; 232
    210c:	dc f3       	brlt	.-10     	; 0x2104 <__mulsf3_pse+0x82>
    210e:	86 95       	lsr	r24
    2110:	77 95       	ror	r23
    2112:	67 95       	ror	r22
    2114:	b7 95       	ror	r27
    2116:	f7 95       	ror	r31
    2118:	e7 95       	ror	r30
    211a:	9f 5f       	subi	r25, 0xFF	; 255
    211c:	c1 f7       	brne	.-16     	; 0x210e <__mulsf3_pse+0x8c>
    211e:	fe 2b       	or	r31, r30
    2120:	88 0f       	add	r24, r24
    2122:	91 1d       	adc	r25, r1
    2124:	96 95       	lsr	r25
    2126:	87 95       	ror	r24
    2128:	97 f9       	bld	r25, 7
    212a:	08 95       	ret

0000212c <__cmpsf2>:
    212c:	03 d0       	rcall	.+6      	; 0x2134 <__fp_cmp>
    212e:	08 f4       	brcc	.+2      	; 0x2132 <__cmpsf2+0x6>
    2130:	81 e0       	ldi	r24, 0x01	; 1
    2132:	08 95       	ret

00002134 <__fp_cmp>:
    2134:	99 0f       	add	r25, r25
    2136:	00 08       	sbc	r0, r0
    2138:	55 0f       	add	r21, r21
    213a:	aa 0b       	sbc	r26, r26
    213c:	e0 e8       	ldi	r30, 0x80	; 128
    213e:	fe ef       	ldi	r31, 0xFE	; 254
    2140:	16 16       	cp	r1, r22
    2142:	17 06       	cpc	r1, r23
    2144:	e8 07       	cpc	r30, r24
    2146:	f9 07       	cpc	r31, r25
    2148:	c0 f0       	brcs	.+48     	; 0x217a <__fp_cmp+0x46>
    214a:	12 16       	cp	r1, r18
    214c:	13 06       	cpc	r1, r19
    214e:	e4 07       	cpc	r30, r20
    2150:	f5 07       	cpc	r31, r21
    2152:	98 f0       	brcs	.+38     	; 0x217a <__fp_cmp+0x46>
    2154:	62 1b       	sub	r22, r18
    2156:	73 0b       	sbc	r23, r19
    2158:	84 0b       	sbc	r24, r20
    215a:	95 0b       	sbc	r25, r21
    215c:	39 f4       	brne	.+14     	; 0x216c <__fp_cmp+0x38>
    215e:	0a 26       	eor	r0, r26
    2160:	61 f0       	breq	.+24     	; 0x217a <__fp_cmp+0x46>
    2162:	23 2b       	or	r18, r19
    2164:	24 2b       	or	r18, r20
    2166:	25 2b       	or	r18, r21
    2168:	21 f4       	brne	.+8      	; 0x2172 <__fp_cmp+0x3e>
    216a:	08 95       	ret
    216c:	0a 26       	eor	r0, r26
    216e:	09 f4       	brne	.+2      	; 0x2172 <__fp_cmp+0x3e>
    2170:	a1 40       	sbci	r26, 0x01	; 1
    2172:	a6 95       	lsr	r26
    2174:	8f ef       	ldi	r24, 0xFF	; 255
    2176:	81 1d       	adc	r24, r1
    2178:	81 1d       	adc	r24, r1
    217a:	08 95       	ret

0000217c <__gesf2>:
    217c:	db df       	rcall	.-74     	; 0x2134 <__fp_cmp>
    217e:	08 f4       	brcc	.+2      	; 0x2182 <__gesf2+0x6>
    2180:	8f ef       	ldi	r24, 0xFF	; 255
    2182:	08 95       	ret

00002184 <__divmodhi4>:
    2184:	97 fb       	bst	r25, 7
    2186:	07 2e       	mov	r0, r23
    2188:	16 f4       	brtc	.+4      	; 0x218e <__divmodhi4+0xa>
    218a:	00 94       	com	r0
    218c:	06 d0       	rcall	.+12     	; 0x219a <__divmodhi4_neg1>
    218e:	77 fd       	sbrc	r23, 7
    2190:	08 d0       	rcall	.+16     	; 0x21a2 <__divmodhi4_neg2>
    2192:	0b d0       	rcall	.+22     	; 0x21aa <__udivmodhi4>
    2194:	07 fc       	sbrc	r0, 7
    2196:	05 d0       	rcall	.+10     	; 0x21a2 <__divmodhi4_neg2>
    2198:	3e f4       	brtc	.+14     	; 0x21a8 <__divmodhi4_exit>

0000219a <__divmodhi4_neg1>:
    219a:	90 95       	com	r25
    219c:	81 95       	neg	r24
    219e:	9f 4f       	sbci	r25, 0xFF	; 255
    21a0:	08 95       	ret

000021a2 <__divmodhi4_neg2>:
    21a2:	70 95       	com	r23
    21a4:	61 95       	neg	r22
    21a6:	7f 4f       	sbci	r23, 0xFF	; 255

000021a8 <__divmodhi4_exit>:
    21a8:	08 95       	ret

000021aa <__udivmodhi4>:
    21aa:	aa 1b       	sub	r26, r26
    21ac:	bb 1b       	sub	r27, r27
    21ae:	51 e1       	ldi	r21, 0x11	; 17
    21b0:	07 c0       	rjmp	.+14     	; 0x21c0 <__udivmodhi4_ep>

000021b2 <__udivmodhi4_loop>:
    21b2:	aa 1f       	adc	r26, r26
    21b4:	bb 1f       	adc	r27, r27
    21b6:	a6 17       	cp	r26, r22
    21b8:	b7 07       	cpc	r27, r23
    21ba:	10 f0       	brcs	.+4      	; 0x21c0 <__udivmodhi4_ep>
    21bc:	a6 1b       	sub	r26, r22
    21be:	b7 0b       	sbc	r27, r23

000021c0 <__udivmodhi4_ep>:
    21c0:	88 1f       	adc	r24, r24
    21c2:	99 1f       	adc	r25, r25
    21c4:	5a 95       	dec	r21
    21c6:	a9 f7       	brne	.-22     	; 0x21b2 <__udivmodhi4_loop>
    21c8:	80 95       	com	r24
    21ca:	90 95       	com	r25
    21cc:	bc 01       	movw	r22, r24
    21ce:	cd 01       	movw	r24, r26
    21d0:	08 95       	ret

000021d2 <atoi>:
    21d2:	fc 01       	movw	r30, r24
    21d4:	88 27       	eor	r24, r24
    21d6:	99 27       	eor	r25, r25
    21d8:	e8 94       	clt
    21da:	21 91       	ld	r18, Z+
    21dc:	20 32       	cpi	r18, 0x20	; 32
    21de:	e9 f3       	breq	.-6      	; 0x21da <atoi+0x8>
    21e0:	29 30       	cpi	r18, 0x09	; 9
    21e2:	10 f0       	brcs	.+4      	; 0x21e8 <atoi+0x16>
    21e4:	2e 30       	cpi	r18, 0x0E	; 14
    21e6:	c8 f3       	brcs	.-14     	; 0x21da <atoi+0x8>
    21e8:	2b 32       	cpi	r18, 0x2B	; 43
    21ea:	39 f0       	breq	.+14     	; 0x21fa <atoi+0x28>
    21ec:	2d 32       	cpi	r18, 0x2D	; 45
    21ee:	31 f4       	brne	.+12     	; 0x21fc <atoi+0x2a>
    21f0:	68 94       	set
    21f2:	03 c0       	rjmp	.+6      	; 0x21fa <atoi+0x28>
    21f4:	35 d0       	rcall	.+106    	; 0x2260 <__mulhi_const_10>
    21f6:	82 0f       	add	r24, r18
    21f8:	91 1d       	adc	r25, r1
    21fa:	21 91       	ld	r18, Z+
    21fc:	20 53       	subi	r18, 0x30	; 48
    21fe:	2a 30       	cpi	r18, 0x0A	; 10
    2200:	c8 f3       	brcs	.-14     	; 0x21f4 <atoi+0x22>
    2202:	1e f4       	brtc	.+6      	; 0x220a <__stack+0xb>
    2204:	90 95       	com	r25
    2206:	81 95       	neg	r24
    2208:	9f 4f       	sbci	r25, 0xFF	; 255
    220a:	08 95       	ret

0000220c <strtok>:
    220c:	4c ef       	ldi	r20, 0xFC	; 252
    220e:	50 e1       	ldi	r21, 0x10	; 16
    2210:	00 c0       	rjmp	.+0      	; 0x2212 <strtok_r>

00002212 <strtok_r>:
    2212:	fa 01       	movw	r30, r20
    2214:	a1 91       	ld	r26, Z+
    2216:	b0 81       	ld	r27, Z
    2218:	00 97       	sbiw	r24, 0x00	; 0
    221a:	19 f4       	brne	.+6      	; 0x2222 <strtok_r+0x10>
    221c:	10 97       	sbiw	r26, 0x00	; 0
    221e:	e1 f0       	breq	.+56     	; 0x2258 <strtok_r+0x46>
    2220:	cd 01       	movw	r24, r26
    2222:	dc 01       	movw	r26, r24
    2224:	cd 01       	movw	r24, r26
    2226:	0d 90       	ld	r0, X+
    2228:	00 20       	and	r0, r0
    222a:	11 f4       	brne	.+4      	; 0x2230 <strtok_r+0x1e>
    222c:	c0 01       	movw	r24, r0
    222e:	13 c0       	rjmp	.+38     	; 0x2256 <strtok_r+0x44>
    2230:	fb 01       	movw	r30, r22
    2232:	21 91       	ld	r18, Z+
    2234:	22 23       	and	r18, r18
    2236:	19 f0       	breq	.+6      	; 0x223e <strtok_r+0x2c>
    2238:	20 15       	cp	r18, r0
    223a:	d9 f7       	brne	.-10     	; 0x2232 <strtok_r+0x20>
    223c:	f3 cf       	rjmp	.-26     	; 0x2224 <strtok_r+0x12>
    223e:	fb 01       	movw	r30, r22
    2240:	21 91       	ld	r18, Z+
    2242:	20 15       	cp	r18, r0
    2244:	19 f4       	brne	.+6      	; 0x224c <strtok_r+0x3a>
    2246:	1e 92       	st	-X, r1
    2248:	11 96       	adiw	r26, 0x01	; 1
    224a:	06 c0       	rjmp	.+12     	; 0x2258 <strtok_r+0x46>
    224c:	22 23       	and	r18, r18
    224e:	c1 f7       	brne	.-16     	; 0x2240 <strtok_r+0x2e>
    2250:	0d 90       	ld	r0, X+
    2252:	00 20       	and	r0, r0
    2254:	a1 f7       	brne	.-24     	; 0x223e <strtok_r+0x2c>
    2256:	d0 01       	movw	r26, r0
    2258:	fa 01       	movw	r30, r20
    225a:	a1 93       	st	Z+, r26
    225c:	b0 83       	st	Z, r27
    225e:	08 95       	ret

00002260 <__mulhi_const_10>:
    2260:	7a e0       	ldi	r23, 0x0A	; 10
    2262:	97 9f       	mul	r25, r23
    2264:	90 2d       	mov	r25, r0
    2266:	87 9f       	mul	r24, r23
    2268:	80 2d       	mov	r24, r0
    226a:	91 0d       	add	r25, r1
    226c:	11 24       	eor	r1, r1
    226e:	08 95       	ret

00002270 <fdevopen>:
    2270:	0f 93       	push	r16
    2272:	1f 93       	push	r17
    2274:	cf 93       	push	r28
    2276:	df 93       	push	r29
    2278:	ec 01       	movw	r28, r24
    227a:	8b 01       	movw	r16, r22
    227c:	00 97       	sbiw	r24, 0x00	; 0
    227e:	31 f4       	brne	.+12     	; 0x228c <fdevopen+0x1c>
    2280:	61 15       	cp	r22, r1
    2282:	71 05       	cpc	r23, r1
    2284:	19 f4       	brne	.+6      	; 0x228c <fdevopen+0x1c>
    2286:	80 e0       	ldi	r24, 0x00	; 0
    2288:	90 e0       	ldi	r25, 0x00	; 0
    228a:	37 c0       	rjmp	.+110    	; 0x22fa <fdevopen+0x8a>
    228c:	6e e0       	ldi	r22, 0x0E	; 14
    228e:	70 e0       	ldi	r23, 0x00	; 0
    2290:	81 e0       	ldi	r24, 0x01	; 1
    2292:	90 e0       	ldi	r25, 0x00	; 0
    2294:	a1 d2       	rcall	.+1346   	; 0x27d8 <calloc>
    2296:	fc 01       	movw	r30, r24
    2298:	00 97       	sbiw	r24, 0x00	; 0
    229a:	a9 f3       	breq	.-22     	; 0x2286 <fdevopen+0x16>
    229c:	80 e8       	ldi	r24, 0x80	; 128
    229e:	83 83       	std	Z+3, r24	; 0x03
    22a0:	01 15       	cp	r16, r1
    22a2:	11 05       	cpc	r17, r1
    22a4:	71 f0       	breq	.+28     	; 0x22c2 <fdevopen+0x52>
    22a6:	13 87       	std	Z+11, r17	; 0x0b
    22a8:	02 87       	std	Z+10, r16	; 0x0a
    22aa:	81 e8       	ldi	r24, 0x81	; 129
    22ac:	83 83       	std	Z+3, r24	; 0x03
    22ae:	80 91 44 12 	lds	r24, 0x1244
    22b2:	90 91 45 12 	lds	r25, 0x1245
    22b6:	89 2b       	or	r24, r25
    22b8:	21 f4       	brne	.+8      	; 0x22c2 <fdevopen+0x52>
    22ba:	f0 93 45 12 	sts	0x1245, r31
    22be:	e0 93 44 12 	sts	0x1244, r30
    22c2:	20 97       	sbiw	r28, 0x00	; 0
    22c4:	c9 f0       	breq	.+50     	; 0x22f8 <fdevopen+0x88>
    22c6:	d1 87       	std	Z+9, r29	; 0x09
    22c8:	c0 87       	std	Z+8, r28	; 0x08
    22ca:	83 81       	ldd	r24, Z+3	; 0x03
    22cc:	82 60       	ori	r24, 0x02	; 2
    22ce:	83 83       	std	Z+3, r24	; 0x03
    22d0:	80 91 46 12 	lds	r24, 0x1246
    22d4:	90 91 47 12 	lds	r25, 0x1247
    22d8:	89 2b       	or	r24, r25
    22da:	71 f4       	brne	.+28     	; 0x22f8 <fdevopen+0x88>
    22dc:	f0 93 47 12 	sts	0x1247, r31
    22e0:	e0 93 46 12 	sts	0x1246, r30
    22e4:	80 91 48 12 	lds	r24, 0x1248
    22e8:	90 91 49 12 	lds	r25, 0x1249
    22ec:	89 2b       	or	r24, r25
    22ee:	21 f4       	brne	.+8      	; 0x22f8 <fdevopen+0x88>
    22f0:	f0 93 49 12 	sts	0x1249, r31
    22f4:	e0 93 48 12 	sts	0x1248, r30
    22f8:	cf 01       	movw	r24, r30
    22fa:	df 91       	pop	r29
    22fc:	cf 91       	pop	r28
    22fe:	1f 91       	pop	r17
    2300:	0f 91       	pop	r16
    2302:	08 95       	ret

00002304 <fgetc>:
    2304:	cf 93       	push	r28
    2306:	df 93       	push	r29
    2308:	ec 01       	movw	r28, r24
    230a:	2b 81       	ldd	r18, Y+3	; 0x03
    230c:	20 ff       	sbrs	r18, 0
    230e:	33 c0       	rjmp	.+102    	; 0x2376 <fgetc+0x72>
    2310:	26 ff       	sbrs	r18, 6
    2312:	0a c0       	rjmp	.+20     	; 0x2328 <fgetc+0x24>
    2314:	2f 7b       	andi	r18, 0xBF	; 191
    2316:	2b 83       	std	Y+3, r18	; 0x03
    2318:	8e 81       	ldd	r24, Y+6	; 0x06
    231a:	9f 81       	ldd	r25, Y+7	; 0x07
    231c:	01 96       	adiw	r24, 0x01	; 1
    231e:	9f 83       	std	Y+7, r25	; 0x07
    2320:	8e 83       	std	Y+6, r24	; 0x06
    2322:	8a 81       	ldd	r24, Y+2	; 0x02
    2324:	90 e0       	ldi	r25, 0x00	; 0
    2326:	29 c0       	rjmp	.+82     	; 0x237a <fgetc+0x76>
    2328:	22 ff       	sbrs	r18, 2
    232a:	0f c0       	rjmp	.+30     	; 0x234a <fgetc+0x46>
    232c:	e8 81       	ld	r30, Y
    232e:	f9 81       	ldd	r31, Y+1	; 0x01
    2330:	80 81       	ld	r24, Z
    2332:	99 27       	eor	r25, r25
    2334:	87 fd       	sbrc	r24, 7
    2336:	90 95       	com	r25
    2338:	00 97       	sbiw	r24, 0x00	; 0
    233a:	19 f4       	brne	.+6      	; 0x2342 <fgetc+0x3e>
    233c:	20 62       	ori	r18, 0x20	; 32
    233e:	2b 83       	std	Y+3, r18	; 0x03
    2340:	1a c0       	rjmp	.+52     	; 0x2376 <fgetc+0x72>
    2342:	31 96       	adiw	r30, 0x01	; 1
    2344:	f9 83       	std	Y+1, r31	; 0x01
    2346:	e8 83       	st	Y, r30
    2348:	0e c0       	rjmp	.+28     	; 0x2366 <fgetc+0x62>
    234a:	ea 85       	ldd	r30, Y+10	; 0x0a
    234c:	fb 85       	ldd	r31, Y+11	; 0x0b
    234e:	19 95       	eicall
    2350:	97 ff       	sbrs	r25, 7
    2352:	09 c0       	rjmp	.+18     	; 0x2366 <fgetc+0x62>
    2354:	2b 81       	ldd	r18, Y+3	; 0x03
    2356:	01 96       	adiw	r24, 0x01	; 1
    2358:	11 f4       	brne	.+4      	; 0x235e <fgetc+0x5a>
    235a:	80 e1       	ldi	r24, 0x10	; 16
    235c:	01 c0       	rjmp	.+2      	; 0x2360 <fgetc+0x5c>
    235e:	80 e2       	ldi	r24, 0x20	; 32
    2360:	82 2b       	or	r24, r18
    2362:	8b 83       	std	Y+3, r24	; 0x03
    2364:	08 c0       	rjmp	.+16     	; 0x2376 <fgetc+0x72>
    2366:	2e 81       	ldd	r18, Y+6	; 0x06
    2368:	3f 81       	ldd	r19, Y+7	; 0x07
    236a:	2f 5f       	subi	r18, 0xFF	; 255
    236c:	3f 4f       	sbci	r19, 0xFF	; 255
    236e:	3f 83       	std	Y+7, r19	; 0x07
    2370:	2e 83       	std	Y+6, r18	; 0x06
    2372:	99 27       	eor	r25, r25
    2374:	02 c0       	rjmp	.+4      	; 0x237a <fgetc+0x76>
    2376:	8f ef       	ldi	r24, 0xFF	; 255
    2378:	9f ef       	ldi	r25, 0xFF	; 255
    237a:	df 91       	pop	r29
    237c:	cf 91       	pop	r28
    237e:	08 95       	ret

00002380 <printf>:
    2380:	cf 93       	push	r28
    2382:	df 93       	push	r29
    2384:	cd b7       	in	r28, 0x3d	; 61
    2386:	de b7       	in	r29, 0x3e	; 62
    2388:	fe 01       	movw	r30, r28
    238a:	36 96       	adiw	r30, 0x06	; 6
    238c:	61 91       	ld	r22, Z+
    238e:	71 91       	ld	r23, Z+
    2390:	af 01       	movw	r20, r30
    2392:	80 91 46 12 	lds	r24, 0x1246
    2396:	90 91 47 12 	lds	r25, 0x1247
    239a:	30 d0       	rcall	.+96     	; 0x23fc <vfprintf>
    239c:	df 91       	pop	r29
    239e:	cf 91       	pop	r28
    23a0:	08 95       	ret

000023a2 <puts>:
    23a2:	0f 93       	push	r16
    23a4:	1f 93       	push	r17
    23a6:	cf 93       	push	r28
    23a8:	df 93       	push	r29
    23aa:	e0 91 46 12 	lds	r30, 0x1246
    23ae:	f0 91 47 12 	lds	r31, 0x1247
    23b2:	23 81       	ldd	r18, Z+3	; 0x03
    23b4:	21 ff       	sbrs	r18, 1
    23b6:	1b c0       	rjmp	.+54     	; 0x23ee <puts+0x4c>
    23b8:	ec 01       	movw	r28, r24
    23ba:	00 e0       	ldi	r16, 0x00	; 0
    23bc:	10 e0       	ldi	r17, 0x00	; 0
    23be:	89 91       	ld	r24, Y+
    23c0:	60 91 46 12 	lds	r22, 0x1246
    23c4:	70 91 47 12 	lds	r23, 0x1247
    23c8:	db 01       	movw	r26, r22
    23ca:	18 96       	adiw	r26, 0x08	; 8
    23cc:	ed 91       	ld	r30, X+
    23ce:	fc 91       	ld	r31, X
    23d0:	19 97       	sbiw	r26, 0x09	; 9
    23d2:	88 23       	and	r24, r24
    23d4:	31 f0       	breq	.+12     	; 0x23e2 <puts+0x40>
    23d6:	19 95       	eicall
    23d8:	89 2b       	or	r24, r25
    23da:	89 f3       	breq	.-30     	; 0x23be <puts+0x1c>
    23dc:	0f ef       	ldi	r16, 0xFF	; 255
    23de:	1f ef       	ldi	r17, 0xFF	; 255
    23e0:	ee cf       	rjmp	.-36     	; 0x23be <puts+0x1c>
    23e2:	8a e0       	ldi	r24, 0x0A	; 10
    23e4:	19 95       	eicall
    23e6:	89 2b       	or	r24, r25
    23e8:	11 f4       	brne	.+4      	; 0x23ee <puts+0x4c>
    23ea:	c8 01       	movw	r24, r16
    23ec:	02 c0       	rjmp	.+4      	; 0x23f2 <puts+0x50>
    23ee:	8f ef       	ldi	r24, 0xFF	; 255
    23f0:	9f ef       	ldi	r25, 0xFF	; 255
    23f2:	df 91       	pop	r29
    23f4:	cf 91       	pop	r28
    23f6:	1f 91       	pop	r17
    23f8:	0f 91       	pop	r16
    23fa:	08 95       	ret

000023fc <vfprintf>:
    23fc:	2f 92       	push	r2
    23fe:	3f 92       	push	r3
    2400:	4f 92       	push	r4
    2402:	5f 92       	push	r5
    2404:	6f 92       	push	r6
    2406:	7f 92       	push	r7
    2408:	8f 92       	push	r8
    240a:	9f 92       	push	r9
    240c:	af 92       	push	r10
    240e:	bf 92       	push	r11
    2410:	cf 92       	push	r12
    2412:	df 92       	push	r13
    2414:	ef 92       	push	r14
    2416:	ff 92       	push	r15
    2418:	0f 93       	push	r16
    241a:	1f 93       	push	r17
    241c:	cf 93       	push	r28
    241e:	df 93       	push	r29
    2420:	cd b7       	in	r28, 0x3d	; 61
    2422:	de b7       	in	r29, 0x3e	; 62
    2424:	2c 97       	sbiw	r28, 0x0c	; 12
    2426:	0f b6       	in	r0, 0x3f	; 63
    2428:	f8 94       	cli
    242a:	de bf       	out	0x3e, r29	; 62
    242c:	0f be       	out	0x3f, r0	; 63
    242e:	cd bf       	out	0x3d, r28	; 61
    2430:	7c 01       	movw	r14, r24
    2432:	6b 01       	movw	r12, r22
    2434:	8a 01       	movw	r16, r20
    2436:	fc 01       	movw	r30, r24
    2438:	17 82       	std	Z+7, r1	; 0x07
    243a:	16 82       	std	Z+6, r1	; 0x06
    243c:	83 81       	ldd	r24, Z+3	; 0x03
    243e:	81 ff       	sbrs	r24, 1
    2440:	b0 c1       	rjmp	.+864    	; 0x27a2 <vfprintf+0x3a6>
    2442:	ce 01       	movw	r24, r28
    2444:	01 96       	adiw	r24, 0x01	; 1
    2446:	4c 01       	movw	r8, r24
    2448:	f7 01       	movw	r30, r14
    244a:	93 81       	ldd	r25, Z+3	; 0x03
    244c:	f6 01       	movw	r30, r12
    244e:	93 fd       	sbrc	r25, 3
    2450:	85 91       	lpm	r24, Z+
    2452:	93 ff       	sbrs	r25, 3
    2454:	81 91       	ld	r24, Z+
    2456:	6f 01       	movw	r12, r30
    2458:	88 23       	and	r24, r24
    245a:	09 f4       	brne	.+2      	; 0x245e <vfprintf+0x62>
    245c:	9e c1       	rjmp	.+828    	; 0x279a <vfprintf+0x39e>
    245e:	85 32       	cpi	r24, 0x25	; 37
    2460:	39 f4       	brne	.+14     	; 0x2470 <vfprintf+0x74>
    2462:	93 fd       	sbrc	r25, 3
    2464:	85 91       	lpm	r24, Z+
    2466:	93 ff       	sbrs	r25, 3
    2468:	81 91       	ld	r24, Z+
    246a:	6f 01       	movw	r12, r30
    246c:	85 32       	cpi	r24, 0x25	; 37
    246e:	21 f4       	brne	.+8      	; 0x2478 <vfprintf+0x7c>
    2470:	b7 01       	movw	r22, r14
    2472:	90 e0       	ldi	r25, 0x00	; 0
    2474:	0f d3       	rcall	.+1566   	; 0x2a94 <fputc>
    2476:	e8 cf       	rjmp	.-48     	; 0x2448 <vfprintf+0x4c>
    2478:	51 2c       	mov	r5, r1
    247a:	31 2c       	mov	r3, r1
    247c:	20 e0       	ldi	r18, 0x00	; 0
    247e:	20 32       	cpi	r18, 0x20	; 32
    2480:	a0 f4       	brcc	.+40     	; 0x24aa <vfprintf+0xae>
    2482:	8b 32       	cpi	r24, 0x2B	; 43
    2484:	69 f0       	breq	.+26     	; 0x24a0 <vfprintf+0xa4>
    2486:	30 f4       	brcc	.+12     	; 0x2494 <vfprintf+0x98>
    2488:	80 32       	cpi	r24, 0x20	; 32
    248a:	59 f0       	breq	.+22     	; 0x24a2 <vfprintf+0xa6>
    248c:	83 32       	cpi	r24, 0x23	; 35
    248e:	69 f4       	brne	.+26     	; 0x24aa <vfprintf+0xae>
    2490:	20 61       	ori	r18, 0x10	; 16
    2492:	2c c0       	rjmp	.+88     	; 0x24ec <vfprintf+0xf0>
    2494:	8d 32       	cpi	r24, 0x2D	; 45
    2496:	39 f0       	breq	.+14     	; 0x24a6 <vfprintf+0xaa>
    2498:	80 33       	cpi	r24, 0x30	; 48
    249a:	39 f4       	brne	.+14     	; 0x24aa <vfprintf+0xae>
    249c:	21 60       	ori	r18, 0x01	; 1
    249e:	26 c0       	rjmp	.+76     	; 0x24ec <vfprintf+0xf0>
    24a0:	22 60       	ori	r18, 0x02	; 2
    24a2:	24 60       	ori	r18, 0x04	; 4
    24a4:	23 c0       	rjmp	.+70     	; 0x24ec <vfprintf+0xf0>
    24a6:	28 60       	ori	r18, 0x08	; 8
    24a8:	21 c0       	rjmp	.+66     	; 0x24ec <vfprintf+0xf0>
    24aa:	27 fd       	sbrc	r18, 7
    24ac:	27 c0       	rjmp	.+78     	; 0x24fc <vfprintf+0x100>
    24ae:	30 ed       	ldi	r19, 0xD0	; 208
    24b0:	38 0f       	add	r19, r24
    24b2:	3a 30       	cpi	r19, 0x0A	; 10
    24b4:	78 f4       	brcc	.+30     	; 0x24d4 <vfprintf+0xd8>
    24b6:	26 ff       	sbrs	r18, 6
    24b8:	06 c0       	rjmp	.+12     	; 0x24c6 <vfprintf+0xca>
    24ba:	fa e0       	ldi	r31, 0x0A	; 10
    24bc:	5f 9e       	mul	r5, r31
    24be:	30 0d       	add	r19, r0
    24c0:	11 24       	eor	r1, r1
    24c2:	53 2e       	mov	r5, r19
    24c4:	13 c0       	rjmp	.+38     	; 0x24ec <vfprintf+0xf0>
    24c6:	8a e0       	ldi	r24, 0x0A	; 10
    24c8:	38 9e       	mul	r3, r24
    24ca:	30 0d       	add	r19, r0
    24cc:	11 24       	eor	r1, r1
    24ce:	33 2e       	mov	r3, r19
    24d0:	20 62       	ori	r18, 0x20	; 32
    24d2:	0c c0       	rjmp	.+24     	; 0x24ec <vfprintf+0xf0>
    24d4:	8e 32       	cpi	r24, 0x2E	; 46
    24d6:	21 f4       	brne	.+8      	; 0x24e0 <vfprintf+0xe4>
    24d8:	26 fd       	sbrc	r18, 6
    24da:	5f c1       	rjmp	.+702    	; 0x279a <vfprintf+0x39e>
    24dc:	20 64       	ori	r18, 0x40	; 64
    24de:	06 c0       	rjmp	.+12     	; 0x24ec <vfprintf+0xf0>
    24e0:	8c 36       	cpi	r24, 0x6C	; 108
    24e2:	11 f4       	brne	.+4      	; 0x24e8 <vfprintf+0xec>
    24e4:	20 68       	ori	r18, 0x80	; 128
    24e6:	02 c0       	rjmp	.+4      	; 0x24ec <vfprintf+0xf0>
    24e8:	88 36       	cpi	r24, 0x68	; 104
    24ea:	41 f4       	brne	.+16     	; 0x24fc <vfprintf+0x100>
    24ec:	f6 01       	movw	r30, r12
    24ee:	93 fd       	sbrc	r25, 3
    24f0:	85 91       	lpm	r24, Z+
    24f2:	93 ff       	sbrs	r25, 3
    24f4:	81 91       	ld	r24, Z+
    24f6:	6f 01       	movw	r12, r30
    24f8:	81 11       	cpse	r24, r1
    24fa:	c1 cf       	rjmp	.-126    	; 0x247e <vfprintf+0x82>
    24fc:	98 2f       	mov	r25, r24
    24fe:	9f 7d       	andi	r25, 0xDF	; 223
    2500:	95 54       	subi	r25, 0x45	; 69
    2502:	93 30       	cpi	r25, 0x03	; 3
    2504:	28 f4       	brcc	.+10     	; 0x2510 <vfprintf+0x114>
    2506:	0c 5f       	subi	r16, 0xFC	; 252
    2508:	1f 4f       	sbci	r17, 0xFF	; 255
    250a:	ff e3       	ldi	r31, 0x3F	; 63
    250c:	f9 83       	std	Y+1, r31	; 0x01
    250e:	0d c0       	rjmp	.+26     	; 0x252a <vfprintf+0x12e>
    2510:	83 36       	cpi	r24, 0x63	; 99
    2512:	31 f0       	breq	.+12     	; 0x2520 <vfprintf+0x124>
    2514:	83 37       	cpi	r24, 0x73	; 115
    2516:	71 f0       	breq	.+28     	; 0x2534 <vfprintf+0x138>
    2518:	83 35       	cpi	r24, 0x53	; 83
    251a:	09 f0       	breq	.+2      	; 0x251e <vfprintf+0x122>
    251c:	57 c0       	rjmp	.+174    	; 0x25cc <vfprintf+0x1d0>
    251e:	21 c0       	rjmp	.+66     	; 0x2562 <vfprintf+0x166>
    2520:	f8 01       	movw	r30, r16
    2522:	80 81       	ld	r24, Z
    2524:	89 83       	std	Y+1, r24	; 0x01
    2526:	0e 5f       	subi	r16, 0xFE	; 254
    2528:	1f 4f       	sbci	r17, 0xFF	; 255
    252a:	44 24       	eor	r4, r4
    252c:	43 94       	inc	r4
    252e:	51 2c       	mov	r5, r1
    2530:	54 01       	movw	r10, r8
    2532:	14 c0       	rjmp	.+40     	; 0x255c <vfprintf+0x160>
    2534:	38 01       	movw	r6, r16
    2536:	f2 e0       	ldi	r31, 0x02	; 2
    2538:	6f 0e       	add	r6, r31
    253a:	71 1c       	adc	r7, r1
    253c:	f8 01       	movw	r30, r16
    253e:	a0 80       	ld	r10, Z
    2540:	b1 80       	ldd	r11, Z+1	; 0x01
    2542:	26 ff       	sbrs	r18, 6
    2544:	03 c0       	rjmp	.+6      	; 0x254c <vfprintf+0x150>
    2546:	65 2d       	mov	r22, r5
    2548:	70 e0       	ldi	r23, 0x00	; 0
    254a:	02 c0       	rjmp	.+4      	; 0x2550 <vfprintf+0x154>
    254c:	6f ef       	ldi	r22, 0xFF	; 255
    254e:	7f ef       	ldi	r23, 0xFF	; 255
    2550:	c5 01       	movw	r24, r10
    2552:	2c 87       	std	Y+12, r18	; 0x0c
    2554:	94 d2       	rcall	.+1320   	; 0x2a7e <strnlen>
    2556:	2c 01       	movw	r4, r24
    2558:	83 01       	movw	r16, r6
    255a:	2c 85       	ldd	r18, Y+12	; 0x0c
    255c:	2f 77       	andi	r18, 0x7F	; 127
    255e:	22 2e       	mov	r2, r18
    2560:	16 c0       	rjmp	.+44     	; 0x258e <vfprintf+0x192>
    2562:	38 01       	movw	r6, r16
    2564:	f2 e0       	ldi	r31, 0x02	; 2
    2566:	6f 0e       	add	r6, r31
    2568:	71 1c       	adc	r7, r1
    256a:	f8 01       	movw	r30, r16
    256c:	a0 80       	ld	r10, Z
    256e:	b1 80       	ldd	r11, Z+1	; 0x01
    2570:	26 ff       	sbrs	r18, 6
    2572:	03 c0       	rjmp	.+6      	; 0x257a <vfprintf+0x17e>
    2574:	65 2d       	mov	r22, r5
    2576:	70 e0       	ldi	r23, 0x00	; 0
    2578:	02 c0       	rjmp	.+4      	; 0x257e <vfprintf+0x182>
    257a:	6f ef       	ldi	r22, 0xFF	; 255
    257c:	7f ef       	ldi	r23, 0xFF	; 255
    257e:	c5 01       	movw	r24, r10
    2580:	2c 87       	std	Y+12, r18	; 0x0c
    2582:	6b d2       	rcall	.+1238   	; 0x2a5a <strnlen_P>
    2584:	2c 01       	movw	r4, r24
    2586:	2c 85       	ldd	r18, Y+12	; 0x0c
    2588:	20 68       	ori	r18, 0x80	; 128
    258a:	22 2e       	mov	r2, r18
    258c:	83 01       	movw	r16, r6
    258e:	23 fc       	sbrc	r2, 3
    2590:	19 c0       	rjmp	.+50     	; 0x25c4 <vfprintf+0x1c8>
    2592:	83 2d       	mov	r24, r3
    2594:	90 e0       	ldi	r25, 0x00	; 0
    2596:	48 16       	cp	r4, r24
    2598:	59 06       	cpc	r5, r25
    259a:	a0 f4       	brcc	.+40     	; 0x25c4 <vfprintf+0x1c8>
    259c:	b7 01       	movw	r22, r14
    259e:	80 e2       	ldi	r24, 0x20	; 32
    25a0:	90 e0       	ldi	r25, 0x00	; 0
    25a2:	78 d2       	rcall	.+1264   	; 0x2a94 <fputc>
    25a4:	3a 94       	dec	r3
    25a6:	f5 cf       	rjmp	.-22     	; 0x2592 <vfprintf+0x196>
    25a8:	f5 01       	movw	r30, r10
    25aa:	27 fc       	sbrc	r2, 7
    25ac:	85 91       	lpm	r24, Z+
    25ae:	27 fe       	sbrs	r2, 7
    25b0:	81 91       	ld	r24, Z+
    25b2:	5f 01       	movw	r10, r30
    25b4:	b7 01       	movw	r22, r14
    25b6:	90 e0       	ldi	r25, 0x00	; 0
    25b8:	6d d2       	rcall	.+1242   	; 0x2a94 <fputc>
    25ba:	31 10       	cpse	r3, r1
    25bc:	3a 94       	dec	r3
    25be:	f1 e0       	ldi	r31, 0x01	; 1
    25c0:	4f 1a       	sub	r4, r31
    25c2:	51 08       	sbc	r5, r1
    25c4:	41 14       	cp	r4, r1
    25c6:	51 04       	cpc	r5, r1
    25c8:	79 f7       	brne	.-34     	; 0x25a8 <vfprintf+0x1ac>
    25ca:	de c0       	rjmp	.+444    	; 0x2788 <vfprintf+0x38c>
    25cc:	84 36       	cpi	r24, 0x64	; 100
    25ce:	11 f0       	breq	.+4      	; 0x25d4 <vfprintf+0x1d8>
    25d0:	89 36       	cpi	r24, 0x69	; 105
    25d2:	31 f5       	brne	.+76     	; 0x2620 <vfprintf+0x224>
    25d4:	f8 01       	movw	r30, r16
    25d6:	27 ff       	sbrs	r18, 7
    25d8:	07 c0       	rjmp	.+14     	; 0x25e8 <vfprintf+0x1ec>
    25da:	60 81       	ld	r22, Z
    25dc:	71 81       	ldd	r23, Z+1	; 0x01
    25de:	82 81       	ldd	r24, Z+2	; 0x02
    25e0:	93 81       	ldd	r25, Z+3	; 0x03
    25e2:	0c 5f       	subi	r16, 0xFC	; 252
    25e4:	1f 4f       	sbci	r17, 0xFF	; 255
    25e6:	08 c0       	rjmp	.+16     	; 0x25f8 <vfprintf+0x1fc>
    25e8:	60 81       	ld	r22, Z
    25ea:	71 81       	ldd	r23, Z+1	; 0x01
    25ec:	88 27       	eor	r24, r24
    25ee:	77 fd       	sbrc	r23, 7
    25f0:	80 95       	com	r24
    25f2:	98 2f       	mov	r25, r24
    25f4:	0e 5f       	subi	r16, 0xFE	; 254
    25f6:	1f 4f       	sbci	r17, 0xFF	; 255
    25f8:	2f 76       	andi	r18, 0x6F	; 111
    25fa:	b2 2e       	mov	r11, r18
    25fc:	97 ff       	sbrs	r25, 7
    25fe:	09 c0       	rjmp	.+18     	; 0x2612 <vfprintf+0x216>
    2600:	90 95       	com	r25
    2602:	80 95       	com	r24
    2604:	70 95       	com	r23
    2606:	61 95       	neg	r22
    2608:	7f 4f       	sbci	r23, 0xFF	; 255
    260a:	8f 4f       	sbci	r24, 0xFF	; 255
    260c:	9f 4f       	sbci	r25, 0xFF	; 255
    260e:	20 68       	ori	r18, 0x80	; 128
    2610:	b2 2e       	mov	r11, r18
    2612:	2a e0       	ldi	r18, 0x0A	; 10
    2614:	30 e0       	ldi	r19, 0x00	; 0
    2616:	a4 01       	movw	r20, r8
    2618:	6f d2       	rcall	.+1246   	; 0x2af8 <__ultoa_invert>
    261a:	a8 2e       	mov	r10, r24
    261c:	a8 18       	sub	r10, r8
    261e:	43 c0       	rjmp	.+134    	; 0x26a6 <vfprintf+0x2aa>
    2620:	85 37       	cpi	r24, 0x75	; 117
    2622:	29 f4       	brne	.+10     	; 0x262e <vfprintf+0x232>
    2624:	2f 7e       	andi	r18, 0xEF	; 239
    2626:	b2 2e       	mov	r11, r18
    2628:	2a e0       	ldi	r18, 0x0A	; 10
    262a:	30 e0       	ldi	r19, 0x00	; 0
    262c:	25 c0       	rjmp	.+74     	; 0x2678 <vfprintf+0x27c>
    262e:	f2 2f       	mov	r31, r18
    2630:	f9 7f       	andi	r31, 0xF9	; 249
    2632:	bf 2e       	mov	r11, r31
    2634:	8f 36       	cpi	r24, 0x6F	; 111
    2636:	c1 f0       	breq	.+48     	; 0x2668 <vfprintf+0x26c>
    2638:	18 f4       	brcc	.+6      	; 0x2640 <vfprintf+0x244>
    263a:	88 35       	cpi	r24, 0x58	; 88
    263c:	79 f0       	breq	.+30     	; 0x265c <vfprintf+0x260>
    263e:	ad c0       	rjmp	.+346    	; 0x279a <vfprintf+0x39e>
    2640:	80 37       	cpi	r24, 0x70	; 112
    2642:	19 f0       	breq	.+6      	; 0x264a <vfprintf+0x24e>
    2644:	88 37       	cpi	r24, 0x78	; 120
    2646:	21 f0       	breq	.+8      	; 0x2650 <vfprintf+0x254>
    2648:	a8 c0       	rjmp	.+336    	; 0x279a <vfprintf+0x39e>
    264a:	2f 2f       	mov	r18, r31
    264c:	20 61       	ori	r18, 0x10	; 16
    264e:	b2 2e       	mov	r11, r18
    2650:	b4 fe       	sbrs	r11, 4
    2652:	0d c0       	rjmp	.+26     	; 0x266e <vfprintf+0x272>
    2654:	8b 2d       	mov	r24, r11
    2656:	84 60       	ori	r24, 0x04	; 4
    2658:	b8 2e       	mov	r11, r24
    265a:	09 c0       	rjmp	.+18     	; 0x266e <vfprintf+0x272>
    265c:	24 ff       	sbrs	r18, 4
    265e:	0a c0       	rjmp	.+20     	; 0x2674 <vfprintf+0x278>
    2660:	9f 2f       	mov	r25, r31
    2662:	96 60       	ori	r25, 0x06	; 6
    2664:	b9 2e       	mov	r11, r25
    2666:	06 c0       	rjmp	.+12     	; 0x2674 <vfprintf+0x278>
    2668:	28 e0       	ldi	r18, 0x08	; 8
    266a:	30 e0       	ldi	r19, 0x00	; 0
    266c:	05 c0       	rjmp	.+10     	; 0x2678 <vfprintf+0x27c>
    266e:	20 e1       	ldi	r18, 0x10	; 16
    2670:	30 e0       	ldi	r19, 0x00	; 0
    2672:	02 c0       	rjmp	.+4      	; 0x2678 <vfprintf+0x27c>
    2674:	20 e1       	ldi	r18, 0x10	; 16
    2676:	32 e0       	ldi	r19, 0x02	; 2
    2678:	f8 01       	movw	r30, r16
    267a:	b7 fe       	sbrs	r11, 7
    267c:	07 c0       	rjmp	.+14     	; 0x268c <vfprintf+0x290>
    267e:	60 81       	ld	r22, Z
    2680:	71 81       	ldd	r23, Z+1	; 0x01
    2682:	82 81       	ldd	r24, Z+2	; 0x02
    2684:	93 81       	ldd	r25, Z+3	; 0x03
    2686:	0c 5f       	subi	r16, 0xFC	; 252
    2688:	1f 4f       	sbci	r17, 0xFF	; 255
    268a:	06 c0       	rjmp	.+12     	; 0x2698 <vfprintf+0x29c>
    268c:	60 81       	ld	r22, Z
    268e:	71 81       	ldd	r23, Z+1	; 0x01
    2690:	80 e0       	ldi	r24, 0x00	; 0
    2692:	90 e0       	ldi	r25, 0x00	; 0
    2694:	0e 5f       	subi	r16, 0xFE	; 254
    2696:	1f 4f       	sbci	r17, 0xFF	; 255
    2698:	a4 01       	movw	r20, r8
    269a:	2e d2       	rcall	.+1116   	; 0x2af8 <__ultoa_invert>
    269c:	a8 2e       	mov	r10, r24
    269e:	a8 18       	sub	r10, r8
    26a0:	fb 2d       	mov	r31, r11
    26a2:	ff 77       	andi	r31, 0x7F	; 127
    26a4:	bf 2e       	mov	r11, r31
    26a6:	b6 fe       	sbrs	r11, 6
    26a8:	0b c0       	rjmp	.+22     	; 0x26c0 <vfprintf+0x2c4>
    26aa:	2b 2d       	mov	r18, r11
    26ac:	2e 7f       	andi	r18, 0xFE	; 254
    26ae:	a5 14       	cp	r10, r5
    26b0:	50 f4       	brcc	.+20     	; 0x26c6 <vfprintf+0x2ca>
    26b2:	b4 fe       	sbrs	r11, 4
    26b4:	0a c0       	rjmp	.+20     	; 0x26ca <vfprintf+0x2ce>
    26b6:	b2 fc       	sbrc	r11, 2
    26b8:	08 c0       	rjmp	.+16     	; 0x26ca <vfprintf+0x2ce>
    26ba:	2b 2d       	mov	r18, r11
    26bc:	2e 7e       	andi	r18, 0xEE	; 238
    26be:	05 c0       	rjmp	.+10     	; 0x26ca <vfprintf+0x2ce>
    26c0:	7a 2c       	mov	r7, r10
    26c2:	2b 2d       	mov	r18, r11
    26c4:	03 c0       	rjmp	.+6      	; 0x26cc <vfprintf+0x2d0>
    26c6:	7a 2c       	mov	r7, r10
    26c8:	01 c0       	rjmp	.+2      	; 0x26cc <vfprintf+0x2d0>
    26ca:	75 2c       	mov	r7, r5
    26cc:	24 ff       	sbrs	r18, 4
    26ce:	0d c0       	rjmp	.+26     	; 0x26ea <vfprintf+0x2ee>
    26d0:	fe 01       	movw	r30, r28
    26d2:	ea 0d       	add	r30, r10
    26d4:	f1 1d       	adc	r31, r1
    26d6:	80 81       	ld	r24, Z
    26d8:	80 33       	cpi	r24, 0x30	; 48
    26da:	11 f4       	brne	.+4      	; 0x26e0 <vfprintf+0x2e4>
    26dc:	29 7e       	andi	r18, 0xE9	; 233
    26de:	09 c0       	rjmp	.+18     	; 0x26f2 <vfprintf+0x2f6>
    26e0:	22 ff       	sbrs	r18, 2
    26e2:	06 c0       	rjmp	.+12     	; 0x26f0 <vfprintf+0x2f4>
    26e4:	73 94       	inc	r7
    26e6:	73 94       	inc	r7
    26e8:	04 c0       	rjmp	.+8      	; 0x26f2 <vfprintf+0x2f6>
    26ea:	82 2f       	mov	r24, r18
    26ec:	86 78       	andi	r24, 0x86	; 134
    26ee:	09 f0       	breq	.+2      	; 0x26f2 <vfprintf+0x2f6>
    26f0:	73 94       	inc	r7
    26f2:	23 fd       	sbrc	r18, 3
    26f4:	12 c0       	rjmp	.+36     	; 0x271a <vfprintf+0x31e>
    26f6:	20 ff       	sbrs	r18, 0
    26f8:	06 c0       	rjmp	.+12     	; 0x2706 <vfprintf+0x30a>
    26fa:	5a 2c       	mov	r5, r10
    26fc:	73 14       	cp	r7, r3
    26fe:	18 f4       	brcc	.+6      	; 0x2706 <vfprintf+0x30a>
    2700:	53 0c       	add	r5, r3
    2702:	57 18       	sub	r5, r7
    2704:	73 2c       	mov	r7, r3
    2706:	73 14       	cp	r7, r3
    2708:	60 f4       	brcc	.+24     	; 0x2722 <vfprintf+0x326>
    270a:	b7 01       	movw	r22, r14
    270c:	80 e2       	ldi	r24, 0x20	; 32
    270e:	90 e0       	ldi	r25, 0x00	; 0
    2710:	2c 87       	std	Y+12, r18	; 0x0c
    2712:	c0 d1       	rcall	.+896    	; 0x2a94 <fputc>
    2714:	73 94       	inc	r7
    2716:	2c 85       	ldd	r18, Y+12	; 0x0c
    2718:	f6 cf       	rjmp	.-20     	; 0x2706 <vfprintf+0x30a>
    271a:	73 14       	cp	r7, r3
    271c:	10 f4       	brcc	.+4      	; 0x2722 <vfprintf+0x326>
    271e:	37 18       	sub	r3, r7
    2720:	01 c0       	rjmp	.+2      	; 0x2724 <vfprintf+0x328>
    2722:	31 2c       	mov	r3, r1
    2724:	24 ff       	sbrs	r18, 4
    2726:	11 c0       	rjmp	.+34     	; 0x274a <vfprintf+0x34e>
    2728:	b7 01       	movw	r22, r14
    272a:	80 e3       	ldi	r24, 0x30	; 48
    272c:	90 e0       	ldi	r25, 0x00	; 0
    272e:	2c 87       	std	Y+12, r18	; 0x0c
    2730:	b1 d1       	rcall	.+866    	; 0x2a94 <fputc>
    2732:	2c 85       	ldd	r18, Y+12	; 0x0c
    2734:	22 ff       	sbrs	r18, 2
    2736:	16 c0       	rjmp	.+44     	; 0x2764 <vfprintf+0x368>
    2738:	21 ff       	sbrs	r18, 1
    273a:	03 c0       	rjmp	.+6      	; 0x2742 <vfprintf+0x346>
    273c:	88 e5       	ldi	r24, 0x58	; 88
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	02 c0       	rjmp	.+4      	; 0x2746 <vfprintf+0x34a>
    2742:	88 e7       	ldi	r24, 0x78	; 120
    2744:	90 e0       	ldi	r25, 0x00	; 0
    2746:	b7 01       	movw	r22, r14
    2748:	0c c0       	rjmp	.+24     	; 0x2762 <vfprintf+0x366>
    274a:	82 2f       	mov	r24, r18
    274c:	86 78       	andi	r24, 0x86	; 134
    274e:	51 f0       	breq	.+20     	; 0x2764 <vfprintf+0x368>
    2750:	21 fd       	sbrc	r18, 1
    2752:	02 c0       	rjmp	.+4      	; 0x2758 <vfprintf+0x35c>
    2754:	80 e2       	ldi	r24, 0x20	; 32
    2756:	01 c0       	rjmp	.+2      	; 0x275a <vfprintf+0x35e>
    2758:	8b e2       	ldi	r24, 0x2B	; 43
    275a:	27 fd       	sbrc	r18, 7
    275c:	8d e2       	ldi	r24, 0x2D	; 45
    275e:	b7 01       	movw	r22, r14
    2760:	90 e0       	ldi	r25, 0x00	; 0
    2762:	98 d1       	rcall	.+816    	; 0x2a94 <fputc>
    2764:	a5 14       	cp	r10, r5
    2766:	30 f4       	brcc	.+12     	; 0x2774 <vfprintf+0x378>
    2768:	b7 01       	movw	r22, r14
    276a:	80 e3       	ldi	r24, 0x30	; 48
    276c:	90 e0       	ldi	r25, 0x00	; 0
    276e:	92 d1       	rcall	.+804    	; 0x2a94 <fputc>
    2770:	5a 94       	dec	r5
    2772:	f8 cf       	rjmp	.-16     	; 0x2764 <vfprintf+0x368>
    2774:	aa 94       	dec	r10
    2776:	f4 01       	movw	r30, r8
    2778:	ea 0d       	add	r30, r10
    277a:	f1 1d       	adc	r31, r1
    277c:	80 81       	ld	r24, Z
    277e:	b7 01       	movw	r22, r14
    2780:	90 e0       	ldi	r25, 0x00	; 0
    2782:	88 d1       	rcall	.+784    	; 0x2a94 <fputc>
    2784:	a1 10       	cpse	r10, r1
    2786:	f6 cf       	rjmp	.-20     	; 0x2774 <vfprintf+0x378>
    2788:	33 20       	and	r3, r3
    278a:	09 f4       	brne	.+2      	; 0x278e <vfprintf+0x392>
    278c:	5d ce       	rjmp	.-838    	; 0x2448 <vfprintf+0x4c>
    278e:	b7 01       	movw	r22, r14
    2790:	80 e2       	ldi	r24, 0x20	; 32
    2792:	90 e0       	ldi	r25, 0x00	; 0
    2794:	7f d1       	rcall	.+766    	; 0x2a94 <fputc>
    2796:	3a 94       	dec	r3
    2798:	f7 cf       	rjmp	.-18     	; 0x2788 <vfprintf+0x38c>
    279a:	f7 01       	movw	r30, r14
    279c:	86 81       	ldd	r24, Z+6	; 0x06
    279e:	97 81       	ldd	r25, Z+7	; 0x07
    27a0:	02 c0       	rjmp	.+4      	; 0x27a6 <vfprintf+0x3aa>
    27a2:	8f ef       	ldi	r24, 0xFF	; 255
    27a4:	9f ef       	ldi	r25, 0xFF	; 255
    27a6:	2c 96       	adiw	r28, 0x0c	; 12
    27a8:	0f b6       	in	r0, 0x3f	; 63
    27aa:	f8 94       	cli
    27ac:	de bf       	out	0x3e, r29	; 62
    27ae:	0f be       	out	0x3f, r0	; 63
    27b0:	cd bf       	out	0x3d, r28	; 61
    27b2:	df 91       	pop	r29
    27b4:	cf 91       	pop	r28
    27b6:	1f 91       	pop	r17
    27b8:	0f 91       	pop	r16
    27ba:	ff 90       	pop	r15
    27bc:	ef 90       	pop	r14
    27be:	df 90       	pop	r13
    27c0:	cf 90       	pop	r12
    27c2:	bf 90       	pop	r11
    27c4:	af 90       	pop	r10
    27c6:	9f 90       	pop	r9
    27c8:	8f 90       	pop	r8
    27ca:	7f 90       	pop	r7
    27cc:	6f 90       	pop	r6
    27ce:	5f 90       	pop	r5
    27d0:	4f 90       	pop	r4
    27d2:	3f 90       	pop	r3
    27d4:	2f 90       	pop	r2
    27d6:	08 95       	ret

000027d8 <calloc>:
    27d8:	0f 93       	push	r16
    27da:	1f 93       	push	r17
    27dc:	cf 93       	push	r28
    27de:	df 93       	push	r29
    27e0:	86 9f       	mul	r24, r22
    27e2:	80 01       	movw	r16, r0
    27e4:	87 9f       	mul	r24, r23
    27e6:	10 0d       	add	r17, r0
    27e8:	96 9f       	mul	r25, r22
    27ea:	10 0d       	add	r17, r0
    27ec:	11 24       	eor	r1, r1
    27ee:	c8 01       	movw	r24, r16
    27f0:	0d d0       	rcall	.+26     	; 0x280c <malloc>
    27f2:	ec 01       	movw	r28, r24
    27f4:	00 97       	sbiw	r24, 0x00	; 0
    27f6:	21 f0       	breq	.+8      	; 0x2800 <calloc+0x28>
    27f8:	a8 01       	movw	r20, r16
    27fa:	60 e0       	ldi	r22, 0x00	; 0
    27fc:	70 e0       	ldi	r23, 0x00	; 0
    27fe:	38 d1       	rcall	.+624    	; 0x2a70 <memset>
    2800:	ce 01       	movw	r24, r28
    2802:	df 91       	pop	r29
    2804:	cf 91       	pop	r28
    2806:	1f 91       	pop	r17
    2808:	0f 91       	pop	r16
    280a:	08 95       	ret

0000280c <malloc>:
    280c:	cf 93       	push	r28
    280e:	df 93       	push	r29
    2810:	82 30       	cpi	r24, 0x02	; 2
    2812:	91 05       	cpc	r25, r1
    2814:	10 f4       	brcc	.+4      	; 0x281a <malloc+0xe>
    2816:	82 e0       	ldi	r24, 0x02	; 2
    2818:	90 e0       	ldi	r25, 0x00	; 0
    281a:	e0 91 4c 12 	lds	r30, 0x124C
    281e:	f0 91 4d 12 	lds	r31, 0x124D
    2822:	20 e0       	ldi	r18, 0x00	; 0
    2824:	30 e0       	ldi	r19, 0x00	; 0
    2826:	a0 e0       	ldi	r26, 0x00	; 0
    2828:	b0 e0       	ldi	r27, 0x00	; 0
    282a:	30 97       	sbiw	r30, 0x00	; 0
    282c:	39 f1       	breq	.+78     	; 0x287c <malloc+0x70>
    282e:	40 81       	ld	r20, Z
    2830:	51 81       	ldd	r21, Z+1	; 0x01
    2832:	48 17       	cp	r20, r24
    2834:	59 07       	cpc	r21, r25
    2836:	b8 f0       	brcs	.+46     	; 0x2866 <malloc+0x5a>
    2838:	48 17       	cp	r20, r24
    283a:	59 07       	cpc	r21, r25
    283c:	71 f4       	brne	.+28     	; 0x285a <malloc+0x4e>
    283e:	82 81       	ldd	r24, Z+2	; 0x02
    2840:	93 81       	ldd	r25, Z+3	; 0x03
    2842:	10 97       	sbiw	r26, 0x00	; 0
    2844:	29 f0       	breq	.+10     	; 0x2850 <malloc+0x44>
    2846:	13 96       	adiw	r26, 0x03	; 3
    2848:	9c 93       	st	X, r25
    284a:	8e 93       	st	-X, r24
    284c:	12 97       	sbiw	r26, 0x02	; 2
    284e:	2c c0       	rjmp	.+88     	; 0x28a8 <malloc+0x9c>
    2850:	90 93 4d 12 	sts	0x124D, r25
    2854:	80 93 4c 12 	sts	0x124C, r24
    2858:	27 c0       	rjmp	.+78     	; 0x28a8 <malloc+0x9c>
    285a:	21 15       	cp	r18, r1
    285c:	31 05       	cpc	r19, r1
    285e:	31 f0       	breq	.+12     	; 0x286c <malloc+0x60>
    2860:	42 17       	cp	r20, r18
    2862:	53 07       	cpc	r21, r19
    2864:	18 f0       	brcs	.+6      	; 0x286c <malloc+0x60>
    2866:	a9 01       	movw	r20, r18
    2868:	db 01       	movw	r26, r22
    286a:	01 c0       	rjmp	.+2      	; 0x286e <malloc+0x62>
    286c:	ef 01       	movw	r28, r30
    286e:	9a 01       	movw	r18, r20
    2870:	bd 01       	movw	r22, r26
    2872:	df 01       	movw	r26, r30
    2874:	02 80       	ldd	r0, Z+2	; 0x02
    2876:	f3 81       	ldd	r31, Z+3	; 0x03
    2878:	e0 2d       	mov	r30, r0
    287a:	d7 cf       	rjmp	.-82     	; 0x282a <malloc+0x1e>
    287c:	21 15       	cp	r18, r1
    287e:	31 05       	cpc	r19, r1
    2880:	f9 f0       	breq	.+62     	; 0x28c0 <malloc+0xb4>
    2882:	28 1b       	sub	r18, r24
    2884:	39 0b       	sbc	r19, r25
    2886:	24 30       	cpi	r18, 0x04	; 4
    2888:	31 05       	cpc	r19, r1
    288a:	80 f4       	brcc	.+32     	; 0x28ac <malloc+0xa0>
    288c:	8a 81       	ldd	r24, Y+2	; 0x02
    288e:	9b 81       	ldd	r25, Y+3	; 0x03
    2890:	61 15       	cp	r22, r1
    2892:	71 05       	cpc	r23, r1
    2894:	21 f0       	breq	.+8      	; 0x289e <malloc+0x92>
    2896:	fb 01       	movw	r30, r22
    2898:	93 83       	std	Z+3, r25	; 0x03
    289a:	82 83       	std	Z+2, r24	; 0x02
    289c:	04 c0       	rjmp	.+8      	; 0x28a6 <malloc+0x9a>
    289e:	90 93 4d 12 	sts	0x124D, r25
    28a2:	80 93 4c 12 	sts	0x124C, r24
    28a6:	fe 01       	movw	r30, r28
    28a8:	32 96       	adiw	r30, 0x02	; 2
    28aa:	44 c0       	rjmp	.+136    	; 0x2934 <malloc+0x128>
    28ac:	fe 01       	movw	r30, r28
    28ae:	e2 0f       	add	r30, r18
    28b0:	f3 1f       	adc	r31, r19
    28b2:	81 93       	st	Z+, r24
    28b4:	91 93       	st	Z+, r25
    28b6:	22 50       	subi	r18, 0x02	; 2
    28b8:	31 09       	sbc	r19, r1
    28ba:	39 83       	std	Y+1, r19	; 0x01
    28bc:	28 83       	st	Y, r18
    28be:	3a c0       	rjmp	.+116    	; 0x2934 <malloc+0x128>
    28c0:	20 91 4a 12 	lds	r18, 0x124A
    28c4:	30 91 4b 12 	lds	r19, 0x124B
    28c8:	23 2b       	or	r18, r19
    28ca:	41 f4       	brne	.+16     	; 0x28dc <malloc+0xd0>
    28cc:	20 91 04 02 	lds	r18, 0x0204
    28d0:	30 91 05 02 	lds	r19, 0x0205
    28d4:	30 93 4b 12 	sts	0x124B, r19
    28d8:	20 93 4a 12 	sts	0x124A, r18
    28dc:	20 91 02 02 	lds	r18, 0x0202
    28e0:	30 91 03 02 	lds	r19, 0x0203
    28e4:	21 15       	cp	r18, r1
    28e6:	31 05       	cpc	r19, r1
    28e8:	41 f4       	brne	.+16     	; 0x28fa <malloc+0xee>
    28ea:	2d b7       	in	r18, 0x3d	; 61
    28ec:	3e b7       	in	r19, 0x3e	; 62
    28ee:	40 91 06 02 	lds	r20, 0x0206
    28f2:	50 91 07 02 	lds	r21, 0x0207
    28f6:	24 1b       	sub	r18, r20
    28f8:	35 0b       	sbc	r19, r21
    28fa:	e0 91 4a 12 	lds	r30, 0x124A
    28fe:	f0 91 4b 12 	lds	r31, 0x124B
    2902:	e2 17       	cp	r30, r18
    2904:	f3 07       	cpc	r31, r19
    2906:	a0 f4       	brcc	.+40     	; 0x2930 <malloc+0x124>
    2908:	2e 1b       	sub	r18, r30
    290a:	3f 0b       	sbc	r19, r31
    290c:	28 17       	cp	r18, r24
    290e:	39 07       	cpc	r19, r25
    2910:	78 f0       	brcs	.+30     	; 0x2930 <malloc+0x124>
    2912:	ac 01       	movw	r20, r24
    2914:	4e 5f       	subi	r20, 0xFE	; 254
    2916:	5f 4f       	sbci	r21, 0xFF	; 255
    2918:	24 17       	cp	r18, r20
    291a:	35 07       	cpc	r19, r21
    291c:	48 f0       	brcs	.+18     	; 0x2930 <malloc+0x124>
    291e:	4e 0f       	add	r20, r30
    2920:	5f 1f       	adc	r21, r31
    2922:	50 93 4b 12 	sts	0x124B, r21
    2926:	40 93 4a 12 	sts	0x124A, r20
    292a:	81 93       	st	Z+, r24
    292c:	91 93       	st	Z+, r25
    292e:	02 c0       	rjmp	.+4      	; 0x2934 <malloc+0x128>
    2930:	e0 e0       	ldi	r30, 0x00	; 0
    2932:	f0 e0       	ldi	r31, 0x00	; 0
    2934:	cf 01       	movw	r24, r30
    2936:	df 91       	pop	r29
    2938:	cf 91       	pop	r28
    293a:	08 95       	ret

0000293c <free>:
    293c:	cf 93       	push	r28
    293e:	df 93       	push	r29
    2940:	00 97       	sbiw	r24, 0x00	; 0
    2942:	09 f4       	brne	.+2      	; 0x2946 <free+0xa>
    2944:	87 c0       	rjmp	.+270    	; 0x2a54 <free+0x118>
    2946:	fc 01       	movw	r30, r24
    2948:	32 97       	sbiw	r30, 0x02	; 2
    294a:	13 82       	std	Z+3, r1	; 0x03
    294c:	12 82       	std	Z+2, r1	; 0x02
    294e:	c0 91 4c 12 	lds	r28, 0x124C
    2952:	d0 91 4d 12 	lds	r29, 0x124D
    2956:	20 97       	sbiw	r28, 0x00	; 0
    2958:	81 f4       	brne	.+32     	; 0x297a <free+0x3e>
    295a:	20 81       	ld	r18, Z
    295c:	31 81       	ldd	r19, Z+1	; 0x01
    295e:	28 0f       	add	r18, r24
    2960:	39 1f       	adc	r19, r25
    2962:	80 91 4a 12 	lds	r24, 0x124A
    2966:	90 91 4b 12 	lds	r25, 0x124B
    296a:	82 17       	cp	r24, r18
    296c:	93 07       	cpc	r25, r19
    296e:	79 f5       	brne	.+94     	; 0x29ce <free+0x92>
    2970:	f0 93 4b 12 	sts	0x124B, r31
    2974:	e0 93 4a 12 	sts	0x124A, r30
    2978:	6d c0       	rjmp	.+218    	; 0x2a54 <free+0x118>
    297a:	de 01       	movw	r26, r28
    297c:	20 e0       	ldi	r18, 0x00	; 0
    297e:	30 e0       	ldi	r19, 0x00	; 0
    2980:	ae 17       	cp	r26, r30
    2982:	bf 07       	cpc	r27, r31
    2984:	50 f4       	brcc	.+20     	; 0x299a <free+0x5e>
    2986:	12 96       	adiw	r26, 0x02	; 2
    2988:	4d 91       	ld	r20, X+
    298a:	5c 91       	ld	r21, X
    298c:	13 97       	sbiw	r26, 0x03	; 3
    298e:	9d 01       	movw	r18, r26
    2990:	41 15       	cp	r20, r1
    2992:	51 05       	cpc	r21, r1
    2994:	09 f1       	breq	.+66     	; 0x29d8 <free+0x9c>
    2996:	da 01       	movw	r26, r20
    2998:	f3 cf       	rjmp	.-26     	; 0x2980 <free+0x44>
    299a:	b3 83       	std	Z+3, r27	; 0x03
    299c:	a2 83       	std	Z+2, r26	; 0x02
    299e:	40 81       	ld	r20, Z
    29a0:	51 81       	ldd	r21, Z+1	; 0x01
    29a2:	84 0f       	add	r24, r20
    29a4:	95 1f       	adc	r25, r21
    29a6:	8a 17       	cp	r24, r26
    29a8:	9b 07       	cpc	r25, r27
    29aa:	71 f4       	brne	.+28     	; 0x29c8 <free+0x8c>
    29ac:	8d 91       	ld	r24, X+
    29ae:	9c 91       	ld	r25, X
    29b0:	11 97       	sbiw	r26, 0x01	; 1
    29b2:	84 0f       	add	r24, r20
    29b4:	95 1f       	adc	r25, r21
    29b6:	02 96       	adiw	r24, 0x02	; 2
    29b8:	91 83       	std	Z+1, r25	; 0x01
    29ba:	80 83       	st	Z, r24
    29bc:	12 96       	adiw	r26, 0x02	; 2
    29be:	8d 91       	ld	r24, X+
    29c0:	9c 91       	ld	r25, X
    29c2:	13 97       	sbiw	r26, 0x03	; 3
    29c4:	93 83       	std	Z+3, r25	; 0x03
    29c6:	82 83       	std	Z+2, r24	; 0x02
    29c8:	21 15       	cp	r18, r1
    29ca:	31 05       	cpc	r19, r1
    29cc:	29 f4       	brne	.+10     	; 0x29d8 <free+0x9c>
    29ce:	f0 93 4d 12 	sts	0x124D, r31
    29d2:	e0 93 4c 12 	sts	0x124C, r30
    29d6:	3e c0       	rjmp	.+124    	; 0x2a54 <free+0x118>
    29d8:	d9 01       	movw	r26, r18
    29da:	13 96       	adiw	r26, 0x03	; 3
    29dc:	fc 93       	st	X, r31
    29de:	ee 93       	st	-X, r30
    29e0:	12 97       	sbiw	r26, 0x02	; 2
    29e2:	4d 91       	ld	r20, X+
    29e4:	5d 91       	ld	r21, X+
    29e6:	a4 0f       	add	r26, r20
    29e8:	b5 1f       	adc	r27, r21
    29ea:	ea 17       	cp	r30, r26
    29ec:	fb 07       	cpc	r31, r27
    29ee:	79 f4       	brne	.+30     	; 0x2a0e <free+0xd2>
    29f0:	80 81       	ld	r24, Z
    29f2:	91 81       	ldd	r25, Z+1	; 0x01
    29f4:	84 0f       	add	r24, r20
    29f6:	95 1f       	adc	r25, r21
    29f8:	02 96       	adiw	r24, 0x02	; 2
    29fa:	d9 01       	movw	r26, r18
    29fc:	11 96       	adiw	r26, 0x01	; 1
    29fe:	9c 93       	st	X, r25
    2a00:	8e 93       	st	-X, r24
    2a02:	82 81       	ldd	r24, Z+2	; 0x02
    2a04:	93 81       	ldd	r25, Z+3	; 0x03
    2a06:	13 96       	adiw	r26, 0x03	; 3
    2a08:	9c 93       	st	X, r25
    2a0a:	8e 93       	st	-X, r24
    2a0c:	12 97       	sbiw	r26, 0x02	; 2
    2a0e:	e0 e0       	ldi	r30, 0x00	; 0
    2a10:	f0 e0       	ldi	r31, 0x00	; 0
    2a12:	8a 81       	ldd	r24, Y+2	; 0x02
    2a14:	9b 81       	ldd	r25, Y+3	; 0x03
    2a16:	00 97       	sbiw	r24, 0x00	; 0
    2a18:	19 f0       	breq	.+6      	; 0x2a20 <free+0xe4>
    2a1a:	fe 01       	movw	r30, r28
    2a1c:	ec 01       	movw	r28, r24
    2a1e:	f9 cf       	rjmp	.-14     	; 0x2a12 <free+0xd6>
    2a20:	ce 01       	movw	r24, r28
    2a22:	02 96       	adiw	r24, 0x02	; 2
    2a24:	28 81       	ld	r18, Y
    2a26:	39 81       	ldd	r19, Y+1	; 0x01
    2a28:	82 0f       	add	r24, r18
    2a2a:	93 1f       	adc	r25, r19
    2a2c:	20 91 4a 12 	lds	r18, 0x124A
    2a30:	30 91 4b 12 	lds	r19, 0x124B
    2a34:	28 17       	cp	r18, r24
    2a36:	39 07       	cpc	r19, r25
    2a38:	69 f4       	brne	.+26     	; 0x2a54 <free+0x118>
    2a3a:	30 97       	sbiw	r30, 0x00	; 0
    2a3c:	29 f4       	brne	.+10     	; 0x2a48 <free+0x10c>
    2a3e:	10 92 4d 12 	sts	0x124D, r1
    2a42:	10 92 4c 12 	sts	0x124C, r1
    2a46:	02 c0       	rjmp	.+4      	; 0x2a4c <free+0x110>
    2a48:	13 82       	std	Z+3, r1	; 0x03
    2a4a:	12 82       	std	Z+2, r1	; 0x02
    2a4c:	d0 93 4b 12 	sts	0x124B, r29
    2a50:	c0 93 4a 12 	sts	0x124A, r28
    2a54:	df 91       	pop	r29
    2a56:	cf 91       	pop	r28
    2a58:	08 95       	ret

00002a5a <strnlen_P>:
    2a5a:	fc 01       	movw	r30, r24
    2a5c:	05 90       	lpm	r0, Z+
    2a5e:	61 50       	subi	r22, 0x01	; 1
    2a60:	70 40       	sbci	r23, 0x00	; 0
    2a62:	01 10       	cpse	r0, r1
    2a64:	d8 f7       	brcc	.-10     	; 0x2a5c <strnlen_P+0x2>
    2a66:	80 95       	com	r24
    2a68:	90 95       	com	r25
    2a6a:	8e 0f       	add	r24, r30
    2a6c:	9f 1f       	adc	r25, r31
    2a6e:	08 95       	ret

00002a70 <memset>:
    2a70:	dc 01       	movw	r26, r24
    2a72:	01 c0       	rjmp	.+2      	; 0x2a76 <memset+0x6>
    2a74:	6d 93       	st	X+, r22
    2a76:	41 50       	subi	r20, 0x01	; 1
    2a78:	50 40       	sbci	r21, 0x00	; 0
    2a7a:	e0 f7       	brcc	.-8      	; 0x2a74 <memset+0x4>
    2a7c:	08 95       	ret

00002a7e <strnlen>:
    2a7e:	fc 01       	movw	r30, r24
    2a80:	61 50       	subi	r22, 0x01	; 1
    2a82:	70 40       	sbci	r23, 0x00	; 0
    2a84:	01 90       	ld	r0, Z+
    2a86:	01 10       	cpse	r0, r1
    2a88:	d8 f7       	brcc	.-10     	; 0x2a80 <strnlen+0x2>
    2a8a:	80 95       	com	r24
    2a8c:	90 95       	com	r25
    2a8e:	8e 0f       	add	r24, r30
    2a90:	9f 1f       	adc	r25, r31
    2a92:	08 95       	ret

00002a94 <fputc>:
    2a94:	0f 93       	push	r16
    2a96:	1f 93       	push	r17
    2a98:	cf 93       	push	r28
    2a9a:	df 93       	push	r29
    2a9c:	18 2f       	mov	r17, r24
    2a9e:	09 2f       	mov	r16, r25
    2aa0:	eb 01       	movw	r28, r22
    2aa2:	8b 81       	ldd	r24, Y+3	; 0x03
    2aa4:	81 fd       	sbrc	r24, 1
    2aa6:	03 c0       	rjmp	.+6      	; 0x2aae <fputc+0x1a>
    2aa8:	8f ef       	ldi	r24, 0xFF	; 255
    2aaa:	9f ef       	ldi	r25, 0xFF	; 255
    2aac:	20 c0       	rjmp	.+64     	; 0x2aee <fputc+0x5a>
    2aae:	82 ff       	sbrs	r24, 2
    2ab0:	10 c0       	rjmp	.+32     	; 0x2ad2 <fputc+0x3e>
    2ab2:	4e 81       	ldd	r20, Y+6	; 0x06
    2ab4:	5f 81       	ldd	r21, Y+7	; 0x07
    2ab6:	2c 81       	ldd	r18, Y+4	; 0x04
    2ab8:	3d 81       	ldd	r19, Y+5	; 0x05
    2aba:	42 17       	cp	r20, r18
    2abc:	53 07       	cpc	r21, r19
    2abe:	7c f4       	brge	.+30     	; 0x2ade <fputc+0x4a>
    2ac0:	e8 81       	ld	r30, Y
    2ac2:	f9 81       	ldd	r31, Y+1	; 0x01
    2ac4:	9f 01       	movw	r18, r30
    2ac6:	2f 5f       	subi	r18, 0xFF	; 255
    2ac8:	3f 4f       	sbci	r19, 0xFF	; 255
    2aca:	39 83       	std	Y+1, r19	; 0x01
    2acc:	28 83       	st	Y, r18
    2ace:	10 83       	st	Z, r17
    2ad0:	06 c0       	rjmp	.+12     	; 0x2ade <fputc+0x4a>
    2ad2:	e8 85       	ldd	r30, Y+8	; 0x08
    2ad4:	f9 85       	ldd	r31, Y+9	; 0x09
    2ad6:	81 2f       	mov	r24, r17
    2ad8:	19 95       	eicall
    2ada:	89 2b       	or	r24, r25
    2adc:	29 f7       	brne	.-54     	; 0x2aa8 <fputc+0x14>
    2ade:	2e 81       	ldd	r18, Y+6	; 0x06
    2ae0:	3f 81       	ldd	r19, Y+7	; 0x07
    2ae2:	2f 5f       	subi	r18, 0xFF	; 255
    2ae4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ae6:	3f 83       	std	Y+7, r19	; 0x07
    2ae8:	2e 83       	std	Y+6, r18	; 0x06
    2aea:	81 2f       	mov	r24, r17
    2aec:	90 2f       	mov	r25, r16
    2aee:	df 91       	pop	r29
    2af0:	cf 91       	pop	r28
    2af2:	1f 91       	pop	r17
    2af4:	0f 91       	pop	r16
    2af6:	08 95       	ret

00002af8 <__ultoa_invert>:
    2af8:	fa 01       	movw	r30, r20
    2afa:	aa 27       	eor	r26, r26
    2afc:	28 30       	cpi	r18, 0x08	; 8
    2afe:	51 f1       	breq	.+84     	; 0x2b54 <__ultoa_invert+0x5c>
    2b00:	20 31       	cpi	r18, 0x10	; 16
    2b02:	81 f1       	breq	.+96     	; 0x2b64 <__ultoa_invert+0x6c>
    2b04:	e8 94       	clt
    2b06:	6f 93       	push	r22
    2b08:	6e 7f       	andi	r22, 0xFE	; 254
    2b0a:	6e 5f       	subi	r22, 0xFE	; 254
    2b0c:	7f 4f       	sbci	r23, 0xFF	; 255
    2b0e:	8f 4f       	sbci	r24, 0xFF	; 255
    2b10:	9f 4f       	sbci	r25, 0xFF	; 255
    2b12:	af 4f       	sbci	r26, 0xFF	; 255
    2b14:	b1 e0       	ldi	r27, 0x01	; 1
    2b16:	3e d0       	rcall	.+124    	; 0x2b94 <__ultoa_invert+0x9c>
    2b18:	b4 e0       	ldi	r27, 0x04	; 4
    2b1a:	3c d0       	rcall	.+120    	; 0x2b94 <__ultoa_invert+0x9c>
    2b1c:	67 0f       	add	r22, r23
    2b1e:	78 1f       	adc	r23, r24
    2b20:	89 1f       	adc	r24, r25
    2b22:	9a 1f       	adc	r25, r26
    2b24:	a1 1d       	adc	r26, r1
    2b26:	68 0f       	add	r22, r24
    2b28:	79 1f       	adc	r23, r25
    2b2a:	8a 1f       	adc	r24, r26
    2b2c:	91 1d       	adc	r25, r1
    2b2e:	a1 1d       	adc	r26, r1
    2b30:	6a 0f       	add	r22, r26
    2b32:	71 1d       	adc	r23, r1
    2b34:	81 1d       	adc	r24, r1
    2b36:	91 1d       	adc	r25, r1
    2b38:	a1 1d       	adc	r26, r1
    2b3a:	20 d0       	rcall	.+64     	; 0x2b7c <__ultoa_invert+0x84>
    2b3c:	09 f4       	brne	.+2      	; 0x2b40 <__ultoa_invert+0x48>
    2b3e:	68 94       	set
    2b40:	3f 91       	pop	r19
    2b42:	2a e0       	ldi	r18, 0x0A	; 10
    2b44:	26 9f       	mul	r18, r22
    2b46:	11 24       	eor	r1, r1
    2b48:	30 19       	sub	r19, r0
    2b4a:	30 5d       	subi	r19, 0xD0	; 208
    2b4c:	31 93       	st	Z+, r19
    2b4e:	de f6       	brtc	.-74     	; 0x2b06 <__ultoa_invert+0xe>
    2b50:	cf 01       	movw	r24, r30
    2b52:	08 95       	ret
    2b54:	46 2f       	mov	r20, r22
    2b56:	47 70       	andi	r20, 0x07	; 7
    2b58:	40 5d       	subi	r20, 0xD0	; 208
    2b5a:	41 93       	st	Z+, r20
    2b5c:	b3 e0       	ldi	r27, 0x03	; 3
    2b5e:	0f d0       	rcall	.+30     	; 0x2b7e <__ultoa_invert+0x86>
    2b60:	c9 f7       	brne	.-14     	; 0x2b54 <__ultoa_invert+0x5c>
    2b62:	f6 cf       	rjmp	.-20     	; 0x2b50 <__ultoa_invert+0x58>
    2b64:	46 2f       	mov	r20, r22
    2b66:	4f 70       	andi	r20, 0x0F	; 15
    2b68:	40 5d       	subi	r20, 0xD0	; 208
    2b6a:	4a 33       	cpi	r20, 0x3A	; 58
    2b6c:	18 f0       	brcs	.+6      	; 0x2b74 <__ultoa_invert+0x7c>
    2b6e:	49 5d       	subi	r20, 0xD9	; 217
    2b70:	31 fd       	sbrc	r19, 1
    2b72:	40 52       	subi	r20, 0x20	; 32
    2b74:	41 93       	st	Z+, r20
    2b76:	02 d0       	rcall	.+4      	; 0x2b7c <__ultoa_invert+0x84>
    2b78:	a9 f7       	brne	.-22     	; 0x2b64 <__ultoa_invert+0x6c>
    2b7a:	ea cf       	rjmp	.-44     	; 0x2b50 <__ultoa_invert+0x58>
    2b7c:	b4 e0       	ldi	r27, 0x04	; 4
    2b7e:	a6 95       	lsr	r26
    2b80:	97 95       	ror	r25
    2b82:	87 95       	ror	r24
    2b84:	77 95       	ror	r23
    2b86:	67 95       	ror	r22
    2b88:	ba 95       	dec	r27
    2b8a:	c9 f7       	brne	.-14     	; 0x2b7e <__ultoa_invert+0x86>
    2b8c:	00 97       	sbiw	r24, 0x00	; 0
    2b8e:	61 05       	cpc	r22, r1
    2b90:	71 05       	cpc	r23, r1
    2b92:	08 95       	ret
    2b94:	9b 01       	movw	r18, r22
    2b96:	ac 01       	movw	r20, r24
    2b98:	0a 2e       	mov	r0, r26
    2b9a:	06 94       	lsr	r0
    2b9c:	57 95       	ror	r21
    2b9e:	47 95       	ror	r20
    2ba0:	37 95       	ror	r19
    2ba2:	27 95       	ror	r18
    2ba4:	ba 95       	dec	r27
    2ba6:	c9 f7       	brne	.-14     	; 0x2b9a <__ultoa_invert+0xa2>
    2ba8:	62 0f       	add	r22, r18
    2baa:	73 1f       	adc	r23, r19
    2bac:	84 1f       	adc	r24, r20
    2bae:	95 1f       	adc	r25, r21
    2bb0:	a0 1d       	adc	r26, r0
    2bb2:	08 95       	ret

00002bb4 <_exit>:
    2bb4:	f8 94       	cli

00002bb6 <__stop_program>:
    2bb6:	ff cf       	rjmp	.-2      	; 0x2bb6 <__stop_program>

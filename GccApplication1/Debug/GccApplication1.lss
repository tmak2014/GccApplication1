
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00001194  00800200  000030a2  00003136  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000030a2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003d6  00801394  00801394  000042ca  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000042ca  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000190  00000000  00000000  00004326  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000004bb  00000000  00000000  000044b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002e71  00000000  00000000  00004971  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b1f  00000000  00000000  000077e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001d88  00000000  00000000  00008301  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000790  00000000  00000000  0000a08c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d9a  00000000  00000000  0000a81c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001a88  00000000  00000000  0000b5b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  0000d03e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	6c c0       	rjmp	.+216    	; 0xda <__ctors_end>
       2:	00 00       	nop
       4:	8b c0       	rjmp	.+278    	; 0x11c <__bad_interrupt>
       6:	00 00       	nop
       8:	89 c0       	rjmp	.+274    	; 0x11c <__bad_interrupt>
       a:	00 00       	nop
       c:	87 c0       	rjmp	.+270    	; 0x11c <__bad_interrupt>
       e:	00 00       	nop
      10:	85 c0       	rjmp	.+266    	; 0x11c <__bad_interrupt>
      12:	00 00       	nop
      14:	83 c0       	rjmp	.+262    	; 0x11c <__bad_interrupt>
      16:	00 00       	nop
      18:	81 c0       	rjmp	.+258    	; 0x11c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	7f c0       	rjmp	.+254    	; 0x11c <__bad_interrupt>
      1e:	00 00       	nop
      20:	7d c0       	rjmp	.+250    	; 0x11c <__bad_interrupt>
      22:	00 00       	nop
      24:	7b c0       	rjmp	.+246    	; 0x11c <__bad_interrupt>
      26:	00 00       	nop
      28:	79 c0       	rjmp	.+242    	; 0x11c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	77 c0       	rjmp	.+238    	; 0x11c <__bad_interrupt>
      2e:	00 00       	nop
      30:	75 c0       	rjmp	.+234    	; 0x11c <__bad_interrupt>
      32:	00 00       	nop
      34:	73 c0       	rjmp	.+230    	; 0x11c <__bad_interrupt>
      36:	00 00       	nop
      38:	71 c0       	rjmp	.+226    	; 0x11c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	6f c0       	rjmp	.+222    	; 0x11c <__bad_interrupt>
      3e:	00 00       	nop
      40:	6d c0       	rjmp	.+218    	; 0x11c <__bad_interrupt>
      42:	00 00       	nop
      44:	6b c0       	rjmp	.+214    	; 0x11c <__bad_interrupt>
      46:	00 00       	nop
      48:	69 c0       	rjmp	.+210    	; 0x11c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	67 c0       	rjmp	.+206    	; 0x11c <__bad_interrupt>
      4e:	00 00       	nop
      50:	65 c0       	rjmp	.+202    	; 0x11c <__bad_interrupt>
      52:	00 00       	nop
      54:	63 c0       	rjmp	.+198    	; 0x11c <__bad_interrupt>
      56:	00 00       	nop
      58:	61 c0       	rjmp	.+194    	; 0x11c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	5f c0       	rjmp	.+190    	; 0x11c <__bad_interrupt>
      5e:	00 00       	nop
      60:	5d c0       	rjmp	.+186    	; 0x11c <__bad_interrupt>
      62:	00 00       	nop
      64:	2b c4       	rjmp	.+2134   	; 0x8bc <__vector_25>
      66:	00 00       	nop
      68:	59 c0       	rjmp	.+178    	; 0x11c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	57 c0       	rjmp	.+174    	; 0x11c <__bad_interrupt>
      6e:	00 00       	nop
      70:	55 c0       	rjmp	.+170    	; 0x11c <__bad_interrupt>
      72:	00 00       	nop
      74:	53 c0       	rjmp	.+166    	; 0x11c <__bad_interrupt>
      76:	00 00       	nop
      78:	51 c0       	rjmp	.+162    	; 0x11c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	4f c0       	rjmp	.+158    	; 0x11c <__bad_interrupt>
      7e:	00 00       	nop
      80:	4d c0       	rjmp	.+154    	; 0x11c <__bad_interrupt>
      82:	00 00       	nop
      84:	4b c0       	rjmp	.+150    	; 0x11c <__bad_interrupt>
      86:	00 00       	nop
      88:	49 c0       	rjmp	.+146    	; 0x11c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	47 c0       	rjmp	.+142    	; 0x11c <__bad_interrupt>
      8e:	00 00       	nop
      90:	1a c5       	rjmp	.+2612   	; 0xac6 <__vector_36>
      92:	00 00       	nop
      94:	43 c0       	rjmp	.+134    	; 0x11c <__bad_interrupt>
      96:	00 00       	nop
      98:	41 c0       	rjmp	.+130    	; 0x11c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	3f c0       	rjmp	.+126    	; 0x11c <__bad_interrupt>
      9e:	00 00       	nop
      a0:	3d c0       	rjmp	.+122    	; 0x11c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3b c0       	rjmp	.+118    	; 0x11c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	39 c0       	rjmp	.+114    	; 0x11c <__bad_interrupt>
      aa:	00 00       	nop
      ac:	37 c0       	rjmp	.+110    	; 0x11c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	35 c0       	rjmp	.+106    	; 0x11c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	33 c0       	rjmp	.+102    	; 0x11c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	31 c0       	rjmp	.+98     	; 0x11c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	2f c0       	rjmp	.+94     	; 0x11c <__bad_interrupt>
      be:	00 00       	nop
      c0:	2d c0       	rjmp	.+90     	; 0x11c <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2b c0       	rjmp	.+86     	; 0x11c <__bad_interrupt>
      c6:	00 00       	nop
      c8:	29 c0       	rjmp	.+82     	; 0x11c <__bad_interrupt>
      ca:	00 00       	nop
      cc:	38 0b       	sbc	r19, r24
      ce:	44 0b       	sbc	r20, r20
      d0:	50 0b       	sbc	r21, r16
      d2:	5c 0b       	sbc	r21, r28
      d4:	68 0b       	sbc	r22, r24
      d6:	74 0b       	sbc	r23, r20
      d8:	80 0b       	sbc	r24, r16

000000da <__ctors_end>:
      da:	11 24       	eor	r1, r1
      dc:	1f be       	out	0x3f, r1	; 63
      de:	cf ef       	ldi	r28, 0xFF	; 255
      e0:	d1 e2       	ldi	r29, 0x21	; 33
      e2:	de bf       	out	0x3e, r29	; 62
      e4:	cd bf       	out	0x3d, r28	; 61
      e6:	00 e0       	ldi	r16, 0x00	; 0
      e8:	0c bf       	out	0x3c, r16	; 60

000000ea <__do_copy_data>:
      ea:	13 e1       	ldi	r17, 0x13	; 19
      ec:	a0 e0       	ldi	r26, 0x00	; 0
      ee:	b2 e0       	ldi	r27, 0x02	; 2
      f0:	e2 ea       	ldi	r30, 0xA2	; 162
      f2:	f0 e3       	ldi	r31, 0x30	; 48
      f4:	00 e0       	ldi	r16, 0x00	; 0
      f6:	0b bf       	out	0x3b, r16	; 59
      f8:	02 c0       	rjmp	.+4      	; 0xfe <__do_copy_data+0x14>
      fa:	07 90       	elpm	r0, Z+
      fc:	0d 92       	st	X+, r0
      fe:	a4 39       	cpi	r26, 0x94	; 148
     100:	b1 07       	cpc	r27, r17
     102:	d9 f7       	brne	.-10     	; 0xfa <__do_copy_data+0x10>

00000104 <__do_clear_bss>:
     104:	27 e1       	ldi	r18, 0x17	; 23
     106:	a4 e9       	ldi	r26, 0x94	; 148
     108:	b3 e1       	ldi	r27, 0x13	; 19
     10a:	01 c0       	rjmp	.+2      	; 0x10e <.do_clear_bss_start>

0000010c <.do_clear_bss_loop>:
     10c:	1d 92       	st	X+, r1

0000010e <.do_clear_bss_start>:
     10e:	aa 36       	cpi	r26, 0x6A	; 106
     110:	b2 07       	cpc	r27, r18
     112:	e1 f7       	brne	.-8      	; 0x10c <.do_clear_bss_loop>
     114:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <main>
     118:	0c 94 4f 18 	jmp	0x309e	; 0x309e <_exit>

0000011c <__bad_interrupt>:
     11c:	71 cf       	rjmp	.-286    	; 0x0 <__vectors>

0000011e <dxl_get_result>:
     11e:	80 91 00 02 	lds	r24, 0x0200
     122:	90 91 01 02 	lds	r25, 0x0201
     126:	08 95       	ret

00000128 <dxl_set_txpacket_id>:
     128:	80 93 96 13 	sts	0x1396, r24
     12c:	08 95       	ret

0000012e <dxl_set_txpacket_instruction>:
     12e:	80 93 98 13 	sts	0x1398, r24
     132:	08 95       	ret

00000134 <dxl_set_txpacket_parameter>:
     134:	fc 01       	movw	r30, r24
     136:	ec 56       	subi	r30, 0x6C	; 108
     138:	fc 4e       	sbci	r31, 0xEC	; 236
     13a:	65 83       	std	Z+5, r22	; 0x05
     13c:	08 95       	ret

0000013e <dxl_set_txpacket_length>:
     13e:	80 93 97 13 	sts	0x1397, r24
     142:	08 95       	ret

00000144 <dxl_get_rxpacket_error>:
     144:	20 e0       	ldi	r18, 0x00	; 0
     146:	30 e0       	ldi	r19, 0x00	; 0
     148:	90 91 38 14 	lds	r25, 0x1438
     14c:	98 23       	and	r25, r24
     14e:	11 f0       	breq	.+4      	; 0x154 <dxl_get_rxpacket_error+0x10>
     150:	21 e0       	ldi	r18, 0x01	; 1
     152:	30 e0       	ldi	r19, 0x00	; 0
     154:	c9 01       	movw	r24, r18
     156:	08 95       	ret

00000158 <dxl_get_rxpacket_length>:
     158:	80 91 37 14 	lds	r24, 0x1437
     15c:	90 e0       	ldi	r25, 0x00	; 0
     15e:	08 95       	ret

00000160 <dxl_get_rxpacket_parameter>:
     160:	fc 01       	movw	r30, r24
     162:	ec 5c       	subi	r30, 0xCC	; 204
     164:	fb 4e       	sbci	r31, 0xEB	; 235
     166:	85 81       	ldd	r24, Z+5	; 0x05
     168:	90 e0       	ldi	r25, 0x00	; 0
     16a:	08 95       	ret

0000016c <dxl_makeword>:
     16c:	36 2f       	mov	r19, r22
     16e:	20 e0       	ldi	r18, 0x00	; 0
     170:	28 0f       	add	r18, r24
     172:	39 1f       	adc	r19, r25
     174:	c9 01       	movw	r24, r18
     176:	08 95       	ret

00000178 <dxl_get_lowbyte>:
     178:	28 2f       	mov	r18, r24
     17a:	30 e0       	ldi	r19, 0x00	; 0
     17c:	c9 01       	movw	r24, r18
     17e:	08 95       	ret

00000180 <dxl_get_highbyte>:
     180:	80 70       	andi	r24, 0x00	; 0
     182:	89 2f       	mov	r24, r25
     184:	90 e0       	ldi	r25, 0x00	; 0
     186:	08 95       	ret

00000188 <dxl_rx_packet>:
     188:	0f 93       	push	r16
     18a:	1f 93       	push	r17
     18c:	cf 93       	push	r28
     18e:	df 93       	push	r29
     190:	80 91 7c 14 	lds	r24, 0x147C
     194:	90 91 7d 14 	lds	r25, 0x147D
     198:	89 2b       	or	r24, r25
     19a:	09 f4       	brne	.+2      	; 0x19e <dxl_rx_packet+0x16>
     19c:	b8 c0       	rjmp	.+368    	; 0x30e <dxl_rx_packet+0x186>
     19e:	80 91 96 13 	lds	r24, 0x1396
     1a2:	8e 3f       	cpi	r24, 0xFE	; 254
     1a4:	09 f4       	brne	.+2      	; 0x1a8 <dxl_rx_packet+0x20>
     1a6:	a9 c0       	rjmp	.+338    	; 0x2fa <dxl_rx_packet+0x172>
     1a8:	80 91 00 02 	lds	r24, 0x0200
     1ac:	90 91 01 02 	lds	r25, 0x0201
     1b0:	89 2b       	or	r24, r25
     1b2:	29 f4       	brne	.+10     	; 0x1be <dxl_rx_packet+0x36>
     1b4:	10 92 7b 14 	sts	0x147B, r1
     1b8:	86 e0       	ldi	r24, 0x06	; 6
     1ba:	80 93 7a 14 	sts	0x147A, r24
     1be:	80 91 7b 14 	lds	r24, 0x147B
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	60 91 7a 14 	lds	r22, 0x147A
     1c8:	70 e0       	ldi	r23, 0x00	; 0
     1ca:	68 1b       	sub	r22, r24
     1cc:	79 0b       	sbc	r23, r25
     1ce:	8c 5c       	subi	r24, 0xCC	; 204
     1d0:	9b 4e       	sbci	r25, 0xEB	; 235
     1d2:	49 d3       	rcall	.+1682   	; 0x866 <dxl_hal_rx>
     1d4:	90 91 7b 14 	lds	r25, 0x147B
     1d8:	98 0f       	add	r25, r24
     1da:	90 93 7b 14 	sts	0x147B, r25
     1de:	80 91 7a 14 	lds	r24, 0x147A
     1e2:	98 17       	cp	r25, r24
     1e4:	18 f4       	brcc	.+6      	; 0x1ec <dxl_rx_packet+0x64>
     1e6:	4a d2       	rcall	.+1172   	; 0x67c <dxl_hal_timeout>
     1e8:	01 97       	sbiw	r24, 0x01	; 1
     1ea:	71 f0       	breq	.+28     	; 0x208 <dxl_rx_packet+0x80>
     1ec:	70 91 7b 14 	lds	r23, 0x147B
     1f0:	47 2f       	mov	r20, r23
     1f2:	50 e0       	ldi	r21, 0x00	; 0
     1f4:	da 01       	movw	r26, r20
     1f6:	11 97       	sbiw	r26, 0x01	; 1
     1f8:	8a 01       	movw	r16, r20
     1fa:	02 50       	subi	r16, 0x02	; 2
     1fc:	10 40       	sbci	r17, 0x00	; 0
     1fe:	60 e0       	ldi	r22, 0x00	; 0
     200:	ed 01       	movw	r28, r26
     202:	cc 5c       	subi	r28, 0xCC	; 204
     204:	db 4e       	sbci	r29, 0xEB	; 235
     206:	18 c0       	rjmp	.+48     	; 0x238 <dxl_rx_packet+0xb0>
     208:	80 91 7b 14 	lds	r24, 0x147B
     20c:	88 23       	and	r24, r24
     20e:	09 f0       	breq	.+2      	; 0x212 <dxl_rx_packet+0x8a>
     210:	71 c0       	rjmp	.+226    	; 0x2f4 <dxl_rx_packet+0x16c>
     212:	86 e0       	ldi	r24, 0x06	; 6
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	73 c0       	rjmp	.+230    	; 0x2fe <dxl_rx_packet+0x176>
     218:	f9 01       	movw	r30, r18
     21a:	ec 5c       	subi	r30, 0xCC	; 204
     21c:	fb 4e       	sbci	r31, 0xEB	; 235
     21e:	80 81       	ld	r24, Z
     220:	8f 3f       	cpi	r24, 0xFF	; 255
     222:	19 f4       	brne	.+6      	; 0x22a <dxl_rx_packet+0xa2>
     224:	81 81       	ldd	r24, Z+1	; 0x01
     226:	8f 3f       	cpi	r24, 0xFF	; 255
     228:	61 f0       	breq	.+24     	; 0x242 <dxl_rx_packet+0xba>
     22a:	20 17       	cp	r18, r16
     22c:	31 07       	cpc	r19, r17
     22e:	19 f4       	brne	.+6      	; 0x236 <dxl_rx_packet+0xae>
     230:	88 81       	ld	r24, Y
     232:	8f 3f       	cpi	r24, 0xFF	; 255
     234:	31 f0       	breq	.+12     	; 0x242 <dxl_rx_packet+0xba>
     236:	6f 5f       	subi	r22, 0xFF	; 255
     238:	26 2f       	mov	r18, r22
     23a:	30 e0       	ldi	r19, 0x00	; 0
     23c:	2a 17       	cp	r18, r26
     23e:	3b 07       	cpc	r19, r27
     240:	5c f3       	brlt	.-42     	; 0x218 <dxl_rx_packet+0x90>
     242:	66 23       	and	r22, r22
     244:	a1 f0       	breq	.+40     	; 0x26e <dxl_rx_packet+0xe6>
     246:	90 e0       	ldi	r25, 0x00	; 0
     248:	42 1b       	sub	r20, r18
     24a:	53 0b       	sbc	r21, r19
     24c:	08 c0       	rjmp	.+16     	; 0x25e <dxl_rx_packet+0xd6>
     24e:	ec 5c       	subi	r30, 0xCC	; 204
     250:	fb 4e       	sbci	r31, 0xEB	; 235
     252:	df 01       	movw	r26, r30
     254:	a2 0f       	add	r26, r18
     256:	b3 1f       	adc	r27, r19
     258:	8c 91       	ld	r24, X
     25a:	80 83       	st	Z, r24
     25c:	9f 5f       	subi	r25, 0xFF	; 255
     25e:	e9 2f       	mov	r30, r25
     260:	f0 e0       	ldi	r31, 0x00	; 0
     262:	e4 17       	cp	r30, r20
     264:	f5 07       	cpc	r31, r21
     266:	9c f3       	brlt	.-26     	; 0x24e <dxl_rx_packet+0xc6>
     268:	76 1b       	sub	r23, r22
     26a:	70 93 7b 14 	sts	0x147B, r23
     26e:	20 91 7b 14 	lds	r18, 0x147B
     272:	80 91 7a 14 	lds	r24, 0x147A
     276:	28 17       	cp	r18, r24
     278:	28 f1       	brcs	.+74     	; 0x2c4 <dxl_rx_packet+0x13c>
     27a:	90 91 96 13 	lds	r25, 0x1396
     27e:	80 91 36 14 	lds	r24, 0x1436
     282:	98 17       	cp	r25, r24
     284:	b9 f5       	brne	.+110    	; 0x2f4 <dxl_rx_packet+0x16c>
     286:	60 91 37 14 	lds	r22, 0x1437
     28a:	6c 5f       	subi	r22, 0xFC	; 252
     28c:	60 93 7a 14 	sts	0x147A, r22
     290:	26 17       	cp	r18, r22
     292:	88 f4       	brcc	.+34     	; 0x2b6 <dxl_rx_packet+0x12e>
     294:	82 2f       	mov	r24, r18
     296:	90 e0       	ldi	r25, 0x00	; 0
     298:	70 e0       	ldi	r23, 0x00	; 0
     29a:	68 1b       	sub	r22, r24
     29c:	79 0b       	sbc	r23, r25
     29e:	8c 5c       	subi	r24, 0xCC	; 204
     2a0:	9b 4e       	sbci	r25, 0xEB	; 235
     2a2:	e1 d2       	rcall	.+1474   	; 0x866 <dxl_hal_rx>
     2a4:	90 91 7b 14 	lds	r25, 0x147B
     2a8:	98 0f       	add	r25, r24
     2aa:	90 93 7b 14 	sts	0x147B, r25
     2ae:	80 91 7a 14 	lds	r24, 0x147A
     2b2:	98 17       	cp	r25, r24
     2b4:	38 f0       	brcs	.+14     	; 0x2c4 <dxl_rx_packet+0x13c>
     2b6:	80 91 37 14 	lds	r24, 0x1437
     2ba:	a8 2f       	mov	r26, r24
     2bc:	b0 e0       	ldi	r27, 0x00	; 0
     2be:	20 e0       	ldi	r18, 0x00	; 0
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	0c c0       	rjmp	.+24     	; 0x2dc <dxl_rx_packet+0x154>
     2c4:	85 e0       	ldi	r24, 0x05	; 5
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	90 93 01 02 	sts	0x0201, r25
     2cc:	80 93 00 02 	sts	0x0200, r24
     2d0:	1e c0       	rjmp	.+60     	; 0x30e <dxl_rx_packet+0x186>
     2d2:	ec 5c       	subi	r30, 0xCC	; 204
     2d4:	fb 4e       	sbci	r31, 0xEB	; 235
     2d6:	82 81       	ldd	r24, Z+2	; 0x02
     2d8:	98 0f       	add	r25, r24
     2da:	2f 5f       	subi	r18, 0xFF	; 255
     2dc:	e2 2f       	mov	r30, r18
     2de:	f0 e0       	ldi	r31, 0x00	; 0
     2e0:	ae 17       	cp	r26, r30
     2e2:	bf 07       	cpc	r27, r31
     2e4:	b4 f7       	brge	.-20     	; 0x2d2 <dxl_rx_packet+0x14a>
     2e6:	ac 5c       	subi	r26, 0xCC	; 204
     2e8:	bb 4e       	sbci	r27, 0xEB	; 235
     2ea:	90 95       	com	r25
     2ec:	13 96       	adiw	r26, 0x03	; 3
     2ee:	8c 91       	ld	r24, X
     2f0:	89 17       	cp	r24, r25
     2f2:	19 f0       	breq	.+6      	; 0x2fa <dxl_rx_packet+0x172>
     2f4:	87 e0       	ldi	r24, 0x07	; 7
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	02 c0       	rjmp	.+4      	; 0x2fe <dxl_rx_packet+0x176>
     2fa:	81 e0       	ldi	r24, 0x01	; 1
     2fc:	90 e0       	ldi	r25, 0x00	; 0
     2fe:	90 93 01 02 	sts	0x0201, r25
     302:	80 93 00 02 	sts	0x0200, r24
     306:	10 92 7d 14 	sts	0x147D, r1
     30a:	10 92 7c 14 	sts	0x147C, r1
     30e:	df 91       	pop	r29
     310:	cf 91       	pop	r28
     312:	1f 91       	pop	r17
     314:	0f 91       	pop	r16
     316:	08 95       	ret

00000318 <dxl_tx_packet>:
     318:	1f 93       	push	r17
     31a:	80 91 7c 14 	lds	r24, 0x147C
     31e:	90 91 7d 14 	lds	r25, 0x147D
     322:	01 97       	sbiw	r24, 0x01	; 1
     324:	09 f4       	brne	.+2      	; 0x328 <dxl_tx_packet+0x10>
     326:	5d c0       	rjmp	.+186    	; 0x3e2 <dxl_tx_packet+0xca>
     328:	81 e0       	ldi	r24, 0x01	; 1
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	90 93 7d 14 	sts	0x147D, r25
     330:	80 93 7c 14 	sts	0x147C, r24
     334:	80 91 97 13 	lds	r24, 0x1397
     338:	89 39       	cpi	r24, 0x99	; 153
     33a:	40 f4       	brcc	.+16     	; 0x34c <dxl_tx_packet+0x34>
     33c:	90 91 98 13 	lds	r25, 0x1398
     340:	89 2f       	mov	r24, r25
     342:	81 50       	subi	r24, 0x01	; 1
     344:	86 30       	cpi	r24, 0x06	; 6
     346:	28 f0       	brcs	.+10     	; 0x352 <dxl_tx_packet+0x3a>
     348:	93 38       	cpi	r25, 0x83	; 131
     34a:	19 f0       	breq	.+6      	; 0x352 <dxl_tx_packet+0x3a>
     34c:	84 e0       	ldi	r24, 0x04	; 4
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	2f c0       	rjmp	.+94     	; 0x3b0 <dxl_tx_packet+0x98>
     352:	8f ef       	ldi	r24, 0xFF	; 255
     354:	80 93 94 13 	sts	0x1394, r24
     358:	80 93 95 13 	sts	0x1395, r24
     35c:	80 91 97 13 	lds	r24, 0x1397
     360:	a8 2f       	mov	r26, r24
     362:	b0 e0       	ldi	r27, 0x00	; 0
     364:	20 e0       	ldi	r18, 0x00	; 0
     366:	90 e0       	ldi	r25, 0x00	; 0
     368:	05 c0       	rjmp	.+10     	; 0x374 <dxl_tx_packet+0x5c>
     36a:	ec 56       	subi	r30, 0x6C	; 108
     36c:	fc 4e       	sbci	r31, 0xEC	; 236
     36e:	82 81       	ldd	r24, Z+2	; 0x02
     370:	98 0f       	add	r25, r24
     372:	2f 5f       	subi	r18, 0xFF	; 255
     374:	e2 2f       	mov	r30, r18
     376:	f0 e0       	ldi	r31, 0x00	; 0
     378:	ae 17       	cp	r26, r30
     37a:	bf 07       	cpc	r27, r31
     37c:	b4 f7       	brge	.-20     	; 0x36a <dxl_tx_packet+0x52>
     37e:	ac 56       	subi	r26, 0x6C	; 108
     380:	bc 4e       	sbci	r27, 0xEC	; 236
     382:	90 95       	com	r25
     384:	13 96       	adiw	r26, 0x03	; 3
     386:	9c 93       	st	X, r25
     388:	80 91 00 02 	lds	r24, 0x0200
     38c:	90 91 01 02 	lds	r25, 0x0201
     390:	06 97       	sbiw	r24, 0x06	; 6
     392:	02 97       	sbiw	r24, 0x02	; 2
     394:	08 f4       	brcc	.+2      	; 0x398 <dxl_tx_packet+0x80>
     396:	38 d1       	rcall	.+624    	; 0x608 <dxl_hal_clear>
     398:	10 91 97 13 	lds	r17, 0x1397
     39c:	1c 5f       	subi	r17, 0xFC	; 252
     39e:	84 e9       	ldi	r24, 0x94	; 148
     3a0:	93 e1       	ldi	r25, 0x13	; 19
     3a2:	61 2f       	mov	r22, r17
     3a4:	70 e0       	ldi	r23, 0x00	; 0
     3a6:	35 d1       	rcall	.+618    	; 0x612 <dxl_hal_tx>
     3a8:	18 17       	cp	r17, r24
     3aa:	59 f0       	breq	.+22     	; 0x3c2 <dxl_tx_packet+0xaa>
     3ac:	82 e0       	ldi	r24, 0x02	; 2
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	90 93 01 02 	sts	0x0201, r25
     3b4:	80 93 00 02 	sts	0x0200, r24
     3b8:	10 92 7d 14 	sts	0x147D, r1
     3bc:	10 92 7c 14 	sts	0x147C, r1
     3c0:	10 c0       	rjmp	.+32     	; 0x3e2 <dxl_tx_packet+0xca>
     3c2:	80 91 98 13 	lds	r24, 0x1398
     3c6:	82 30       	cpi	r24, 0x02	; 2
     3c8:	29 f4       	brne	.+10     	; 0x3d4 <dxl_tx_packet+0xbc>
     3ca:	80 91 9a 13 	lds	r24, 0x139A
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	06 96       	adiw	r24, 0x06	; 6
     3d2:	02 c0       	rjmp	.+4      	; 0x3d8 <dxl_tx_packet+0xc0>
     3d4:	86 e0       	ldi	r24, 0x06	; 6
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	40 d1       	rcall	.+640    	; 0x65a <dxl_hal_set_timeout>
     3da:	10 92 01 02 	sts	0x0201, r1
     3de:	10 92 00 02 	sts	0x0200, r1
     3e2:	1f 91       	pop	r17
     3e4:	08 95       	ret

000003e6 <dxl_txrx_packet>:
     3e6:	98 df       	rcall	.-208    	; 0x318 <dxl_tx_packet>
     3e8:	80 91 00 02 	lds	r24, 0x0200
     3ec:	90 91 01 02 	lds	r25, 0x0201
     3f0:	89 2b       	or	r24, r25
     3f2:	39 f4       	brne	.+14     	; 0x402 <dxl_txrx_packet+0x1c>
     3f4:	c9 de       	rcall	.-622    	; 0x188 <dxl_rx_packet>
     3f6:	80 91 00 02 	lds	r24, 0x0200
     3fa:	90 91 01 02 	lds	r25, 0x0201
     3fe:	05 97       	sbiw	r24, 0x05	; 5
     400:	c9 f3       	breq	.-14     	; 0x3f4 <dxl_txrx_packet+0xe>
     402:	08 95       	ret

00000404 <dxl_write_word>:
     404:	28 2f       	mov	r18, r24
     406:	80 91 7c 14 	lds	r24, 0x147C
     40a:	90 91 7d 14 	lds	r25, 0x147D
     40e:	89 2b       	or	r24, r25
     410:	91 f4       	brne	.+36     	; 0x436 <dxl_write_word+0x32>
     412:	20 93 96 13 	sts	0x1396, r18
     416:	83 e0       	ldi	r24, 0x03	; 3
     418:	80 93 98 13 	sts	0x1398, r24
     41c:	60 93 99 13 	sts	0x1399, r22
     420:	ca 01       	movw	r24, r20
     422:	40 93 9a 13 	sts	0x139A, r20
     426:	80 70       	andi	r24, 0x00	; 0
     428:	90 93 9b 13 	sts	0x139B, r25
     42c:	85 e0       	ldi	r24, 0x05	; 5
     42e:	80 93 97 13 	sts	0x1397, r24
     432:	d9 cf       	rjmp	.-78     	; 0x3e6 <dxl_txrx_packet>
     434:	08 95       	ret
     436:	ff cf       	rjmp	.-2      	; 0x436 <dxl_write_word+0x32>

00000438 <dxl_read_word>:
     438:	28 2f       	mov	r18, r24
     43a:	80 91 7c 14 	lds	r24, 0x147C
     43e:	90 91 7d 14 	lds	r25, 0x147D
     442:	89 2b       	or	r24, r25
     444:	b1 f4       	brne	.+44     	; 0x472 <dxl_read_word+0x3a>
     446:	20 93 96 13 	sts	0x1396, r18
     44a:	82 e0       	ldi	r24, 0x02	; 2
     44c:	80 93 98 13 	sts	0x1398, r24
     450:	60 93 99 13 	sts	0x1399, r22
     454:	80 93 9a 13 	sts	0x139A, r24
     458:	84 e0       	ldi	r24, 0x04	; 4
     45a:	80 93 97 13 	sts	0x1397, r24
     45e:	c3 df       	rcall	.-122    	; 0x3e6 <dxl_txrx_packet>
     460:	30 91 3a 14 	lds	r19, 0x143A
     464:	20 e0       	ldi	r18, 0x00	; 0
     466:	80 91 39 14 	lds	r24, 0x1439
     46a:	28 0f       	add	r18, r24
     46c:	31 1d       	adc	r19, r1
     46e:	c9 01       	movw	r24, r18
     470:	08 95       	ret
     472:	ff cf       	rjmp	.-2      	; 0x472 <dxl_read_word+0x3a>

00000474 <dxl_write_byte>:
     474:	28 2f       	mov	r18, r24
     476:	80 91 7c 14 	lds	r24, 0x147C
     47a:	90 91 7d 14 	lds	r25, 0x147D
     47e:	89 2b       	or	r24, r25
     480:	71 f4       	brne	.+28     	; 0x49e <dxl_write_byte+0x2a>
     482:	20 93 96 13 	sts	0x1396, r18
     486:	83 e0       	ldi	r24, 0x03	; 3
     488:	80 93 98 13 	sts	0x1398, r24
     48c:	60 93 99 13 	sts	0x1399, r22
     490:	40 93 9a 13 	sts	0x139A, r20
     494:	84 e0       	ldi	r24, 0x04	; 4
     496:	80 93 97 13 	sts	0x1397, r24
     49a:	a5 cf       	rjmp	.-182    	; 0x3e6 <dxl_txrx_packet>
     49c:	08 95       	ret
     49e:	ff cf       	rjmp	.-2      	; 0x49e <dxl_write_byte+0x2a>

000004a0 <dxl_read_byte>:
     4a0:	28 2f       	mov	r18, r24
     4a2:	80 91 7c 14 	lds	r24, 0x147C
     4a6:	90 91 7d 14 	lds	r25, 0x147D
     4aa:	89 2b       	or	r24, r25
     4ac:	91 f4       	brne	.+36     	; 0x4d2 <dxl_read_byte+0x32>
     4ae:	20 93 96 13 	sts	0x1396, r18
     4b2:	82 e0       	ldi	r24, 0x02	; 2
     4b4:	80 93 98 13 	sts	0x1398, r24
     4b8:	60 93 99 13 	sts	0x1399, r22
     4bc:	81 e0       	ldi	r24, 0x01	; 1
     4be:	80 93 9a 13 	sts	0x139A, r24
     4c2:	84 e0       	ldi	r24, 0x04	; 4
     4c4:	80 93 97 13 	sts	0x1397, r24
     4c8:	8e df       	rcall	.-228    	; 0x3e6 <dxl_txrx_packet>
     4ca:	80 91 39 14 	lds	r24, 0x1439
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	08 95       	ret
     4d2:	ff cf       	rjmp	.-2      	; 0x4d2 <dxl_read_byte+0x32>

000004d4 <dxl_ping>:
     4d4:	28 2f       	mov	r18, r24
     4d6:	80 91 7c 14 	lds	r24, 0x147C
     4da:	90 91 7d 14 	lds	r25, 0x147D
     4de:	89 2b       	or	r24, r25
     4e0:	51 f4       	brne	.+20     	; 0x4f6 <dxl_ping+0x22>
     4e2:	20 93 96 13 	sts	0x1396, r18
     4e6:	81 e0       	ldi	r24, 0x01	; 1
     4e8:	80 93 98 13 	sts	0x1398, r24
     4ec:	82 e0       	ldi	r24, 0x02	; 2
     4ee:	80 93 97 13 	sts	0x1397, r24
     4f2:	79 cf       	rjmp	.-270    	; 0x3e6 <dxl_txrx_packet>
     4f4:	08 95       	ret
     4f6:	ff cf       	rjmp	.-2      	; 0x4f6 <dxl_ping+0x22>

000004f8 <dxl_terminate>:
     4f8:	86 c0       	rjmp	.+268    	; 0x606 <dxl_hal_close>
     4fa:	08 95       	ret

000004fc <dxl_initialize>:
     4fc:	0f 93       	push	r16
     4fe:	1f 93       	push	r17
     500:	8c 01       	movw	r16, r24
     502:	6f 5f       	subi	r22, 0xFF	; 255
     504:	7f 4f       	sbci	r23, 0xFF	; 255
     506:	88 27       	eor	r24, r24
     508:	77 fd       	sbrc	r23, 7
     50a:	80 95       	com	r24
     50c:	98 2f       	mov	r25, r24
     50e:	0e 94 16 12 	call	0x242c	; 0x242c <__floatsisf>
     512:	9b 01       	movw	r18, r22
     514:	ac 01       	movw	r20, r24
     516:	60 e0       	ldi	r22, 0x00	; 0
     518:	74 e2       	ldi	r23, 0x24	; 36
     51a:	84 ef       	ldi	r24, 0xF4	; 244
     51c:	99 e4       	ldi	r25, 0x49	; 73
     51e:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <__divsf3>
     522:	ab 01       	movw	r20, r22
     524:	bc 01       	movw	r22, r24
     526:	c8 01       	movw	r24, r16
     528:	15 d0       	rcall	.+42     	; 0x554 <dxl_hal_open>
     52a:	89 2b       	or	r24, r25
     52c:	19 f4       	brne	.+6      	; 0x534 <dxl_initialize+0x38>
     52e:	20 e0       	ldi	r18, 0x00	; 0
     530:	30 e0       	ldi	r19, 0x00	; 0
     532:	0c c0       	rjmp	.+24     	; 0x54c <dxl_initialize+0x50>
     534:	81 e0       	ldi	r24, 0x01	; 1
     536:	90 e0       	ldi	r25, 0x00	; 0
     538:	90 93 01 02 	sts	0x0201, r25
     53c:	80 93 00 02 	sts	0x0200, r24
     540:	10 92 7d 14 	sts	0x147D, r1
     544:	10 92 7c 14 	sts	0x147C, r1
     548:	21 e0       	ldi	r18, 0x01	; 1
     54a:	30 e0       	ldi	r19, 0x00	; 0
     54c:	c9 01       	movw	r24, r18
     54e:	1f 91       	pop	r17
     550:	0f 91       	pop	r16
     552:	08 95       	ret

00000554 <dxl_hal_open>:
     554:	ef 92       	push	r14
     556:	ff 92       	push	r15
     558:	0f 93       	push	r16
     55a:	1f 93       	push	r17
     55c:	7a 01       	movw	r14, r20
     55e:	8b 01       	movw	r16, r22
     560:	82 e4       	ldi	r24, 0x42	; 66
     562:	80 93 c0 00 	sts	0x00C0, r24
     566:	88 e9       	ldi	r24, 0x98	; 152
     568:	80 93 c1 00 	sts	0x00C1, r24
     56c:	86 e0       	ldi	r24, 0x06	; 6
     56e:	80 93 c2 00 	sts	0x00C2, r24
     572:	60 e0       	ldi	r22, 0x00	; 0
     574:	74 e2       	ldi	r23, 0x24	; 36
     576:	84 ef       	ldi	r24, 0xF4	; 244
     578:	99 e4       	ldi	r25, 0x49	; 73
     57a:	a8 01       	movw	r20, r16
     57c:	97 01       	movw	r18, r14
     57e:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <__divsf3>
     582:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <__fixunssfsi>
     586:	61 50       	subi	r22, 0x01	; 1
     588:	70 40       	sbci	r23, 0x00	; 0
     58a:	70 93 c5 00 	sts	0x00C5, r23
     58e:	60 93 c4 00 	sts	0x00C4, r22
     592:	60 e0       	ldi	r22, 0x00	; 0
     594:	74 e2       	ldi	r23, 0x24	; 36
     596:	84 e7       	ldi	r24, 0x74	; 116
     598:	99 e4       	ldi	r25, 0x49	; 73
     59a:	a8 01       	movw	r20, r16
     59c:	97 01       	movw	r18, r14
     59e:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <__divsf3>
     5a2:	20 e0       	ldi	r18, 0x00	; 0
     5a4:	30 e0       	ldi	r19, 0x00	; 0
     5a6:	40 e4       	ldi	r20, 0x40	; 64
     5a8:	51 e4       	ldi	r21, 0x41	; 65
     5aa:	0e 94 a2 12 	call	0x2544	; 0x2544 <__mulsf3>
     5ae:	60 93 58 17 	sts	0x1758, r22
     5b2:	70 93 59 17 	sts	0x1759, r23
     5b6:	80 93 5a 17 	sts	0x175A, r24
     5ba:	90 93 5b 17 	sts	0x175B, r25
     5be:	20 91 58 17 	lds	r18, 0x1758
     5c2:	30 91 59 17 	lds	r19, 0x1759
     5c6:	40 91 5a 17 	lds	r20, 0x175A
     5ca:	50 91 5b 17 	lds	r21, 0x175B
     5ce:	60 e0       	ldi	r22, 0x00	; 0
     5d0:	70 e0       	ldi	r23, 0x00	; 0
     5d2:	8a e7       	ldi	r24, 0x7A	; 122
     5d4:	93 e4       	ldi	r25, 0x43	; 67
     5d6:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <__divsf3>
     5da:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <__fixunssfsi>
     5de:	70 93 57 17 	sts	0x1757, r23
     5e2:	60 93 56 17 	sts	0x1756, r22
     5e6:	72 98       	cbi	0x0e, 2	; 14
     5e8:	73 9a       	sbi	0x0e, 3	; 14
     5ea:	8f ef       	ldi	r24, 0xFF	; 255
     5ec:	80 93 c6 00 	sts	0x00C6, r24
     5f0:	10 92 7e 15 	sts	0x157E, r1
     5f4:	10 92 7f 15 	sts	0x157F, r1
     5f8:	81 e0       	ldi	r24, 0x01	; 1
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	1f 91       	pop	r17
     5fe:	0f 91       	pop	r16
     600:	ff 90       	pop	r15
     602:	ef 90       	pop	r14
     604:	08 95       	ret

00000606 <dxl_hal_close>:
     606:	08 95       	ret

00000608 <dxl_hal_clear>:
     608:	80 91 7f 15 	lds	r24, 0x157F
     60c:	80 93 7e 15 	sts	0x157E, r24
     610:	08 95       	ret

00000612 <dxl_hal_tx>:
     612:	ac 01       	movw	r20, r24
     614:	f8 94       	cli
     616:	73 98       	cbi	0x0e, 3	; 14
     618:	72 9a       	sbi	0x0e, 2	; 14
     61a:	20 e0       	ldi	r18, 0x00	; 0
     61c:	30 e0       	ldi	r19, 0x00	; 0
     61e:	11 c0       	rjmp	.+34     	; 0x642 <dxl_hal_tx+0x30>
     620:	80 91 c0 00 	lds	r24, 0x00C0
     624:	85 ff       	sbrs	r24, 5
     626:	fc cf       	rjmp	.-8      	; 0x620 <dxl_hal_tx+0xe>
     628:	80 91 c0 00 	lds	r24, 0x00C0
     62c:	80 64       	ori	r24, 0x40	; 64
     62e:	80 93 c0 00 	sts	0x00C0, r24
     632:	fa 01       	movw	r30, r20
     634:	e2 0f       	add	r30, r18
     636:	f3 1f       	adc	r31, r19
     638:	80 81       	ld	r24, Z
     63a:	80 93 c6 00 	sts	0x00C6, r24
     63e:	2f 5f       	subi	r18, 0xFF	; 255
     640:	3f 4f       	sbci	r19, 0xFF	; 255
     642:	26 17       	cp	r18, r22
     644:	37 07       	cpc	r19, r23
     646:	64 f3       	brlt	.-40     	; 0x620 <dxl_hal_tx+0xe>
     648:	80 91 c0 00 	lds	r24, 0x00C0
     64c:	86 ff       	sbrs	r24, 6
     64e:	fc cf       	rjmp	.-8      	; 0x648 <dxl_hal_tx+0x36>
     650:	72 98       	cbi	0x0e, 2	; 14
     652:	73 9a       	sbi	0x0e, 3	; 14
     654:	78 94       	sei
     656:	c9 01       	movw	r24, r18
     658:	08 95       	ret

0000065a <dxl_hal_set_timeout>:
     65a:	10 92 5f 17 	sts	0x175F, r1
     65e:	10 92 5e 17 	sts	0x175E, r1
     662:	20 91 56 17 	lds	r18, 0x1756
     666:	30 91 57 17 	lds	r19, 0x1757
     66a:	26 5f       	subi	r18, 0xF6	; 246
     66c:	3f 4f       	sbci	r19, 0xFF	; 255
     66e:	28 0f       	add	r18, r24
     670:	39 1f       	adc	r19, r25
     672:	30 93 5d 17 	sts	0x175D, r19
     676:	20 93 5c 17 	sts	0x175C, r18
     67a:	08 95       	ret

0000067c <dxl_hal_timeout>:
     67c:	af 92       	push	r10
     67e:	bf 92       	push	r11
     680:	cf 92       	push	r12
     682:	df 92       	push	r13
     684:	ef 92       	push	r14
     686:	ff 92       	push	r15
     688:	0f 93       	push	r16
     68a:	1f 93       	push	r17
     68c:	80 91 5e 17 	lds	r24, 0x175E
     690:	90 91 5f 17 	lds	r25, 0x175F
     694:	01 96       	adiw	r24, 0x01	; 1
     696:	90 93 5f 17 	sts	0x175F, r25
     69a:	80 93 5e 17 	sts	0x175E, r24
     69e:	20 91 5e 17 	lds	r18, 0x175E
     6a2:	30 91 5f 17 	lds	r19, 0x175F
     6a6:	80 91 5c 17 	lds	r24, 0x175C
     6aa:	90 91 5d 17 	lds	r25, 0x175D
     6ae:	82 17       	cp	r24, r18
     6b0:	93 07       	cpc	r25, r19
     6b2:	18 f4       	brcc	.+6      	; 0x6ba <dxl_hal_timeout+0x3e>
     6b4:	21 e0       	ldi	r18, 0x01	; 1
     6b6:	30 e0       	ldi	r19, 0x00	; 0
     6b8:	74 c0       	rjmp	.+232    	; 0x7a2 <dxl_hal_timeout+0x126>
     6ba:	a0 90 58 17 	lds	r10, 0x1758
     6be:	b0 90 59 17 	lds	r11, 0x1759
     6c2:	c0 90 5a 17 	lds	r12, 0x175A
     6c6:	d0 90 5b 17 	lds	r13, 0x175B
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     6ca:	c6 01       	movw	r24, r12
     6cc:	b5 01       	movw	r22, r10
     6ce:	2b ea       	ldi	r18, 0xAB	; 171
     6d0:	3a ea       	ldi	r19, 0xAA	; 170
     6d2:	4a ea       	ldi	r20, 0xAA	; 170
     6d4:	50 e4       	ldi	r21, 0x40	; 64
     6d6:	0e 94 a2 12 	call	0x2544	; 0x2544 <__mulsf3>
     6da:	7b 01       	movw	r14, r22
     6dc:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     6de:	20 e0       	ldi	r18, 0x00	; 0
     6e0:	30 e0       	ldi	r19, 0x00	; 0
     6e2:	40 e8       	ldi	r20, 0x80	; 128
     6e4:	5f e3       	ldi	r21, 0x3F	; 63
     6e6:	0e 94 05 13 	call	0x260a	; 0x260a <__cmpsf2>
     6ea:	88 23       	and	r24, r24
     6ec:	14 f4       	brge	.+4      	; 0x6f2 <dxl_hal_timeout+0x76>
     6ee:	61 e0       	ldi	r22, 0x01	; 1
     6f0:	54 c0       	rjmp	.+168    	; 0x79a <dxl_hal_timeout+0x11e>
		__ticks = 1;
	else if (__tmp > 255)
     6f2:	c8 01       	movw	r24, r16
     6f4:	b7 01       	movw	r22, r14
     6f6:	20 e0       	ldi	r18, 0x00	; 0
     6f8:	30 e0       	ldi	r19, 0x00	; 0
     6fa:	4f e7       	ldi	r20, 0x7F	; 127
     6fc:	53 e4       	ldi	r21, 0x43	; 67
     6fe:	0e 94 2d 13 	call	0x265a	; 0x265a <__gesf2>
     702:	18 16       	cp	r1, r24
     704:	0c f0       	brlt	.+2      	; 0x708 <dxl_hal_timeout+0x8c>
     706:	45 c0       	rjmp	.+138    	; 0x792 <dxl_hal_timeout+0x116>
	{
		_delay_ms(__us / 1000.0);
     708:	c6 01       	movw	r24, r12
     70a:	b5 01       	movw	r22, r10
     70c:	20 e0       	ldi	r18, 0x00	; 0
     70e:	30 e0       	ldi	r19, 0x00	; 0
     710:	4a e7       	ldi	r20, 0x7A	; 122
     712:	54 e4       	ldi	r21, 0x44	; 68
     714:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <__divsf3>
     718:	5b 01       	movw	r10, r22
     71a:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     71c:	20 e0       	ldi	r18, 0x00	; 0
     71e:	30 e0       	ldi	r19, 0x00	; 0
     720:	4a e7       	ldi	r20, 0x7A	; 122
     722:	55 e4       	ldi	r21, 0x45	; 69
     724:	0e 94 a2 12 	call	0x2544	; 0x2544 <__mulsf3>
     728:	7b 01       	movw	r14, r22
     72a:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     72c:	20 e0       	ldi	r18, 0x00	; 0
     72e:	30 e0       	ldi	r19, 0x00	; 0
     730:	40 e8       	ldi	r20, 0x80	; 128
     732:	5f e3       	ldi	r21, 0x3F	; 63
     734:	0e 94 05 13 	call	0x260a	; 0x260a <__cmpsf2>
     738:	88 23       	and	r24, r24
     73a:	1c f4       	brge	.+6      	; 0x742 <dxl_hal_timeout+0xc6>
     73c:	61 e0       	ldi	r22, 0x01	; 1
     73e:	70 e0       	ldi	r23, 0x00	; 0
     740:	24 c0       	rjmp	.+72     	; 0x78a <dxl_hal_timeout+0x10e>
		__ticks = 1;
	else if (__tmp > 65535)
     742:	c8 01       	movw	r24, r16
     744:	b7 01       	movw	r22, r14
     746:	20 e0       	ldi	r18, 0x00	; 0
     748:	3f ef       	ldi	r19, 0xFF	; 255
     74a:	4f e7       	ldi	r20, 0x7F	; 127
     74c:	57 e4       	ldi	r21, 0x47	; 71
     74e:	0e 94 2d 13 	call	0x265a	; 0x265a <__gesf2>
     752:	18 16       	cp	r1, r24
     754:	b4 f4       	brge	.+44     	; 0x782 <dxl_hal_timeout+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     756:	c6 01       	movw	r24, r12
     758:	b5 01       	movw	r22, r10
     75a:	20 e0       	ldi	r18, 0x00	; 0
     75c:	30 e0       	ldi	r19, 0x00	; 0
     75e:	40 e2       	ldi	r20, 0x20	; 32
     760:	51 e4       	ldi	r21, 0x41	; 65
     762:	0e 94 a2 12 	call	0x2544	; 0x2544 <__mulsf3>
     766:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <__fixunssfsi>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     76a:	80 e9       	ldi	r24, 0x90	; 144
     76c:	91 e0       	ldi	r25, 0x01	; 1
     76e:	05 c0       	rjmp	.+10     	; 0x77a <dxl_hal_timeout+0xfe>
     770:	fc 01       	movw	r30, r24
     772:	31 97       	sbiw	r30, 0x01	; 1
     774:	f1 f7       	brne	.-4      	; 0x772 <dxl_hal_timeout+0xf6>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     776:	61 50       	subi	r22, 0x01	; 1
     778:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     77a:	61 15       	cp	r22, r1
     77c:	71 05       	cpc	r23, r1
     77e:	c1 f7       	brne	.-16     	; 0x770 <dxl_hal_timeout+0xf4>
     780:	0e c0       	rjmp	.+28     	; 0x79e <dxl_hal_timeout+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     782:	c8 01       	movw	r24, r16
     784:	b7 01       	movw	r22, r14
     786:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <__fixunssfsi>
     78a:	cb 01       	movw	r24, r22
     78c:	01 97       	sbiw	r24, 0x01	; 1
     78e:	f1 f7       	brne	.-4      	; 0x78c <dxl_hal_timeout+0x110>
     790:	06 c0       	rjmp	.+12     	; 0x79e <dxl_hal_timeout+0x122>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     792:	c8 01       	movw	r24, r16
     794:	b7 01       	movw	r22, r14
     796:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <__fixunssfsi>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     79a:	6a 95       	dec	r22
     79c:	f1 f7       	brne	.-4      	; 0x79a <dxl_hal_timeout+0x11e>
     79e:	20 e0       	ldi	r18, 0x00	; 0
     7a0:	30 e0       	ldi	r19, 0x00	; 0
     7a2:	c9 01       	movw	r24, r18
     7a4:	1f 91       	pop	r17
     7a6:	0f 91       	pop	r16
     7a8:	ff 90       	pop	r15
     7aa:	ef 90       	pop	r14
     7ac:	df 90       	pop	r13
     7ae:	cf 90       	pop	r12
     7b0:	bf 90       	pop	r11
     7b2:	af 90       	pop	r10
     7b4:	08 95       	ret

000007b6 <dxl_hal_get_qstate>:
     7b6:	90 91 7e 15 	lds	r25, 0x157E
     7ba:	80 91 7f 15 	lds	r24, 0x157F
     7be:	98 17       	cp	r25, r24
     7c0:	19 f4       	brne	.+6      	; 0x7c8 <dxl_hal_get_qstate+0x12>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	17 c0       	rjmp	.+46     	; 0x7f6 <dxl_hal_get_qstate+0x40>
     7c8:	90 91 7e 15 	lds	r25, 0x157E
     7cc:	80 91 7f 15 	lds	r24, 0x157F
     7d0:	98 17       	cp	r25, r24
     7d2:	38 f4       	brcc	.+14     	; 0x7e2 <dxl_hal_get_qstate+0x2c>
     7d4:	80 91 7f 15 	lds	r24, 0x157F
     7d8:	90 91 7e 15 	lds	r25, 0x157E
     7dc:	28 2f       	mov	r18, r24
     7de:	30 e0       	ldi	r19, 0x00	; 0
     7e0:	08 c0       	rjmp	.+16     	; 0x7f2 <dxl_hal_get_qstate+0x3c>
     7e2:	80 91 7f 15 	lds	r24, 0x157F
     7e6:	90 91 7e 15 	lds	r25, 0x157E
     7ea:	28 2f       	mov	r18, r24
     7ec:	30 e0       	ldi	r19, 0x00	; 0
     7ee:	20 50       	subi	r18, 0x00	; 0
     7f0:	3f 4f       	sbci	r19, 0xFF	; 255
     7f2:	29 1b       	sub	r18, r25
     7f4:	31 09       	sbc	r19, r1
     7f6:	c9 01       	movw	r24, r18
     7f8:	08 95       	ret

000007fa <dxl_hal_put_queue>:
     7fa:	1f 93       	push	r17
     7fc:	18 2f       	mov	r17, r24
     7fe:	db df       	rcall	.-74     	; 0x7b6 <dxl_hal_get_qstate>
     800:	8f 3f       	cpi	r24, 0xFF	; 255
     802:	91 05       	cpc	r25, r1
     804:	91 f0       	breq	.+36     	; 0x82a <dxl_hal_put_queue+0x30>
     806:	e0 91 7f 15 	lds	r30, 0x157F
     80a:	f0 e0       	ldi	r31, 0x00	; 0
     80c:	e2 58       	subi	r30, 0x82	; 130
     80e:	fb 4e       	sbci	r31, 0xEB	; 235
     810:	10 83       	st	Z, r17
     812:	80 91 7f 15 	lds	r24, 0x157F
     816:	8f 3f       	cpi	r24, 0xFF	; 255
     818:	19 f4       	brne	.+6      	; 0x820 <dxl_hal_put_queue+0x26>
     81a:	10 92 7f 15 	sts	0x157F, r1
     81e:	05 c0       	rjmp	.+10     	; 0x82a <dxl_hal_put_queue+0x30>
     820:	80 91 7f 15 	lds	r24, 0x157F
     824:	8f 5f       	subi	r24, 0xFF	; 255
     826:	80 93 7f 15 	sts	0x157F, r24
     82a:	1f 91       	pop	r17
     82c:	08 95       	ret

0000082e <dxl_hal_get_queue>:
     82e:	90 91 7e 15 	lds	r25, 0x157E
     832:	80 91 7f 15 	lds	r24, 0x157F
     836:	98 17       	cp	r25, r24
     838:	11 f4       	brne	.+4      	; 0x83e <dxl_hal_get_queue+0x10>
     83a:	ef ef       	ldi	r30, 0xFF	; 255
     83c:	12 c0       	rjmp	.+36     	; 0x862 <dxl_hal_get_queue+0x34>
     83e:	e0 91 7e 15 	lds	r30, 0x157E
     842:	f0 e0       	ldi	r31, 0x00	; 0
     844:	e2 58       	subi	r30, 0x82	; 130
     846:	fb 4e       	sbci	r31, 0xEB	; 235
     848:	e0 81       	ld	r30, Z
     84a:	80 91 7e 15 	lds	r24, 0x157E
     84e:	8f 3f       	cpi	r24, 0xFF	; 255
     850:	19 f4       	brne	.+6      	; 0x858 <dxl_hal_get_queue+0x2a>
     852:	10 92 7e 15 	sts	0x157E, r1
     856:	05 c0       	rjmp	.+10     	; 0x862 <dxl_hal_get_queue+0x34>
     858:	80 91 7e 15 	lds	r24, 0x157E
     85c:	8f 5f       	subi	r24, 0xFF	; 255
     85e:	80 93 7e 15 	sts	0x157E, r24
     862:	8e 2f       	mov	r24, r30
     864:	08 95       	ret

00000866 <dxl_hal_rx>:
     866:	ef 92       	push	r14
     868:	ff 92       	push	r15
     86a:	0f 93       	push	r16
     86c:	1f 93       	push	r17
     86e:	cf 93       	push	r28
     870:	df 93       	push	r29
     872:	7c 01       	movw	r14, r24
     874:	eb 01       	movw	r28, r22
     876:	90 91 7e 15 	lds	r25, 0x157E
     87a:	80 91 7f 15 	lds	r24, 0x157F
     87e:	98 17       	cp	r25, r24
     880:	19 f4       	brne	.+6      	; 0x888 <dxl_hal_rx+0x22>
     882:	00 e0       	ldi	r16, 0x00	; 0
     884:	10 e0       	ldi	r17, 0x00	; 0
     886:	12 c0       	rjmp	.+36     	; 0x8ac <dxl_hal_rx+0x46>
     888:	96 df       	rcall	.-212    	; 0x7b6 <dxl_hal_get_qstate>
     88a:	8c 01       	movw	r16, r24
     88c:	c8 17       	cp	r28, r24
     88e:	d9 07       	cpc	r29, r25
     890:	0c f4       	brge	.+2      	; 0x894 <dxl_hal_rx+0x2e>
     892:	8e 01       	movw	r16, r28
     894:	c0 e0       	ldi	r28, 0x00	; 0
     896:	d0 e0       	ldi	r29, 0x00	; 0
     898:	06 c0       	rjmp	.+12     	; 0x8a6 <dxl_hal_rx+0x40>
     89a:	c9 df       	rcall	.-110    	; 0x82e <dxl_hal_get_queue>
     89c:	f7 01       	movw	r30, r14
     89e:	ec 0f       	add	r30, r28
     8a0:	fd 1f       	adc	r31, r29
     8a2:	80 83       	st	Z, r24
     8a4:	21 96       	adiw	r28, 0x01	; 1
     8a6:	c0 17       	cp	r28, r16
     8a8:	d1 07       	cpc	r29, r17
     8aa:	bc f3       	brlt	.-18     	; 0x89a <dxl_hal_rx+0x34>
     8ac:	c8 01       	movw	r24, r16
     8ae:	df 91       	pop	r29
     8b0:	cf 91       	pop	r28
     8b2:	1f 91       	pop	r17
     8b4:	0f 91       	pop	r16
     8b6:	ff 90       	pop	r15
     8b8:	ef 90       	pop	r14
     8ba:	08 95       	ret

000008bc <__vector_25>:
     8bc:	1f 92       	push	r1
     8be:	0f 92       	push	r0
     8c0:	0f b6       	in	r0, 0x3f	; 63
     8c2:	0f 92       	push	r0
     8c4:	0b b6       	in	r0, 0x3b	; 59
     8c6:	0f 92       	push	r0
     8c8:	11 24       	eor	r1, r1
     8ca:	2f 93       	push	r18
     8cc:	3f 93       	push	r19
     8ce:	4f 93       	push	r20
     8d0:	5f 93       	push	r21
     8d2:	6f 93       	push	r22
     8d4:	7f 93       	push	r23
     8d6:	8f 93       	push	r24
     8d8:	9f 93       	push	r25
     8da:	af 93       	push	r26
     8dc:	bf 93       	push	r27
     8de:	ef 93       	push	r30
     8e0:	ff 93       	push	r31
     8e2:	80 91 c6 00 	lds	r24, 0x00C6
     8e6:	89 df       	rcall	.-238    	; 0x7fa <dxl_hal_put_queue>
     8e8:	ff 91       	pop	r31
     8ea:	ef 91       	pop	r30
     8ec:	bf 91       	pop	r27
     8ee:	af 91       	pop	r26
     8f0:	9f 91       	pop	r25
     8f2:	8f 91       	pop	r24
     8f4:	7f 91       	pop	r23
     8f6:	6f 91       	pop	r22
     8f8:	5f 91       	pop	r21
     8fa:	4f 91       	pop	r20
     8fc:	3f 91       	pop	r19
     8fe:	2f 91       	pop	r18
     900:	0f 90       	pop	r0
     902:	0b be       	out	0x3b, r0	; 59
     904:	0f 90       	pop	r0
     906:	0f be       	out	0x3f, r0	; 63
     908:	0f 90       	pop	r0
     90a:	1f 90       	pop	r1
     90c:	18 95       	reti

0000090e <serial_write>:
     90e:	ac 01       	movw	r20, r24
     910:	20 e0       	ldi	r18, 0x00	; 0
     912:	30 e0       	ldi	r19, 0x00	; 0
     914:	0c c0       	rjmp	.+24     	; 0x92e <serial_write+0x20>
     916:	80 91 c8 00 	lds	r24, 0x00C8
     91a:	85 ff       	sbrs	r24, 5
     91c:	fc cf       	rjmp	.-8      	; 0x916 <serial_write+0x8>
     91e:	fa 01       	movw	r30, r20
     920:	e2 0f       	add	r30, r18
     922:	f3 1f       	adc	r31, r19
     924:	80 81       	ld	r24, Z
     926:	80 93 ce 00 	sts	0x00CE, r24
     92a:	2f 5f       	subi	r18, 0xFF	; 255
     92c:	3f 4f       	sbci	r19, 0xFF	; 255
     92e:	26 17       	cp	r18, r22
     930:	37 07       	cpc	r19, r23
     932:	8c f3       	brlt	.-30     	; 0x916 <serial_write+0x8>
     934:	08 95       	ret

00000936 <serial_read>:
     936:	dc 01       	movw	r26, r24
     938:	90 91 00 16 	lds	r25, 0x1600
     93c:	80 91 01 16 	lds	r24, 0x1601
     940:	98 17       	cp	r25, r24
     942:	11 f4       	brne	.+4      	; 0x948 <serial_read+0x12>
     944:	80 e0       	ldi	r24, 0x00	; 0
     946:	08 95       	ret
     948:	90 91 00 16 	lds	r25, 0x1600
     94c:	80 91 01 16 	lds	r24, 0x1601
     950:	98 17       	cp	r25, r24
     952:	19 f4       	brne	.+6      	; 0x95a <serial_read+0x24>
     954:	20 e0       	ldi	r18, 0x00	; 0
     956:	30 e0       	ldi	r19, 0x00	; 0
     958:	17 c0       	rjmp	.+46     	; 0x988 <serial_read+0x52>
     95a:	90 91 00 16 	lds	r25, 0x1600
     95e:	80 91 01 16 	lds	r24, 0x1601
     962:	98 17       	cp	r25, r24
     964:	38 f4       	brcc	.+14     	; 0x974 <serial_read+0x3e>
     966:	80 91 01 16 	lds	r24, 0x1601
     96a:	90 91 00 16 	lds	r25, 0x1600
     96e:	28 2f       	mov	r18, r24
     970:	30 e0       	ldi	r19, 0x00	; 0
     972:	08 c0       	rjmp	.+16     	; 0x984 <serial_read+0x4e>
     974:	80 91 01 16 	lds	r24, 0x1601
     978:	90 91 00 16 	lds	r25, 0x1600
     97c:	28 2f       	mov	r18, r24
     97e:	30 e0       	ldi	r19, 0x00	; 0
     980:	20 58       	subi	r18, 0x80	; 128
     982:	3f 4f       	sbci	r19, 0xFF	; 255
     984:	29 1b       	sub	r18, r25
     986:	31 09       	sbc	r19, r1
     988:	a9 01       	movw	r20, r18
     98a:	62 17       	cp	r22, r18
     98c:	73 07       	cpc	r23, r19
     98e:	0c f4       	brge	.+2      	; 0x992 <serial_read+0x5c>
     990:	ab 01       	movw	r20, r22
     992:	20 e0       	ldi	r18, 0x00	; 0
     994:	30 e0       	ldi	r19, 0x00	; 0
     996:	20 c0       	rjmp	.+64     	; 0x9d8 <serial_read+0xa2>
     998:	90 91 00 16 	lds	r25, 0x1600
     99c:	80 91 01 16 	lds	r24, 0x1601
     9a0:	98 17       	cp	r25, r24
     9a2:	11 f4       	brne	.+4      	; 0x9a8 <serial_read+0x72>
     9a4:	9f ef       	ldi	r25, 0xFF	; 255
     9a6:	12 c0       	rjmp	.+36     	; 0x9cc <serial_read+0x96>
     9a8:	e0 91 00 16 	lds	r30, 0x1600
     9ac:	f0 e0       	ldi	r31, 0x00	; 0
     9ae:	e0 58       	subi	r30, 0x80	; 128
     9b0:	fa 4e       	sbci	r31, 0xEA	; 234
     9b2:	90 81       	ld	r25, Z
     9b4:	80 91 00 16 	lds	r24, 0x1600
     9b8:	8f 37       	cpi	r24, 0x7F	; 127
     9ba:	19 f4       	brne	.+6      	; 0x9c2 <serial_read+0x8c>
     9bc:	10 92 00 16 	sts	0x1600, r1
     9c0:	05 c0       	rjmp	.+10     	; 0x9cc <serial_read+0x96>
     9c2:	80 91 00 16 	lds	r24, 0x1600
     9c6:	8f 5f       	subi	r24, 0xFF	; 255
     9c8:	80 93 00 16 	sts	0x1600, r24
     9cc:	fd 01       	movw	r30, r26
     9ce:	e2 0f       	add	r30, r18
     9d0:	f3 1f       	adc	r31, r19
     9d2:	90 83       	st	Z, r25
     9d4:	2f 5f       	subi	r18, 0xFF	; 255
     9d6:	3f 4f       	sbci	r19, 0xFF	; 255
     9d8:	24 17       	cp	r18, r20
     9da:	35 07       	cpc	r19, r21
     9dc:	ec f2       	brlt	.-70     	; 0x998 <serial_read+0x62>
     9de:	84 2f       	mov	r24, r20
     9e0:	08 95       	ret

000009e2 <serial_get_qstate>:
     9e2:	90 91 00 16 	lds	r25, 0x1600
     9e6:	80 91 01 16 	lds	r24, 0x1601
     9ea:	98 17       	cp	r25, r24
     9ec:	19 f4       	brne	.+6      	; 0x9f4 <serial_get_qstate+0x12>
     9ee:	20 e0       	ldi	r18, 0x00	; 0
     9f0:	30 e0       	ldi	r19, 0x00	; 0
     9f2:	17 c0       	rjmp	.+46     	; 0xa22 <serial_get_qstate+0x40>
     9f4:	90 91 00 16 	lds	r25, 0x1600
     9f8:	80 91 01 16 	lds	r24, 0x1601
     9fc:	98 17       	cp	r25, r24
     9fe:	38 f4       	brcc	.+14     	; 0xa0e <serial_get_qstate+0x2c>
     a00:	80 91 01 16 	lds	r24, 0x1601
     a04:	90 91 00 16 	lds	r25, 0x1600
     a08:	28 2f       	mov	r18, r24
     a0a:	30 e0       	ldi	r19, 0x00	; 0
     a0c:	08 c0       	rjmp	.+16     	; 0xa1e <serial_get_qstate+0x3c>
     a0e:	80 91 01 16 	lds	r24, 0x1601
     a12:	90 91 00 16 	lds	r25, 0x1600
     a16:	28 2f       	mov	r18, r24
     a18:	30 e0       	ldi	r19, 0x00	; 0
     a1a:	20 58       	subi	r18, 0x80	; 128
     a1c:	3f 4f       	sbci	r19, 0xFF	; 255
     a1e:	29 1b       	sub	r18, r25
     a20:	31 09       	sbc	r19, r1
     a22:	c9 01       	movw	r24, r18
     a24:	08 95       	ret

00000a26 <serial_put_queue>:
     a26:	48 2f       	mov	r20, r24
     a28:	90 91 00 16 	lds	r25, 0x1600
     a2c:	80 91 01 16 	lds	r24, 0x1601
     a30:	98 17       	cp	r25, r24
     a32:	d1 f0       	breq	.+52     	; 0xa68 <serial_put_queue+0x42>
     a34:	90 91 00 16 	lds	r25, 0x1600
     a38:	80 91 01 16 	lds	r24, 0x1601
     a3c:	98 17       	cp	r25, r24
     a3e:	38 f4       	brcc	.+14     	; 0xa4e <serial_put_queue+0x28>
     a40:	80 91 01 16 	lds	r24, 0x1601
     a44:	90 91 00 16 	lds	r25, 0x1600
     a48:	28 2f       	mov	r18, r24
     a4a:	30 e0       	ldi	r19, 0x00	; 0
     a4c:	08 c0       	rjmp	.+16     	; 0xa5e <serial_put_queue+0x38>
     a4e:	80 91 01 16 	lds	r24, 0x1601
     a52:	90 91 00 16 	lds	r25, 0x1600
     a56:	28 2f       	mov	r18, r24
     a58:	30 e0       	ldi	r19, 0x00	; 0
     a5a:	20 58       	subi	r18, 0x80	; 128
     a5c:	3f 4f       	sbci	r19, 0xFF	; 255
     a5e:	29 1b       	sub	r18, r25
     a60:	31 09       	sbc	r19, r1
     a62:	2f 37       	cpi	r18, 0x7F	; 127
     a64:	31 05       	cpc	r19, r1
     a66:	91 f0       	breq	.+36     	; 0xa8c <serial_put_queue+0x66>
     a68:	e0 91 01 16 	lds	r30, 0x1601
     a6c:	f0 e0       	ldi	r31, 0x00	; 0
     a6e:	e0 58       	subi	r30, 0x80	; 128
     a70:	fa 4e       	sbci	r31, 0xEA	; 234
     a72:	40 83       	st	Z, r20
     a74:	80 91 01 16 	lds	r24, 0x1601
     a78:	8f 37       	cpi	r24, 0x7F	; 127
     a7a:	19 f4       	brne	.+6      	; 0xa82 <serial_put_queue+0x5c>
     a7c:	10 92 01 16 	sts	0x1601, r1
     a80:	08 95       	ret
     a82:	80 91 01 16 	lds	r24, 0x1601
     a86:	8f 5f       	subi	r24, 0xFF	; 255
     a88:	80 93 01 16 	sts	0x1601, r24
     a8c:	08 95       	ret

00000a8e <serial_get_queue>:
     a8e:	90 91 00 16 	lds	r25, 0x1600
     a92:	80 91 01 16 	lds	r24, 0x1601
     a96:	98 17       	cp	r25, r24
     a98:	11 f4       	brne	.+4      	; 0xa9e <serial_get_queue+0x10>
     a9a:	ef ef       	ldi	r30, 0xFF	; 255
     a9c:	12 c0       	rjmp	.+36     	; 0xac2 <serial_get_queue+0x34>
     a9e:	e0 91 00 16 	lds	r30, 0x1600
     aa2:	f0 e0       	ldi	r31, 0x00	; 0
     aa4:	e0 58       	subi	r30, 0x80	; 128
     aa6:	fa 4e       	sbci	r31, 0xEA	; 234
     aa8:	e0 81       	ld	r30, Z
     aaa:	80 91 00 16 	lds	r24, 0x1600
     aae:	8f 37       	cpi	r24, 0x7F	; 127
     ab0:	19 f4       	brne	.+6      	; 0xab8 <serial_get_queue+0x2a>
     ab2:	10 92 00 16 	sts	0x1600, r1
     ab6:	05 c0       	rjmp	.+10     	; 0xac2 <serial_get_queue+0x34>
     ab8:	80 91 00 16 	lds	r24, 0x1600
     abc:	8f 5f       	subi	r24, 0xFF	; 255
     abe:	80 93 00 16 	sts	0x1600, r24
     ac2:	8e 2f       	mov	r24, r30
     ac4:	08 95       	ret

00000ac6 <__vector_36>:
     ac6:	1f 92       	push	r1
     ac8:	0f 92       	push	r0
     aca:	0f b6       	in	r0, 0x3f	; 63
     acc:	0f 92       	push	r0
     ace:	0b b6       	in	r0, 0x3b	; 59
     ad0:	0f 92       	push	r0
     ad2:	11 24       	eor	r1, r1
     ad4:	2f 93       	push	r18
     ad6:	3f 93       	push	r19
     ad8:	4f 93       	push	r20
     ada:	5f 93       	push	r21
     adc:	6f 93       	push	r22
     ade:	7f 93       	push	r23
     ae0:	8f 93       	push	r24
     ae2:	9f 93       	push	r25
     ae4:	af 93       	push	r26
     ae6:	bf 93       	push	r27
     ae8:	ef 93       	push	r30
     aea:	ff 93       	push	r31
     aec:	80 91 ce 00 	lds	r24, 0x00CE
     af0:	9a df       	rcall	.-204    	; 0xa26 <serial_put_queue>
     af2:	ff 91       	pop	r31
     af4:	ef 91       	pop	r30
     af6:	bf 91       	pop	r27
     af8:	af 91       	pop	r26
     afa:	9f 91       	pop	r25
     afc:	8f 91       	pop	r24
     afe:	7f 91       	pop	r23
     b00:	6f 91       	pop	r22
     b02:	5f 91       	pop	r21
     b04:	4f 91       	pop	r20
     b06:	3f 91       	pop	r19
     b08:	2f 91       	pop	r18
     b0a:	0f 90       	pop	r0
     b0c:	0b be       	out	0x3b, r0	; 59
     b0e:	0f 90       	pop	r0
     b10:	0f be       	out	0x3f, r0	; 63
     b12:	0f 90       	pop	r0
     b14:	1f 90       	pop	r1
     b16:	18 95       	reti

00000b18 <std_putchar>:
     b18:	df 93       	push	r29
     b1a:	cf 93       	push	r28
     b1c:	0f 92       	push	r0
     b1e:	0f 92       	push	r0
     b20:	cd b7       	in	r28, 0x3d	; 61
     b22:	de b7       	in	r29, 0x3e	; 62
     b24:	98 2f       	mov	r25, r24
     b26:	8a 30       	cpi	r24, 0x0A	; 10
     b28:	99 f4       	brne	.+38     	; 0xb50 <std_putchar+0x38>
     b2a:	8d e0       	ldi	r24, 0x0D	; 13
     b2c:	89 83       	std	Y+1, r24	; 0x01
     b2e:	9a 83       	std	Y+2, r25	; 0x02
     b30:	fe 01       	movw	r30, r28
     b32:	31 96       	adiw	r30, 0x01	; 1
     b34:	9e 01       	movw	r18, r28
     b36:	2d 5f       	subi	r18, 0xFD	; 253
     b38:	3f 4f       	sbci	r19, 0xFF	; 255
     b3a:	80 91 c8 00 	lds	r24, 0x00C8
     b3e:	85 ff       	sbrs	r24, 5
     b40:	fc cf       	rjmp	.-8      	; 0xb3a <std_putchar+0x22>
     b42:	81 91       	ld	r24, Z+
     b44:	80 93 ce 00 	sts	0x00CE, r24
     b48:	e2 17       	cp	r30, r18
     b4a:	f3 07       	cpc	r31, r19
     b4c:	b1 f7       	brne	.-20     	; 0xb3a <std_putchar+0x22>
     b4e:	06 c0       	rjmp	.+12     	; 0xb5c <std_putchar+0x44>
     b50:	80 91 c8 00 	lds	r24, 0x00C8
     b54:	85 ff       	sbrs	r24, 5
     b56:	fc cf       	rjmp	.-8      	; 0xb50 <std_putchar+0x38>
     b58:	90 93 ce 00 	sts	0x00CE, r25
     b5c:	80 e0       	ldi	r24, 0x00	; 0
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	0f 90       	pop	r0
     b62:	0f 90       	pop	r0
     b64:	cf 91       	pop	r28
     b66:	df 91       	pop	r29
     b68:	08 95       	ret

00000b6a <std_getchar>:
     b6a:	90 91 00 16 	lds	r25, 0x1600
     b6e:	80 91 01 16 	lds	r24, 0x1601
     b72:	98 17       	cp	r25, r24
     b74:	d1 f3       	breq	.-12     	; 0xb6a <std_getchar>
     b76:	90 91 00 16 	lds	r25, 0x1600
     b7a:	80 91 01 16 	lds	r24, 0x1601
     b7e:	98 17       	cp	r25, r24
     b80:	38 f4       	brcc	.+14     	; 0xb90 <std_getchar+0x26>
     b82:	80 91 01 16 	lds	r24, 0x1601
     b86:	90 91 00 16 	lds	r25, 0x1600
     b8a:	28 2f       	mov	r18, r24
     b8c:	30 e0       	ldi	r19, 0x00	; 0
     b8e:	08 c0       	rjmp	.+16     	; 0xba0 <std_getchar+0x36>
     b90:	80 91 01 16 	lds	r24, 0x1601
     b94:	90 91 00 16 	lds	r25, 0x1600
     b98:	28 2f       	mov	r18, r24
     b9a:	30 e0       	ldi	r19, 0x00	; 0
     b9c:	20 58       	subi	r18, 0x80	; 128
     b9e:	3f 4f       	sbci	r19, 0xFF	; 255
     ba0:	29 1b       	sub	r18, r25
     ba2:	31 09       	sbc	r19, r1
     ba4:	23 2b       	or	r18, r19
     ba6:	09 f3       	breq	.-62     	; 0xb6a <std_getchar>
     ba8:	90 91 00 16 	lds	r25, 0x1600
     bac:	80 91 01 16 	lds	r24, 0x1601
     bb0:	98 17       	cp	r25, r24
     bb2:	11 f4       	brne	.+4      	; 0xbb8 <std_getchar+0x4e>
     bb4:	ef ef       	ldi	r30, 0xFF	; 255
     bb6:	15 c0       	rjmp	.+42     	; 0xbe2 <std_getchar+0x78>
     bb8:	e0 91 00 16 	lds	r30, 0x1600
     bbc:	f0 e0       	ldi	r31, 0x00	; 0
     bbe:	e0 58       	subi	r30, 0x80	; 128
     bc0:	fa 4e       	sbci	r31, 0xEA	; 234
     bc2:	e0 81       	ld	r30, Z
     bc4:	80 91 00 16 	lds	r24, 0x1600
     bc8:	8f 37       	cpi	r24, 0x7F	; 127
     bca:	19 f4       	brne	.+6      	; 0xbd2 <std_getchar+0x68>
     bcc:	10 92 00 16 	sts	0x1600, r1
     bd0:	05 c0       	rjmp	.+10     	; 0xbdc <std_getchar+0x72>
     bd2:	80 91 00 16 	lds	r24, 0x1600
     bd6:	8f 5f       	subi	r24, 0xFF	; 255
     bd8:	80 93 00 16 	sts	0x1600, r24
     bdc:	ed 30       	cpi	r30, 0x0D	; 13
     bde:	09 f4       	brne	.+2      	; 0xbe2 <std_getchar+0x78>
     be0:	ea e0       	ldi	r30, 0x0A	; 10
     be2:	8e 2f       	mov	r24, r30
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	08 95       	ret

00000be8 <serial_initialize>:
     be8:	0e 94 16 12 	call	0x242c	; 0x242c <__floatsisf>
     bec:	9b 01       	movw	r18, r22
     bee:	ac 01       	movw	r20, r24
     bf0:	60 e0       	ldi	r22, 0x00	; 0
     bf2:	74 e2       	ldi	r23, 0x24	; 36
     bf4:	84 ef       	ldi	r24, 0xF4	; 244
     bf6:	99 e4       	ldi	r25, 0x49	; 73
     bf8:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <__divsf3>
     bfc:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <__fixunssfsi>
     c00:	61 50       	subi	r22, 0x01	; 1
     c02:	70 40       	sbci	r23, 0x00	; 0
     c04:	22 e4       	ldi	r18, 0x42	; 66
     c06:	20 93 c8 00 	sts	0x00C8, r18
     c0a:	28 e9       	ldi	r18, 0x98	; 152
     c0c:	20 93 c9 00 	sts	0x00C9, r18
     c10:	26 e0       	ldi	r18, 0x06	; 6
     c12:	20 93 ca 00 	sts	0x00CA, r18
     c16:	2f ef       	ldi	r18, 0xFF	; 255
     c18:	20 93 ce 00 	sts	0x00CE, r18
     c1c:	10 92 00 16 	sts	0x1600, r1
     c20:	10 92 01 16 	sts	0x1601, r1
     c24:	27 2f       	mov	r18, r23
     c26:	33 27       	eor	r19, r19
     c28:	27 fd       	sbrc	r18, 7
     c2a:	3a 95       	dec	r19
     c2c:	20 93 cd 00 	sts	0x00CD, r18
     c30:	60 93 cc 00 	sts	0x00CC, r22
     c34:	72 98       	cbi	0x0e, 2	; 14
     c36:	73 9a       	sbi	0x0e, 3	; 14
     c38:	8c e8       	ldi	r24, 0x8C	; 140
     c3a:	95 e0       	ldi	r25, 0x05	; 5
     c3c:	65 eb       	ldi	r22, 0xB5	; 181
     c3e:	75 e0       	ldi	r23, 0x05	; 5
     c40:	0e 94 ad 13 	call	0x275a	; 0x275a <fdevopen>
     c44:	90 93 03 16 	sts	0x1603, r25
     c48:	80 93 02 16 	sts	0x1602, r24
     c4c:	08 95       	ret

00000c4e <initSerial>:
}

void clearSerialBuffer(){
//	printf( "clearSerialBuffer\n" );
	isRead = 0;
	memset( &readBuffer[0], 0x00, SERIAL_BUFFER_SIZE );
     c4e:	60 e0       	ldi	r22, 0x00	; 0
     c50:	71 ee       	ldi	r23, 0xE1	; 225
     c52:	80 e0       	ldi	r24, 0x00	; 0
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	c8 df       	rcall	.-112    	; 0xbe8 <serial_initialize>
     c58:	78 94       	sei
     c5a:	08 95       	ret

00000c5c <checkSerialRead>:
}

int checkSerialRead(void){
	int ret = 0;
	if( serial_get_qstate() > 0 ){
     c5c:	c2 de       	rcall	.-636    	; 0x9e2 <serial_get_qstate>
     c5e:	18 16       	cp	r1, r24
     c60:	19 06       	cpc	r1, r25
     c62:	0c f0       	brlt	.+2      	; 0xc66 <checkSerialRead+0xa>
     c64:	3f c0       	rjmp	.+126    	; 0xce4 <checkSerialRead+0x88>
		unsigned char ReceivedData = getchar();
     c66:	80 91 60 17 	lds	r24, 0x1760
     c6a:	90 91 61 17 	lds	r25, 0x1761
     c6e:	0e 94 f7 13 	call	0x27ee	; 0x27ee <fgetc>
//		printf( "checkSerialRead %d\n", ReceivedData );
		if( ReceivedData == 10 || ReceivedData == 13 ){
     c72:	8a 30       	cpi	r24, 0x0A	; 10
     c74:	11 f0       	breq	.+4      	; 0xc7a <checkSerialRead+0x1e>
     c76:	8d 30       	cpi	r24, 0x0D	; 13
     c78:	91 f4       	brne	.+36     	; 0xc9e <checkSerialRead+0x42>
			if( buffCnt > 0 ){
     c7a:	80 91 56 16 	lds	r24, 0x1656
     c7e:	90 91 57 16 	lds	r25, 0x1657
     c82:	18 16       	cp	r1, r24
     c84:	19 06       	cpc	r1, r25
     c86:	8c f5       	brge	.+98     	; 0xcea <checkSerialRead+0x8e>
				buffCnt = 0;
     c88:	10 92 57 16 	sts	0x1657, r1
     c8c:	10 92 56 16 	sts	0x1656, r1
				isRead = 1;
     c90:	81 e0       	ldi	r24, 0x01	; 1
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	90 93 59 16 	sts	0x1659, r25
     c98:	80 93 58 16 	sts	0x1658, r24
     c9c:	08 95       	ret
				ret = 1;
			}
		}else if( ReceivedData > 0 ){
     c9e:	88 23       	and	r24, r24
     ca0:	39 f1       	breq	.+78     	; 0xcf0 <checkSerialRead+0x94>
			readBuffer[buffCnt++] = ReceivedData;
     ca2:	20 91 56 16 	lds	r18, 0x1656
     ca6:	30 91 57 16 	lds	r19, 0x1657
     caa:	a9 01       	movw	r20, r18
     cac:	4f 5f       	subi	r20, 0xFF	; 255
     cae:	5f 4f       	sbci	r21, 0xFF	; 255
     cb0:	50 93 57 16 	sts	0x1657, r21
     cb4:	40 93 56 16 	sts	0x1656, r20
     cb8:	f9 01       	movw	r30, r18
     cba:	ea 5f       	subi	r30, 0xFA	; 250
     cbc:	f9 4e       	sbci	r31, 0xE9	; 233
     cbe:	80 83       	st	Z, r24
			if( buffCnt >= SERIAL_BUFFER_SIZE-1 ){
     cc0:	80 91 56 16 	lds	r24, 0x1656
     cc4:	90 91 57 16 	lds	r25, 0x1657
     cc8:	8f 34       	cpi	r24, 0x4F	; 79
     cca:	91 05       	cpc	r25, r1
     ccc:	a4 f0       	brlt	.+40     	; 0xcf6 <checkSerialRead+0x9a>
				buffCnt = 0;
     cce:	10 92 57 16 	sts	0x1657, r1
     cd2:	10 92 56 16 	sts	0x1656, r1
				isRead = 1;
     cd6:	81 e0       	ldi	r24, 0x01	; 1
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	90 93 59 16 	sts	0x1659, r25
     cde:	80 93 58 16 	sts	0x1658, r24
     ce2:	08 95       	ret
	isRead = 0;
	memset( &readBuffer[0], 0x00, SERIAL_BUFFER_SIZE );
}

int checkSerialRead(void){
	int ret = 0;
     ce4:	80 e0       	ldi	r24, 0x00	; 0
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	08 95       	ret
     cea:	80 e0       	ldi	r24, 0x00	; 0
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	08 95       	ret
     cf0:	80 e0       	ldi	r24, 0x00	; 0
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	08 95       	ret
     cf6:	80 e0       	ldi	r24, 0x00	; 0
     cf8:	90 e0       	ldi	r25, 0x00	; 0
			}
		}
//		printf( "readBuffer %s\n", &readBuffer[0] );
	}
	return ret;
}
     cfa:	08 95       	ret

00000cfc <getReadBuffer>:

char * getReadBuffer(){
//	printf( "getReadBuffer %d\n", isRead );
	char * ret = NULL;
	if( isRead > 0 ){
     cfc:	80 91 58 16 	lds	r24, 0x1658
     d00:	90 91 59 16 	lds	r25, 0x1659
     d04:	18 16       	cp	r1, r24
     d06:	19 06       	cpc	r1, r25
     d08:	3c f4       	brge	.+14     	; 0xd18 <getReadBuffer+0x1c>
			//memset( &readBuffer[0], 0x00, BUFFER_SIZE );
			//isRead = 0;
			//printf( "ret=%s\n", ret );
		//}
		ret = &readBuffer[0];
		isRead = 0;
     d0a:	10 92 59 16 	sts	0x1659, r1
     d0e:	10 92 58 16 	sts	0x1658, r1
			//memcpy( &ret, &readBuffer, sizeof(unsigned char) * BUFFER_SIZE );
			//memset( &readBuffer[0], 0x00, BUFFER_SIZE );
			//isRead = 0;
			//printf( "ret=%s\n", ret );
		//}
		ret = &readBuffer[0];
     d12:	86 e0       	ldi	r24, 0x06	; 6
     d14:	96 e1       	ldi	r25, 0x16	; 22
     d16:	08 95       	ret
	return ret;
}

char * getReadBuffer(){
//	printf( "getReadBuffer %d\n", isRead );
	char * ret = NULL;
     d18:	80 e0       	ldi	r24, 0x00	; 0
     d1a:	90 e0       	ldi	r25, 0x00	; 0
		//}
		ret = &readBuffer[0];
		isRead = 0;
	}
	return ret;	
}
     d1c:	08 95       	ret

00000d1e <sensorInit>:
	}else{
		PrintCommStatus(CommStatus);
	}
}

void ServoReadState(){
     d1e:	84 ec       	ldi	r24, 0xC4	; 196
     d20:	9f e0       	ldi	r25, 0x0F	; 15
     d22:	0e 94 46 14 	call	0x288c	; 0x288c <puts>
     d26:	60 e0       	ldi	r22, 0x00	; 0
     d28:	71 ee       	ldi	r23, 0xE1	; 225
     d2a:	80 e0       	ldi	r24, 0x00	; 0
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	5c df       	rcall	.-328    	; 0xbe8 <serial_initialize>
     d30:	78 94       	sei
     d32:	86 e8       	ldi	r24, 0x86	; 134
     d34:	80 93 7a 00 	sts	0x007A, r24
     d38:	81 e0       	ldi	r24, 0x01	; 1
     d3a:	80 93 7c 00 	sts	0x007C, r24
     d3e:	08 95       	ret

00000d40 <sensorTest>:
     d40:	cf 93       	push	r28
     d42:	df 93       	push	r29
     d44:	ec 01       	movw	r28, r24
     d46:	81 30       	cpi	r24, 0x01	; 1
     d48:	91 05       	cpc	r25, r1
     d4a:	51 f0       	breq	.+20     	; 0xd60 <sensorTest+0x20>
     d4c:	82 30       	cpi	r24, 0x02	; 2
     d4e:	91 05       	cpc	r25, r1
     d50:	61 f0       	breq	.+24     	; 0xd6a <sensorTest+0x2a>
     d52:	00 97       	sbiw	r24, 0x00	; 0
     d54:	71 f4       	brne	.+28     	; 0xd72 <sensorTest+0x32>
     d56:	81 e0       	ldi	r24, 0x01	; 1
     d58:	80 93 7c 00 	sts	0x007C, r24
     d5c:	17 98       	cbi	0x02, 7	; 2
     d5e:	09 c0       	rjmp	.+18     	; 0xd72 <sensorTest+0x32>
     d60:	82 e0       	ldi	r24, 0x02	; 2
     d62:	80 93 7c 00 	sts	0x007C, r24
     d66:	16 98       	cbi	0x02, 6	; 2
     d68:	04 c0       	rjmp	.+8      	; 0xd72 <sensorTest+0x32>
     d6a:	83 e0       	ldi	r24, 0x03	; 3
     d6c:	80 93 7c 00 	sts	0x007C, r24
     d70:	15 98       	cbi	0x02, 5	; 2
     d72:	84 e0       	ldi	r24, 0x04	; 4
     d74:	8a 95       	dec	r24
     d76:	f1 f7       	brne	.-4      	; 0xd74 <sensorTest+0x34>
     d78:	ea e7       	ldi	r30, 0x7A	; 122
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	80 81       	ld	r24, Z
     d7e:	80 61       	ori	r24, 0x10	; 16
     d80:	80 83       	st	Z, r24
     d82:	80 81       	ld	r24, Z
     d84:	80 64       	ori	r24, 0x40	; 64
     d86:	80 83       	st	Z, r24
     d88:	80 81       	ld	r24, Z
     d8a:	84 ff       	sbrs	r24, 4
     d8c:	fd cf       	rjmp	.-6      	; 0xd88 <sensorTest+0x48>
     d8e:	8e ef       	ldi	r24, 0xFE	; 254
     d90:	82 b9       	out	0x02, r24	; 2
     d92:	ce 01       	movw	r24, r28
     d94:	88 0f       	add	r24, r24
     d96:	99 1f       	adc	r25, r25
     d98:	88 0f       	add	r24, r24
     d9a:	99 1f       	adc	r25, r25
     d9c:	88 0f       	add	r24, r24
     d9e:	99 1f       	adc	r25, r25
     da0:	fe 01       	movw	r30, r28
     da2:	ee 0f       	add	r30, r30
     da4:	ff 1f       	adc	r31, r31
     da6:	e8 0f       	add	r30, r24
     da8:	f9 1f       	adc	r31, r25
     daa:	e8 5c       	subi	r30, 0xC8	; 200
     dac:	f8 4e       	sbci	r31, 0xE8	; 232
     dae:	60 e0       	ldi	r22, 0x00	; 0
     db0:	70 e0       	ldi	r23, 0x00	; 0
     db2:	20 e0       	ldi	r18, 0x00	; 0
     db4:	30 e0       	ldi	r19, 0x00	; 0
     db6:	2f 5f       	subi	r18, 0xFF	; 255
     db8:	3f 4f       	sbci	r19, 0xFF	; 255
     dba:	42 81       	ldd	r20, Z+2	; 0x02
     dbc:	53 81       	ldd	r21, Z+3	; 0x03
     dbe:	41 93       	st	Z+, r20
     dc0:	51 93       	st	Z+, r21
     dc2:	64 0f       	add	r22, r20
     dc4:	75 1f       	adc	r23, r21
     dc6:	24 30       	cpi	r18, 0x04	; 4
     dc8:	31 05       	cpc	r19, r1
     dca:	a9 f7       	brne	.-22     	; 0xdb6 <sensorTest+0x76>
     dcc:	80 91 78 00 	lds	r24, 0x0078
     dd0:	90 91 79 00 	lds	r25, 0x0079
     dd4:	9e 01       	movw	r18, r28
     dd6:	2f 5f       	subi	r18, 0xFF	; 255
     dd8:	3f 4f       	sbci	r19, 0xFF	; 255
     dda:	f9 01       	movw	r30, r18
     ddc:	ee 0f       	add	r30, r30
     dde:	ff 1f       	adc	r31, r31
     de0:	22 0f       	add	r18, r18
     de2:	33 1f       	adc	r19, r19
     de4:	22 0f       	add	r18, r18
     de6:	33 1f       	adc	r19, r19
     de8:	22 0f       	add	r18, r18
     dea:	33 1f       	adc	r19, r19
     dec:	e2 0f       	add	r30, r18
     dee:	f3 1f       	adc	r31, r19
     df0:	e8 5c       	subi	r30, 0xC8	; 200
     df2:	f8 4e       	sbci	r31, 0xE8	; 232
     df4:	91 83       	std	Z+1, r25	; 0x01
     df6:	80 83       	st	Z, r24
     df8:	86 0f       	add	r24, r22
     dfa:	97 1f       	adc	r25, r23
     dfc:	20 97       	sbiw	r28, 0x00	; 0
     dfe:	19 f4       	brne	.+6      	; 0xe06 <sensorTest+0xc6>
     e00:	2d e2       	ldi	r18, 0x2D	; 45
     e02:	30 e0       	ldi	r19, 0x00	; 0
     e04:	02 c0       	rjmp	.+4      	; 0xe0a <sensorTest+0xca>
     e06:	27 e3       	ldi	r18, 0x37	; 55
     e08:	30 e0       	ldi	r19, 0x00	; 0
     e0a:	65 e0       	ldi	r22, 0x05	; 5
     e0c:	70 e0       	ldi	r23, 0x00	; 0
     e0e:	0e 94 31 13 	call	0x2662	; 0x2662 <__divmodhi4>
     e12:	26 17       	cp	r18, r22
     e14:	37 07       	cpc	r19, r23
     e16:	4c f4       	brge	.+18     	; 0xe2a <sensorTest+0xea>
     e18:	cc 0f       	add	r28, r28
     e1a:	dd 1f       	adc	r29, r29
     e1c:	cc 58       	subi	r28, 0x8C	; 140
     e1e:	d9 4e       	sbci	r29, 0xE9	; 233
     e20:	81 e0       	ldi	r24, 0x01	; 1
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	99 83       	std	Y+1, r25	; 0x01
     e26:	88 83       	st	Y, r24
     e28:	06 c0       	rjmp	.+12     	; 0xe36 <sensorTest+0xf6>
     e2a:	cc 0f       	add	r28, r28
     e2c:	dd 1f       	adc	r29, r29
     e2e:	cc 58       	subi	r28, 0x8C	; 140
     e30:	d9 4e       	sbci	r29, 0xE9	; 233
     e32:	19 82       	std	Y+1, r1	; 0x01
     e34:	18 82       	st	Y, r1
     e36:	80 91 78 00 	lds	r24, 0x0078
     e3a:	90 91 79 00 	lds	r25, 0x0079
     e3e:	df 91       	pop	r29
     e40:	cf 91       	pop	r28
     e42:	08 95       	ret

00000e44 <sendAck>:
     e44:	9f 93       	push	r25
     e46:	8f 93       	push	r24
     e48:	83 ed       	ldi	r24, 0xD3	; 211
     e4a:	9f e0       	ldi	r25, 0x0F	; 15
     e4c:	9f 93       	push	r25
     e4e:	8f 93       	push	r24
     e50:	0e 94 35 14 	call	0x286a	; 0x286a <printf>
     e54:	0f 90       	pop	r0
     e56:	0f 90       	pop	r0
     e58:	0f 90       	pop	r0
     e5a:	0f 90       	pop	r0
     e5c:	08 95       	ret

00000e5e <MotorInit>:
     e5e:	61 e0       	ldi	r22, 0x01	; 1
     e60:	70 e0       	ldi	r23, 0x00	; 0
     e62:	80 e0       	ldi	r24, 0x00	; 0
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	4a db       	rcall	.-2412   	; 0x4fc <dxl_initialize>
     e68:	41 e0       	ldi	r20, 0x01	; 1
     e6a:	50 e0       	ldi	r21, 0x00	; 0
     e6c:	6f e2       	ldi	r22, 0x2F	; 47
     e6e:	70 e0       	ldi	r23, 0x00	; 0
     e70:	8f e1       	ldi	r24, 0x1F	; 31
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	c7 da       	rcall	.-2674   	; 0x404 <dxl_write_word>
     e76:	40 e0       	ldi	r20, 0x00	; 0
     e78:	50 e0       	ldi	r21, 0x00	; 0
     e7a:	60 e2       	ldi	r22, 0x20	; 32
     e7c:	70 e0       	ldi	r23, 0x00	; 0
     e7e:	8e ef       	ldi	r24, 0xFE	; 254
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	c0 da       	rcall	.-2688   	; 0x404 <dxl_write_word>
     e84:	40 e0       	ldi	r20, 0x00	; 0
     e86:	50 e0       	ldi	r21, 0x00	; 0
     e88:	68 e1       	ldi	r22, 0x18	; 24
     e8a:	70 e0       	ldi	r23, 0x00	; 0
     e8c:	8e ef       	ldi	r24, 0xFE	; 254
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	f1 da       	rcall	.-2590   	; 0x474 <dxl_write_byte>
     e92:	2f e3       	ldi	r18, 0x3F	; 63
     e94:	8d e0       	ldi	r24, 0x0D	; 13
     e96:	93 e0       	ldi	r25, 0x03	; 3
     e98:	21 50       	subi	r18, 0x01	; 1
     e9a:	80 40       	sbci	r24, 0x00	; 0
     e9c:	90 40       	sbci	r25, 0x00	; 0
     e9e:	e1 f7       	brne	.-8      	; 0xe98 <MotorInit+0x3a>
     ea0:	00 c0       	rjmp	.+0      	; 0xea2 <MotorInit+0x44>
     ea2:	00 00       	nop
     ea4:	08 95       	ret

00000ea6 <split>:
     ea6:	0f 93       	push	r16
     ea8:	1f 93       	push	r17
     eaa:	cf 93       	push	r28
     eac:	df 93       	push	r29
     eae:	00 d0       	rcall	.+0      	; 0xeb0 <split+0xa>
     eb0:	cd b7       	in	r28, 0x3d	; 61
     eb2:	de b7       	in	r29, 0x3e	; 62
     eb4:	20 e2       	ldi	r18, 0x20	; 32
     eb6:	3c e2       	ldi	r19, 0x2C	; 44
     eb8:	40 e0       	ldi	r20, 0x00	; 0
     eba:	29 83       	std	Y+1, r18	; 0x01
     ebc:	3a 83       	std	Y+2, r19	; 0x02
     ebe:	4b 83       	std	Y+3, r20	; 0x03
     ec0:	be 01       	movw	r22, r28
     ec2:	6f 5f       	subi	r22, 0xFF	; 255
     ec4:	7f 4f       	sbci	r23, 0xFF	; 255
     ec6:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <strtok>
     eca:	00 97       	sbiw	r24, 0x00	; 0
     ecc:	89 f0       	breq	.+34     	; 0xef0 <split+0x4a>
     ece:	08 e9       	ldi	r16, 0x98	; 152
     ed0:	16 e1       	ldi	r17, 0x16	; 22
     ed2:	0e 94 5e 13 	call	0x26bc	; 0x26bc <atoi>
     ed6:	f8 01       	movw	r30, r16
     ed8:	81 93       	st	Z+, r24
     eda:	91 93       	st	Z+, r25
     edc:	8f 01       	movw	r16, r30
     ede:	be 01       	movw	r22, r28
     ee0:	6f 5f       	subi	r22, 0xFF	; 255
     ee2:	7f 4f       	sbci	r23, 0xFF	; 255
     ee4:	80 e0       	ldi	r24, 0x00	; 0
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <strtok>
     eec:	00 97       	sbiw	r24, 0x00	; 0
     eee:	89 f7       	brne	.-30     	; 0xed2 <split+0x2c>
     ef0:	0f 90       	pop	r0
     ef2:	0f 90       	pop	r0
     ef4:	0f 90       	pop	r0
     ef6:	df 91       	pop	r29
     ef8:	cf 91       	pop	r28
     efa:	1f 91       	pop	r17
     efc:	0f 91       	pop	r16
     efe:	08 95       	ret

00000f00 <isMoving>:
     f00:	80 91 8a 16 	lds	r24, 0x168A
     f04:	90 91 8b 16 	lds	r25, 0x168B
     f08:	8c 59       	subi	r24, 0x9C	; 156
     f0a:	9f 4f       	sbci	r25, 0xFF	; 255
     f0c:	90 93 8b 16 	sts	0x168B, r25
     f10:	80 93 8a 16 	sts	0x168A, r24
     f14:	20 91 88 16 	lds	r18, 0x1688
     f18:	30 91 89 16 	lds	r19, 0x1689
     f1c:	82 17       	cp	r24, r18
     f1e:	93 07       	cpc	r25, r19
     f20:	3c f0       	brlt	.+14     	; 0xf30 <isMoving+0x30>
     f22:	10 92 8b 16 	sts	0x168B, r1
     f26:	10 92 8a 16 	sts	0x168A, r1
     f2a:	80 e0       	ldi	r24, 0x00	; 0
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	08 95       	ret
     f30:	81 e0       	ldi	r24, 0x01	; 1
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	08 95       	ret

00000f36 <setAngle>:
     f36:	a0 91 9a 16 	lds	r26, 0x169A
     f3a:	b0 91 9b 16 	lds	r27, 0x169B
     f3e:	a4 36       	cpi	r26, 0x64	; 100
     f40:	b1 05       	cpc	r27, r1
     f42:	ac f4       	brge	.+42     	; 0xf6e <setAngle+0x38>
     f44:	ec e9       	ldi	r30, 0x9C	; 156
     f46:	f6 e1       	ldi	r31, 0x16	; 22
     f48:	aa 0f       	add	r26, r26
     f4a:	bb 1f       	adc	r27, r27
     f4c:	a2 95       	swap	r26
     f4e:	b2 95       	swap	r27
     f50:	b0 7f       	andi	r27, 0xF0	; 240
     f52:	ba 27       	eor	r27, r26
     f54:	a0 7f       	andi	r26, 0xF0	; 240
     f56:	ba 27       	eor	r27, r26
     f58:	aa 5d       	subi	r26, 0xDA	; 218
     f5a:	bc 4f       	sbci	r27, 0xFC	; 252
     f5c:	2c eb       	ldi	r18, 0xBC	; 188
     f5e:	36 e1       	ldi	r19, 0x16	; 22
     f60:	81 91       	ld	r24, Z+
     f62:	91 91       	ld	r25, Z+
     f64:	8d 93       	st	X+, r24
     f66:	9d 93       	st	X+, r25
     f68:	e2 17       	cp	r30, r18
     f6a:	f3 07       	cpc	r31, r19
     f6c:	c9 f7       	brne	.-14     	; 0xf60 <setAngle+0x2a>
     f6e:	08 95       	ret

00000f70 <getAngle>:
     f70:	cf 92       	push	r12
     f72:	df 92       	push	r13
     f74:	ef 92       	push	r14
     f76:	ff 92       	push	r15
     f78:	0f 93       	push	r16
     f7a:	1f 93       	push	r17
     f7c:	cf 93       	push	r28
     f7e:	df 93       	push	r29
     f80:	cd b7       	in	r28, 0x3d	; 61
     f82:	de b7       	in	r29, 0x3e	; 62
     f84:	6e 97       	sbiw	r28, 0x1e	; 30
     f86:	0f b6       	in	r0, 0x3f	; 63
     f88:	f8 94       	cli
     f8a:	de bf       	out	0x3e, r29	; 62
     f8c:	0f be       	out	0x3f, r0	; 63
     f8e:	cd bf       	out	0x3d, r28	; 61
     f90:	fe 01       	movw	r30, r28
     f92:	31 96       	adiw	r30, 0x01	; 1
     f94:	8e e1       	ldi	r24, 0x1E	; 30
     f96:	df 01       	movw	r26, r30
     f98:	1d 92       	st	X+, r1
     f9a:	8a 95       	dec	r24
     f9c:	e9 f7       	brne	.-6      	; 0xf98 <getAngle+0x28>
     f9e:	06 ea       	ldi	r16, 0xA6	; 166
     fa0:	1f e0       	ldi	r17, 0x0F	; 15
     fa2:	7f 01       	movw	r14, r30
     fa4:	0f 2e       	mov	r0, r31
     fa6:	f4 ec       	ldi	r31, 0xC4	; 196
     fa8:	cf 2e       	mov	r12, r31
     faa:	ff e0       	ldi	r31, 0x0F	; 15
     fac:	df 2e       	mov	r13, r31
     fae:	f0 2d       	mov	r31, r0
     fb0:	64 e2       	ldi	r22, 0x24	; 36
     fb2:	70 e0       	ldi	r23, 0x00	; 0
     fb4:	f8 01       	movw	r30, r16
     fb6:	81 91       	ld	r24, Z+
     fb8:	91 91       	ld	r25, Z+
     fba:	8f 01       	movw	r16, r30
     fbc:	3d da       	rcall	.-2950   	; 0x438 <dxl_read_word>
     fbe:	d7 01       	movw	r26, r14
     fc0:	8d 93       	st	X+, r24
     fc2:	9d 93       	st	X+, r25
     fc4:	7d 01       	movw	r14, r26
     fc6:	0c 15       	cp	r16, r12
     fc8:	1d 05       	cpc	r17, r13
     fca:	91 f7       	brne	.-28     	; 0xfb0 <getAngle+0x40>
     fcc:	8e 8d       	ldd	r24, Y+30	; 0x1e
     fce:	8f 93       	push	r24
     fd0:	8d 8d       	ldd	r24, Y+29	; 0x1d
     fd2:	8f 93       	push	r24
     fd4:	8c 8d       	ldd	r24, Y+28	; 0x1c
     fd6:	8f 93       	push	r24
     fd8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fda:	8f 93       	push	r24
     fdc:	8a 8d       	ldd	r24, Y+26	; 0x1a
     fde:	8f 93       	push	r24
     fe0:	89 8d       	ldd	r24, Y+25	; 0x19
     fe2:	8f 93       	push	r24
     fe4:	88 8d       	ldd	r24, Y+24	; 0x18
     fe6:	8f 93       	push	r24
     fe8:	8f 89       	ldd	r24, Y+23	; 0x17
     fea:	8f 93       	push	r24
     fec:	8e 89       	ldd	r24, Y+22	; 0x16
     fee:	8f 93       	push	r24
     ff0:	8d 89       	ldd	r24, Y+21	; 0x15
     ff2:	8f 93       	push	r24
     ff4:	8c 89       	ldd	r24, Y+20	; 0x14
     ff6:	8f 93       	push	r24
     ff8:	8b 89       	ldd	r24, Y+19	; 0x13
     ffa:	8f 93       	push	r24
     ffc:	8a 89       	ldd	r24, Y+18	; 0x12
     ffe:	8f 93       	push	r24
    1000:	89 89       	ldd	r24, Y+17	; 0x11
    1002:	8f 93       	push	r24
    1004:	1f 92       	push	r1
    1006:	82 e0       	ldi	r24, 0x02	; 2
    1008:	8f 93       	push	r24
    100a:	88 ed       	ldi	r24, 0xD8	; 216
    100c:	9f e0       	ldi	r25, 0x0F	; 15
    100e:	9f 93       	push	r25
    1010:	8f 93       	push	r24
    1012:	0e 94 35 14 	call	0x286a	; 0x286a <printf>
    1016:	0f b6       	in	r0, 0x3f	; 63
    1018:	f8 94       	cli
    101a:	de bf       	out	0x3e, r29	; 62
    101c:	0f be       	out	0x3f, r0	; 63
    101e:	cd bf       	out	0x3d, r28	; 61
    1020:	6e 96       	adiw	r28, 0x1e	; 30
    1022:	0f b6       	in	r0, 0x3f	; 63
    1024:	f8 94       	cli
    1026:	de bf       	out	0x3e, r29	; 62
    1028:	0f be       	out	0x3f, r0	; 63
    102a:	cd bf       	out	0x3d, r28	; 61
    102c:	df 91       	pop	r29
    102e:	cf 91       	pop	r28
    1030:	1f 91       	pop	r17
    1032:	0f 91       	pop	r16
    1034:	ff 90       	pop	r15
    1036:	ef 90       	pop	r14
    1038:	df 90       	pop	r13
    103a:	cf 90       	pop	r12
    103c:	08 95       	ret

0000103e <sendActAngle>:
    103e:	88 0f       	add	r24, r24
    1040:	99 1f       	adc	r25, r25
    1042:	82 95       	swap	r24
    1044:	92 95       	swap	r25
    1046:	90 7f       	andi	r25, 0xF0	; 240
    1048:	98 27       	eor	r25, r24
    104a:	80 7f       	andi	r24, 0xF0	; 240
    104c:	98 27       	eor	r25, r24
    104e:	fc 01       	movw	r30, r24
    1050:	ea 5d       	subi	r30, 0xDA	; 218
    1052:	fc 4f       	sbci	r31, 0xFC	; 252
    1054:	81 8d       	ldd	r24, Z+25	; 0x19
    1056:	8f 93       	push	r24
    1058:	80 8d       	ldd	r24, Z+24	; 0x18
    105a:	8f 93       	push	r24
    105c:	87 89       	ldd	r24, Z+23	; 0x17
    105e:	8f 93       	push	r24
    1060:	86 89       	ldd	r24, Z+22	; 0x16
    1062:	8f 93       	push	r24
    1064:	85 89       	ldd	r24, Z+21	; 0x15
    1066:	8f 93       	push	r24
    1068:	84 89       	ldd	r24, Z+20	; 0x14
    106a:	8f 93       	push	r24
    106c:	83 89       	ldd	r24, Z+19	; 0x13
    106e:	8f 93       	push	r24
    1070:	82 89       	ldd	r24, Z+18	; 0x12
    1072:	8f 93       	push	r24
    1074:	81 89       	ldd	r24, Z+17	; 0x11
    1076:	8f 93       	push	r24
    1078:	80 89       	ldd	r24, Z+16	; 0x10
    107a:	8f 93       	push	r24
    107c:	87 85       	ldd	r24, Z+15	; 0x0f
    107e:	8f 93       	push	r24
    1080:	86 85       	ldd	r24, Z+14	; 0x0e
    1082:	8f 93       	push	r24
    1084:	85 85       	ldd	r24, Z+13	; 0x0d
    1086:	8f 93       	push	r24
    1088:	84 85       	ldd	r24, Z+12	; 0x0c
    108a:	8f 93       	push	r24
    108c:	83 85       	ldd	r24, Z+11	; 0x0b
    108e:	8f 93       	push	r24
    1090:	82 85       	ldd	r24, Z+10	; 0x0a
    1092:	8f 93       	push	r24
    1094:	81 85       	ldd	r24, Z+9	; 0x09
    1096:	8f 93       	push	r24
    1098:	80 85       	ldd	r24, Z+8	; 0x08
    109a:	8f 93       	push	r24
    109c:	87 81       	ldd	r24, Z+7	; 0x07
    109e:	8f 93       	push	r24
    10a0:	86 81       	ldd	r24, Z+6	; 0x06
    10a2:	8f 93       	push	r24
    10a4:	85 81       	ldd	r24, Z+5	; 0x05
    10a6:	8f 93       	push	r24
    10a8:	84 81       	ldd	r24, Z+4	; 0x04
    10aa:	8f 93       	push	r24
    10ac:	83 81       	ldd	r24, Z+3	; 0x03
    10ae:	8f 93       	push	r24
    10b0:	82 81       	ldd	r24, Z+2	; 0x02
    10b2:	8f 93       	push	r24
    10b4:	81 81       	ldd	r24, Z+1	; 0x01
    10b6:	8f 93       	push	r24
    10b8:	80 81       	ld	r24, Z
    10ba:	8f 93       	push	r24
    10bc:	1f 92       	push	r1
    10be:	83 e0       	ldi	r24, 0x03	; 3
    10c0:	8f 93       	push	r24
    10c2:	81 e0       	ldi	r24, 0x01	; 1
    10c4:	90 e1       	ldi	r25, 0x10	; 16
    10c6:	9f 93       	push	r25
    10c8:	8f 93       	push	r24
    10ca:	0e 94 35 14 	call	0x286a	; 0x286a <printf>
    10ce:	8d b7       	in	r24, 0x3d	; 61
    10d0:	9e b7       	in	r25, 0x3e	; 62
    10d2:	4e 96       	adiw	r24, 0x1e	; 30
    10d4:	0f b6       	in	r0, 0x3f	; 63
    10d6:	f8 94       	cli
    10d8:	9e bf       	out	0x3e, r25	; 62
    10da:	0f be       	out	0x3f, r0	; 63
    10dc:	8d bf       	out	0x3d, r24	; 61
    10de:	08 95       	ret

000010e0 <getLoad>:
    10e0:	cf 92       	push	r12
    10e2:	df 92       	push	r13
    10e4:	ef 92       	push	r14
    10e6:	ff 92       	push	r15
    10e8:	0f 93       	push	r16
    10ea:	1f 93       	push	r17
    10ec:	cf 93       	push	r28
    10ee:	df 93       	push	r29
    10f0:	cd b7       	in	r28, 0x3d	; 61
    10f2:	de b7       	in	r29, 0x3e	; 62
    10f4:	6e 97       	sbiw	r28, 0x1e	; 30
    10f6:	0f b6       	in	r0, 0x3f	; 63
    10f8:	f8 94       	cli
    10fa:	de bf       	out	0x3e, r29	; 62
    10fc:	0f be       	out	0x3f, r0	; 63
    10fe:	cd bf       	out	0x3d, r28	; 61
    1100:	fe 01       	movw	r30, r28
    1102:	31 96       	adiw	r30, 0x01	; 1
    1104:	8e e1       	ldi	r24, 0x1E	; 30
    1106:	df 01       	movw	r26, r30
    1108:	1d 92       	st	X+, r1
    110a:	8a 95       	dec	r24
    110c:	e9 f7       	brne	.-6      	; 0x1108 <getLoad+0x28>
    110e:	06 ea       	ldi	r16, 0xA6	; 166
    1110:	1f e0       	ldi	r17, 0x0F	; 15
    1112:	7f 01       	movw	r14, r30
    1114:	0f 2e       	mov	r0, r31
    1116:	f4 ec       	ldi	r31, 0xC4	; 196
    1118:	cf 2e       	mov	r12, r31
    111a:	ff e0       	ldi	r31, 0x0F	; 15
    111c:	df 2e       	mov	r13, r31
    111e:	f0 2d       	mov	r31, r0
    1120:	68 e2       	ldi	r22, 0x28	; 40
    1122:	70 e0       	ldi	r23, 0x00	; 0
    1124:	f8 01       	movw	r30, r16
    1126:	81 91       	ld	r24, Z+
    1128:	91 91       	ld	r25, Z+
    112a:	8f 01       	movw	r16, r30
    112c:	85 d9       	rcall	.-3318   	; 0x438 <dxl_read_word>
    112e:	d7 01       	movw	r26, r14
    1130:	8d 93       	st	X+, r24
    1132:	9d 93       	st	X+, r25
    1134:	7d 01       	movw	r14, r26
    1136:	0c 15       	cp	r16, r12
    1138:	1d 05       	cpc	r17, r13
    113a:	91 f7       	brne	.-28     	; 0x1120 <getLoad+0x40>
    113c:	88 8d       	ldd	r24, Y+24	; 0x18
    113e:	8f 93       	push	r24
    1140:	8f 89       	ldd	r24, Y+23	; 0x17
    1142:	8f 93       	push	r24
    1144:	8e 89       	ldd	r24, Y+22	; 0x16
    1146:	8f 93       	push	r24
    1148:	8d 89       	ldd	r24, Y+21	; 0x15
    114a:	8f 93       	push	r24
    114c:	8c 89       	ldd	r24, Y+20	; 0x14
    114e:	8f 93       	push	r24
    1150:	8b 89       	ldd	r24, Y+19	; 0x13
    1152:	8f 93       	push	r24
    1154:	8a 89       	ldd	r24, Y+18	; 0x12
    1156:	8f 93       	push	r24
    1158:	89 89       	ldd	r24, Y+17	; 0x11
    115a:	8f 93       	push	r24
    115c:	88 89       	ldd	r24, Y+16	; 0x10
    115e:	8f 93       	push	r24
    1160:	8f 85       	ldd	r24, Y+15	; 0x0f
    1162:	8f 93       	push	r24
    1164:	8e 85       	ldd	r24, Y+14	; 0x0e
    1166:	8f 93       	push	r24
    1168:	8d 85       	ldd	r24, Y+13	; 0x0d
    116a:	8f 93       	push	r24
    116c:	8c 85       	ldd	r24, Y+12	; 0x0c
    116e:	8f 93       	push	r24
    1170:	8b 85       	ldd	r24, Y+11	; 0x0b
    1172:	8f 93       	push	r24
    1174:	8a 85       	ldd	r24, Y+10	; 0x0a
    1176:	8f 93       	push	r24
    1178:	89 85       	ldd	r24, Y+9	; 0x09
    117a:	8f 93       	push	r24
    117c:	88 85       	ldd	r24, Y+8	; 0x08
    117e:	8f 93       	push	r24
    1180:	8f 81       	ldd	r24, Y+7	; 0x07
    1182:	8f 93       	push	r24
    1184:	8e 81       	ldd	r24, Y+6	; 0x06
    1186:	8f 93       	push	r24
    1188:	8d 81       	ldd	r24, Y+5	; 0x05
    118a:	8f 93       	push	r24
    118c:	8c 81       	ldd	r24, Y+4	; 0x04
    118e:	8f 93       	push	r24
    1190:	8b 81       	ldd	r24, Y+3	; 0x03
    1192:	8f 93       	push	r24
    1194:	8a 81       	ldd	r24, Y+2	; 0x02
    1196:	8f 93       	push	r24
    1198:	89 81       	ldd	r24, Y+1	; 0x01
    119a:	8f 93       	push	r24
    119c:	1f 92       	push	r1
    119e:	84 e0       	ldi	r24, 0x04	; 4
    11a0:	8f 93       	push	r24
    11a2:	8c e2       	ldi	r24, 0x2C	; 44
    11a4:	90 e1       	ldi	r25, 0x10	; 16
    11a6:	9f 93       	push	r25
    11a8:	8f 93       	push	r24
    11aa:	0e 94 35 14 	call	0x286a	; 0x286a <printf>
    11ae:	0f b6       	in	r0, 0x3f	; 63
    11b0:	f8 94       	cli
    11b2:	de bf       	out	0x3e, r29	; 62
    11b4:	0f be       	out	0x3f, r0	; 63
    11b6:	cd bf       	out	0x3d, r28	; 61
    11b8:	6e 96       	adiw	r28, 0x1e	; 30
    11ba:	0f b6       	in	r0, 0x3f	; 63
    11bc:	f8 94       	cli
    11be:	de bf       	out	0x3e, r29	; 62
    11c0:	0f be       	out	0x3f, r0	; 63
    11c2:	cd bf       	out	0x3d, r28	; 61
    11c4:	df 91       	pop	r29
    11c6:	cf 91       	pop	r28
    11c8:	1f 91       	pop	r17
    11ca:	0f 91       	pop	r16
    11cc:	ff 90       	pop	r15
    11ce:	ef 90       	pop	r14
    11d0:	df 90       	pop	r13
    11d2:	cf 90       	pop	r12
    11d4:	08 95       	ret

000011d6 <getVoltage>:
    11d6:	cf 92       	push	r12
    11d8:	df 92       	push	r13
    11da:	ef 92       	push	r14
    11dc:	ff 92       	push	r15
    11de:	0f 93       	push	r16
    11e0:	1f 93       	push	r17
    11e2:	cf 93       	push	r28
    11e4:	df 93       	push	r29
    11e6:	cd b7       	in	r28, 0x3d	; 61
    11e8:	de b7       	in	r29, 0x3e	; 62
    11ea:	6e 97       	sbiw	r28, 0x1e	; 30
    11ec:	0f b6       	in	r0, 0x3f	; 63
    11ee:	f8 94       	cli
    11f0:	de bf       	out	0x3e, r29	; 62
    11f2:	0f be       	out	0x3f, r0	; 63
    11f4:	cd bf       	out	0x3d, r28	; 61
    11f6:	fe 01       	movw	r30, r28
    11f8:	31 96       	adiw	r30, 0x01	; 1
    11fa:	8e e1       	ldi	r24, 0x1E	; 30
    11fc:	df 01       	movw	r26, r30
    11fe:	1d 92       	st	X+, r1
    1200:	8a 95       	dec	r24
    1202:	e9 f7       	brne	.-6      	; 0x11fe <getVoltage+0x28>
    1204:	06 ea       	ldi	r16, 0xA6	; 166
    1206:	1f e0       	ldi	r17, 0x0F	; 15
    1208:	7f 01       	movw	r14, r30
    120a:	0f 2e       	mov	r0, r31
    120c:	f4 ec       	ldi	r31, 0xC4	; 196
    120e:	cf 2e       	mov	r12, r31
    1210:	ff e0       	ldi	r31, 0x0F	; 15
    1212:	df 2e       	mov	r13, r31
    1214:	f0 2d       	mov	r31, r0
    1216:	6a e2       	ldi	r22, 0x2A	; 42
    1218:	70 e0       	ldi	r23, 0x00	; 0
    121a:	f8 01       	movw	r30, r16
    121c:	81 91       	ld	r24, Z+
    121e:	91 91       	ld	r25, Z+
    1220:	8f 01       	movw	r16, r30
    1222:	0a d9       	rcall	.-3564   	; 0x438 <dxl_read_word>
    1224:	0e 94 bc 00 	call	0x178	; 0x178 <dxl_get_lowbyte>
    1228:	d7 01       	movw	r26, r14
    122a:	8d 93       	st	X+, r24
    122c:	9d 93       	st	X+, r25
    122e:	7d 01       	movw	r14, r26
    1230:	0c 15       	cp	r16, r12
    1232:	1d 05       	cpc	r17, r13
    1234:	81 f7       	brne	.-32     	; 0x1216 <getVoltage+0x40>
    1236:	88 8d       	ldd	r24, Y+24	; 0x18
    1238:	8f 93       	push	r24
    123a:	8f 89       	ldd	r24, Y+23	; 0x17
    123c:	8f 93       	push	r24
    123e:	8e 89       	ldd	r24, Y+22	; 0x16
    1240:	8f 93       	push	r24
    1242:	8d 89       	ldd	r24, Y+21	; 0x15
    1244:	8f 93       	push	r24
    1246:	8c 89       	ldd	r24, Y+20	; 0x14
    1248:	8f 93       	push	r24
    124a:	8b 89       	ldd	r24, Y+19	; 0x13
    124c:	8f 93       	push	r24
    124e:	8a 89       	ldd	r24, Y+18	; 0x12
    1250:	8f 93       	push	r24
    1252:	89 89       	ldd	r24, Y+17	; 0x11
    1254:	8f 93       	push	r24
    1256:	88 89       	ldd	r24, Y+16	; 0x10
    1258:	8f 93       	push	r24
    125a:	8f 85       	ldd	r24, Y+15	; 0x0f
    125c:	8f 93       	push	r24
    125e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1260:	8f 93       	push	r24
    1262:	8d 85       	ldd	r24, Y+13	; 0x0d
    1264:	8f 93       	push	r24
    1266:	8c 85       	ldd	r24, Y+12	; 0x0c
    1268:	8f 93       	push	r24
    126a:	8b 85       	ldd	r24, Y+11	; 0x0b
    126c:	8f 93       	push	r24
    126e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1270:	8f 93       	push	r24
    1272:	89 85       	ldd	r24, Y+9	; 0x09
    1274:	8f 93       	push	r24
    1276:	88 85       	ldd	r24, Y+8	; 0x08
    1278:	8f 93       	push	r24
    127a:	8f 81       	ldd	r24, Y+7	; 0x07
    127c:	8f 93       	push	r24
    127e:	8e 81       	ldd	r24, Y+6	; 0x06
    1280:	8f 93       	push	r24
    1282:	8d 81       	ldd	r24, Y+5	; 0x05
    1284:	8f 93       	push	r24
    1286:	8c 81       	ldd	r24, Y+4	; 0x04
    1288:	8f 93       	push	r24
    128a:	8b 81       	ldd	r24, Y+3	; 0x03
    128c:	8f 93       	push	r24
    128e:	8a 81       	ldd	r24, Y+2	; 0x02
    1290:	8f 93       	push	r24
    1292:	89 81       	ldd	r24, Y+1	; 0x01
    1294:	8f 93       	push	r24
    1296:	1f 92       	push	r1
    1298:	85 e0       	ldi	r24, 0x05	; 5
    129a:	8f 93       	push	r24
    129c:	8c e2       	ldi	r24, 0x2C	; 44
    129e:	90 e1       	ldi	r25, 0x10	; 16
    12a0:	9f 93       	push	r25
    12a2:	8f 93       	push	r24
    12a4:	0e 94 35 14 	call	0x286a	; 0x286a <printf>
    12a8:	0f b6       	in	r0, 0x3f	; 63
    12aa:	f8 94       	cli
    12ac:	de bf       	out	0x3e, r29	; 62
    12ae:	0f be       	out	0x3f, r0	; 63
    12b0:	cd bf       	out	0x3d, r28	; 61
    12b2:	6e 96       	adiw	r28, 0x1e	; 30
    12b4:	0f b6       	in	r0, 0x3f	; 63
    12b6:	f8 94       	cli
    12b8:	de bf       	out	0x3e, r29	; 62
    12ba:	0f be       	out	0x3f, r0	; 63
    12bc:	cd bf       	out	0x3d, r28	; 61
    12be:	df 91       	pop	r29
    12c0:	cf 91       	pop	r28
    12c2:	1f 91       	pop	r17
    12c4:	0f 91       	pop	r16
    12c6:	ff 90       	pop	r15
    12c8:	ef 90       	pop	r14
    12ca:	df 90       	pop	r13
    12cc:	cf 90       	pop	r12
    12ce:	08 95       	ret

000012d0 <startMotion>:
    12d0:	90 93 87 16 	sts	0x1687, r25
    12d4:	80 93 86 16 	sts	0x1686, r24
    12d8:	70 93 85 16 	sts	0x1685, r23
    12dc:	60 93 84 16 	sts	0x1684, r22
    12e0:	20 91 8c 16 	lds	r18, 0x168C
    12e4:	30 91 8d 16 	lds	r19, 0x168D
    12e8:	23 2b       	or	r18, r19
    12ea:	a1 f4       	brne	.+40     	; 0x1314 <startMotion+0x44>
    12ec:	20 91 8e 16 	lds	r18, 0x168E
    12f0:	30 91 8f 16 	lds	r19, 0x168F
    12f4:	30 93 83 16 	sts	0x1683, r19
    12f8:	20 93 82 16 	sts	0x1682, r18
    12fc:	90 93 8f 16 	sts	0x168F, r25
    1300:	80 93 8e 16 	sts	0x168E, r24
    1304:	70 93 8d 16 	sts	0x168D, r23
    1308:	60 93 8c 16 	sts	0x168C, r22
    130c:	10 92 85 16 	sts	0x1685, r1
    1310:	10 92 84 16 	sts	0x1684, r1
    1314:	08 95       	ret

00001316 <forceMotion>:
    1316:	90 93 8f 16 	sts	0x168F, r25
    131a:	80 93 8e 16 	sts	0x168E, r24
    131e:	70 93 8d 16 	sts	0x168D, r23
    1322:	60 93 8c 16 	sts	0x168C, r22
    1326:	10 92 85 16 	sts	0x1685, r1
    132a:	10 92 84 16 	sts	0x1684, r1
    132e:	81 e0       	ldi	r24, 0x01	; 1
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	90 93 0f 02 	sts	0x020F, r25
    1336:	80 93 0e 02 	sts	0x020E, r24
    133a:	10 92 8b 16 	sts	0x168B, r1
    133e:	10 92 8a 16 	sts	0x168A, r1
    1342:	08 95       	ret

00001344 <stopMotion>:
    1344:	81 e0       	ldi	r24, 0x01	; 1
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	90 93 0f 02 	sts	0x020F, r25
    134c:	80 93 0e 02 	sts	0x020E, r24
    1350:	10 92 8d 16 	sts	0x168D, r1
    1354:	10 92 8c 16 	sts	0x168C, r1
    1358:	10 92 8b 16 	sts	0x168B, r1
    135c:	10 92 8a 16 	sts	0x168A, r1
    1360:	8f ef       	ldi	r24, 0xFF	; 255
    1362:	9f ef       	ldi	r25, 0xFF	; 255
    1364:	90 93 0d 02 	sts	0x020D, r25
    1368:	80 93 0c 02 	sts	0x020C, r24
    136c:	08 95       	ret

0000136e <judgeModeAct>:
    136e:	cf 93       	push	r28
    1370:	df 93       	push	r29
    1372:	80 91 5a 16 	lds	r24, 0x165A
    1376:	90 91 5b 16 	lds	r25, 0x165B
    137a:	01 97       	sbiw	r24, 0x01	; 1
    137c:	c9 f4       	brne	.+50     	; 0x13b0 <judgeModeAct+0x42>
    137e:	80 91 09 02 	lds	r24, 0x0209
    1382:	8f 93       	push	r24
    1384:	80 91 08 02 	lds	r24, 0x0208
    1388:	8f 93       	push	r24
    138a:	84 e5       	ldi	r24, 0x54	; 84
    138c:	90 e1       	ldi	r25, 0x10	; 16
    138e:	9f 93       	push	r25
    1390:	8f 93       	push	r24
    1392:	0e 94 35 14 	call	0x286a	; 0x286a <printf>
    1396:	80 91 08 02 	lds	r24, 0x0208
    139a:	90 91 09 02 	lds	r25, 0x0209
    139e:	90 93 5f 16 	sts	0x165F, r25
    13a2:	80 93 5e 16 	sts	0x165E, r24
    13a6:	0f 90       	pop	r0
    13a8:	0f 90       	pop	r0
    13aa:	0f 90       	pop	r0
    13ac:	0f 90       	pop	r0
    13ae:	3f c1       	rjmp	.+638    	; 0x162e <judgeModeAct+0x2c0>
    13b0:	80 91 5e 16 	lds	r24, 0x165E
    13b4:	90 91 5f 16 	lds	r25, 0x165F
    13b8:	90 93 5d 16 	sts	0x165D, r25
    13bc:	80 93 5c 16 	sts	0x165C, r24
    13c0:	06 97       	sbiw	r24, 0x06	; 6
    13c2:	09 f0       	breq	.+2      	; 0x13c6 <judgeModeAct+0x58>
    13c4:	6b c0       	rjmp	.+214    	; 0x149c <judgeModeAct+0x12e>
    13c6:	80 e7       	ldi	r24, 0x70	; 112
    13c8:	90 e1       	ldi	r25, 0x10	; 16
    13ca:	0e 94 46 14 	call	0x288c	; 0x288c <puts>
    13ce:	40 91 62 16 	lds	r20, 0x1662
    13d2:	50 91 63 16 	lds	r21, 0x1663
    13d6:	e4 e6       	ldi	r30, 0x64	; 100
    13d8:	f6 e1       	ldi	r31, 0x16	; 22
    13da:	81 e0       	ldi	r24, 0x01	; 1
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	c0 e0       	ldi	r28, 0x00	; 0
    13e0:	d0 e0       	ldi	r29, 0x00	; 0
    13e2:	21 91       	ld	r18, Z+
    13e4:	31 91       	ld	r19, Z+
    13e6:	42 17       	cp	r20, r18
    13e8:	53 07       	cpc	r21, r19
    13ea:	14 f4       	brge	.+4      	; 0x13f0 <judgeModeAct+0x82>
    13ec:	a9 01       	movw	r20, r18
    13ee:	ec 01       	movw	r28, r24
    13f0:	01 96       	adiw	r24, 0x01	; 1
    13f2:	86 30       	cpi	r24, 0x06	; 6
    13f4:	91 05       	cpc	r25, r1
    13f6:	a9 f7       	brne	.-22     	; 0x13e2 <judgeModeAct+0x74>
    13f8:	41 35       	cpi	r20, 0x51	; 81
    13fa:	51 05       	cpc	r21, r1
    13fc:	ec f0       	brlt	.+58     	; 0x1438 <judgeModeAct+0xca>
    13fe:	80 91 66 16 	lds	r24, 0x1666
    1402:	90 91 67 16 	lds	r25, 0x1667
    1406:	45 97       	sbiw	r24, 0x15	; 21
    1408:	bc f0       	brlt	.+46     	; 0x1438 <judgeModeAct+0xca>
    140a:	80 91 68 16 	lds	r24, 0x1668
    140e:	90 91 69 16 	lds	r25, 0x1669
    1412:	89 97       	sbiw	r24, 0x29	; 41
    1414:	8c f0       	brlt	.+34     	; 0x1438 <judgeModeAct+0xca>
    1416:	80 91 6a 16 	lds	r24, 0x166A
    141a:	90 91 6b 16 	lds	r25, 0x166B
    141e:	45 97       	sbiw	r24, 0x15	; 21
    1420:	5c f0       	brlt	.+22     	; 0x1438 <judgeModeAct+0xca>
    1422:	80 e8       	ldi	r24, 0x80	; 128
    1424:	90 e1       	ldi	r25, 0x10	; 16
    1426:	0e 94 46 14 	call	0x288c	; 0x288c <puts>
    142a:	87 e0       	ldi	r24, 0x07	; 7
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	90 93 5f 16 	sts	0x165F, r25
    1432:	80 93 5e 16 	sts	0x165E, r24
    1436:	fb c0       	rjmp	.+502    	; 0x162e <judgeModeAct+0x2c0>
    1438:	df 93       	push	r29
    143a:	cf 93       	push	r28
    143c:	80 e9       	ldi	r24, 0x90	; 144
    143e:	90 e1       	ldi	r25, 0x10	; 16
    1440:	9f 93       	push	r25
    1442:	8f 93       	push	r24
    1444:	0e 94 35 14 	call	0x286a	; 0x286a <printf>
    1448:	0f 90       	pop	r0
    144a:	0f 90       	pop	r0
    144c:	0f 90       	pop	r0
    144e:	0f 90       	pop	r0
    1450:	c3 30       	cpi	r28, 0x03	; 3
    1452:	d1 05       	cpc	r29, r1
    1454:	71 f0       	breq	.+28     	; 0x1472 <judgeModeAct+0x104>
    1456:	1c f4       	brge	.+6      	; 0x145e <judgeModeAct+0xf0>
    1458:	21 97       	sbiw	r28, 0x01	; 1
    145a:	24 f4       	brge	.+8      	; 0x1464 <judgeModeAct+0xf6>
    145c:	18 c0       	rjmp	.+48     	; 0x148e <judgeModeAct+0x120>
    145e:	26 97       	sbiw	r28, 0x06	; 6
    1460:	7c f0       	brlt	.+30     	; 0x1480 <judgeModeAct+0x112>
    1462:	15 c0       	rjmp	.+42     	; 0x148e <judgeModeAct+0x120>
    1464:	81 e0       	ldi	r24, 0x01	; 1
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	90 93 5f 16 	sts	0x165F, r25
    146c:	80 93 5e 16 	sts	0x165E, r24
    1470:	de c0       	rjmp	.+444    	; 0x162e <judgeModeAct+0x2c0>
    1472:	85 e0       	ldi	r24, 0x05	; 5
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	90 93 5f 16 	sts	0x165F, r25
    147a:	80 93 5e 16 	sts	0x165E, r24
    147e:	d7 c0       	rjmp	.+430    	; 0x162e <judgeModeAct+0x2c0>
    1480:	82 e0       	ldi	r24, 0x02	; 2
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	90 93 5f 16 	sts	0x165F, r25
    1488:	80 93 5e 16 	sts	0x165E, r24
    148c:	d0 c0       	rjmp	.+416    	; 0x162e <judgeModeAct+0x2c0>
    148e:	85 e0       	ldi	r24, 0x05	; 5
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	90 93 5f 16 	sts	0x165F, r25
    1496:	80 93 5e 16 	sts	0x165E, r24
    149a:	c9 c0       	rjmp	.+402    	; 0x162e <judgeModeAct+0x2c0>
    149c:	8f ea       	ldi	r24, 0xAF	; 175
    149e:	90 e1       	ldi	r25, 0x10	; 16
    14a0:	0e 94 46 14 	call	0x288c	; 0x288c <puts>
    14a4:	80 91 74 16 	lds	r24, 0x1674
    14a8:	90 91 75 16 	lds	r25, 0x1675
    14ac:	00 97       	sbiw	r24, 0x00	; 0
    14ae:	b9 f4       	brne	.+46     	; 0x14de <judgeModeAct+0x170>
    14b0:	80 91 76 16 	lds	r24, 0x1676
    14b4:	90 91 77 16 	lds	r25, 0x1677
    14b8:	89 2b       	or	r24, r25
    14ba:	69 f5       	brne	.+90     	; 0x1516 <judgeModeAct+0x1a8>
    14bc:	80 91 78 16 	lds	r24, 0x1678
    14c0:	90 91 79 16 	lds	r25, 0x1679
    14c4:	89 2b       	or	r24, r25
    14c6:	39 f5       	brne	.+78     	; 0x1516 <judgeModeAct+0x1a8>
    14c8:	8f eb       	ldi	r24, 0xBF	; 191
    14ca:	90 e1       	ldi	r25, 0x10	; 16
    14cc:	0e 94 46 14 	call	0x288c	; 0x288c <puts>
    14d0:	86 e0       	ldi	r24, 0x06	; 6
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	90 93 5f 16 	sts	0x165F, r25
    14d8:	80 93 5e 16 	sts	0x165E, r24
    14dc:	a8 c0       	rjmp	.+336    	; 0x162e <judgeModeAct+0x2c0>
    14de:	81 30       	cpi	r24, 0x01	; 1
    14e0:	91 05       	cpc	r25, r1
    14e2:	09 f0       	breq	.+2      	; 0x14e6 <judgeModeAct+0x178>
    14e4:	45 c0       	rjmp	.+138    	; 0x1570 <judgeModeAct+0x202>
    14e6:	80 91 76 16 	lds	r24, 0x1676
    14ea:	90 91 77 16 	lds	r25, 0x1677
    14ee:	89 2b       	or	r24, r25
    14f0:	09 f0       	breq	.+2      	; 0x14f4 <judgeModeAct+0x186>
    14f2:	41 c0       	rjmp	.+130    	; 0x1576 <judgeModeAct+0x208>
    14f4:	80 91 78 16 	lds	r24, 0x1678
    14f8:	90 91 79 16 	lds	r25, 0x1679
    14fc:	89 2b       	or	r24, r25
    14fe:	d9 f5       	brne	.+118    	; 0x1576 <judgeModeAct+0x208>
    1500:	86 ed       	ldi	r24, 0xD6	; 214
    1502:	90 e1       	ldi	r25, 0x10	; 16
    1504:	0e 94 46 14 	call	0x288c	; 0x288c <puts>
    1508:	84 e0       	ldi	r24, 0x04	; 4
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	90 93 5f 16 	sts	0x165F, r25
    1510:	80 93 5e 16 	sts	0x165E, r24
    1514:	8c c0       	rjmp	.+280    	; 0x162e <judgeModeAct+0x2c0>
    1516:	80 91 76 16 	lds	r24, 0x1676
    151a:	90 91 77 16 	lds	r25, 0x1677
    151e:	81 30       	cpi	r24, 0x01	; 1
    1520:	91 05       	cpc	r25, r1
    1522:	91 f4       	brne	.+36     	; 0x1548 <judgeModeAct+0x1da>
    1524:	80 91 78 16 	lds	r24, 0x1678
    1528:	90 91 79 16 	lds	r25, 0x1679
    152c:	89 2b       	or	r24, r25
    152e:	09 f0       	breq	.+2      	; 0x1532 <judgeModeAct+0x1c4>
    1530:	4f c0       	rjmp	.+158    	; 0x15d0 <judgeModeAct+0x262>
    1532:	8d ee       	ldi	r24, 0xED	; 237
    1534:	90 e1       	ldi	r25, 0x10	; 16
    1536:	0e 94 46 14 	call	0x288c	; 0x288c <puts>
    153a:	86 e0       	ldi	r24, 0x06	; 6
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	90 93 5f 16 	sts	0x165F, r25
    1542:	80 93 5e 16 	sts	0x165E, r24
    1546:	73 c0       	rjmp	.+230    	; 0x162e <judgeModeAct+0x2c0>
    1548:	89 2b       	or	r24, r25
    154a:	09 f0       	breq	.+2      	; 0x154e <judgeModeAct+0x1e0>
    154c:	41 c0       	rjmp	.+130    	; 0x15d0 <judgeModeAct+0x262>
    154e:	80 91 78 16 	lds	r24, 0x1678
    1552:	90 91 79 16 	lds	r25, 0x1679
    1556:	01 97       	sbiw	r24, 0x01	; 1
    1558:	d9 f5       	brne	.+118    	; 0x15d0 <judgeModeAct+0x262>
    155a:	84 e0       	ldi	r24, 0x04	; 4
    155c:	91 e1       	ldi	r25, 0x11	; 17
    155e:	0e 94 46 14 	call	0x288c	; 0x288c <puts>
    1562:	81 e0       	ldi	r24, 0x01	; 1
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	90 93 5f 16 	sts	0x165F, r25
    156a:	80 93 5e 16 	sts	0x165E, r24
    156e:	5f c0       	rjmp	.+190    	; 0x162e <judgeModeAct+0x2c0>
    1570:	81 30       	cpi	r24, 0x01	; 1
    1572:	91 05       	cpc	r25, r1
    1574:	59 f5       	brne	.+86     	; 0x15cc <judgeModeAct+0x25e>
    1576:	80 91 76 16 	lds	r24, 0x1676
    157a:	90 91 77 16 	lds	r25, 0x1677
    157e:	81 30       	cpi	r24, 0x01	; 1
    1580:	91 05       	cpc	r25, r1
    1582:	89 f4       	brne	.+34     	; 0x15a6 <judgeModeAct+0x238>
    1584:	80 91 78 16 	lds	r24, 0x1678
    1588:	90 91 79 16 	lds	r25, 0x1679
    158c:	89 2b       	or	r24, r25
    158e:	c9 f5       	brne	.+114    	; 0x1602 <judgeModeAct+0x294>
    1590:	8b e1       	ldi	r24, 0x1B	; 27
    1592:	91 e1       	ldi	r25, 0x11	; 17
    1594:	0e 94 46 14 	call	0x288c	; 0x288c <puts>
    1598:	82 e0       	ldi	r24, 0x02	; 2
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	90 93 5f 16 	sts	0x165F, r25
    15a0:	80 93 5e 16 	sts	0x165E, r24
    15a4:	44 c0       	rjmp	.+136    	; 0x162e <judgeModeAct+0x2c0>
    15a6:	89 2b       	or	r24, r25
    15a8:	61 f5       	brne	.+88     	; 0x1602 <judgeModeAct+0x294>
    15aa:	80 91 78 16 	lds	r24, 0x1678
    15ae:	90 91 79 16 	lds	r25, 0x1679
    15b2:	01 97       	sbiw	r24, 0x01	; 1
    15b4:	31 f5       	brne	.+76     	; 0x1602 <judgeModeAct+0x294>
    15b6:	82 e3       	ldi	r24, 0x32	; 50
    15b8:	91 e1       	ldi	r25, 0x11	; 17
    15ba:	0e 94 46 14 	call	0x288c	; 0x288c <puts>
    15be:	86 e0       	ldi	r24, 0x06	; 6
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	90 93 5f 16 	sts	0x165F, r25
    15c6:	80 93 5e 16 	sts	0x165E, r24
    15ca:	31 c0       	rjmp	.+98     	; 0x162e <judgeModeAct+0x2c0>
    15cc:	00 97       	sbiw	r24, 0x00	; 0
    15ce:	b9 f4       	brne	.+46     	; 0x15fe <judgeModeAct+0x290>
    15d0:	80 91 76 16 	lds	r24, 0x1676
    15d4:	90 91 77 16 	lds	r25, 0x1677
    15d8:	01 97       	sbiw	r24, 0x01	; 1
    15da:	49 f5       	brne	.+82     	; 0x162e <judgeModeAct+0x2c0>
    15dc:	80 91 78 16 	lds	r24, 0x1678
    15e0:	90 91 79 16 	lds	r25, 0x1679
    15e4:	01 97       	sbiw	r24, 0x01	; 1
    15e6:	19 f5       	brne	.+70     	; 0x162e <judgeModeAct+0x2c0>
    15e8:	89 e4       	ldi	r24, 0x49	; 73
    15ea:	91 e1       	ldi	r25, 0x11	; 17
    15ec:	0e 94 46 14 	call	0x288c	; 0x288c <puts>
    15f0:	85 e0       	ldi	r24, 0x05	; 5
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	90 93 5f 16 	sts	0x165F, r25
    15f8:	80 93 5e 16 	sts	0x165E, r24
    15fc:	18 c0       	rjmp	.+48     	; 0x162e <judgeModeAct+0x2c0>
    15fe:	01 97       	sbiw	r24, 0x01	; 1
    1600:	b1 f4       	brne	.+44     	; 0x162e <judgeModeAct+0x2c0>
    1602:	80 91 76 16 	lds	r24, 0x1676
    1606:	90 91 77 16 	lds	r25, 0x1677
    160a:	01 97       	sbiw	r24, 0x01	; 1
    160c:	81 f4       	brne	.+32     	; 0x162e <judgeModeAct+0x2c0>
    160e:	80 91 78 16 	lds	r24, 0x1678
    1612:	90 91 79 16 	lds	r25, 0x1679
    1616:	01 97       	sbiw	r24, 0x01	; 1
    1618:	51 f4       	brne	.+20     	; 0x162e <judgeModeAct+0x2c0>
    161a:	80 e6       	ldi	r24, 0x60	; 96
    161c:	91 e1       	ldi	r25, 0x11	; 17
    161e:	0e 94 46 14 	call	0x288c	; 0x288c <puts>
    1622:	86 e0       	ldi	r24, 0x06	; 6
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	90 93 5f 16 	sts	0x165F, r25
    162a:	80 93 5e 16 	sts	0x165E, r24
    162e:	df 91       	pop	r29
    1630:	cf 91       	pop	r28
    1632:	08 95       	ret

00001634 <setModeAction>:
    1634:	cf 93       	push	r28
    1636:	df 93       	push	r29
    1638:	80 91 90 16 	lds	r24, 0x1690
    163c:	90 91 91 16 	lds	r25, 0x1691
    1640:	c0 91 6a 02 	lds	r28, 0x026A
    1644:	d0 91 6b 02 	lds	r29, 0x026B
    1648:	e0 91 5e 16 	lds	r30, 0x165E
    164c:	f0 91 5f 16 	lds	r31, 0x165F
    1650:	31 97       	sbiw	r30, 0x01	; 1
    1652:	e7 30       	cpi	r30, 0x07	; 7
    1654:	f1 05       	cpc	r31, r1
    1656:	20 f4       	brcc	.+8      	; 0x1660 <setModeAction+0x2c>
    1658:	ea 59       	subi	r30, 0x9A	; 154
    165a:	ff 4f       	sbci	r31, 0xFF	; 255
    165c:	0c 94 44 13 	jmp	0x2688	; 0x2688 <__tablejump2__>
    1660:	fc 01       	movw	r30, r24
    1662:	ee 0f       	add	r30, r30
    1664:	ff 1f       	adc	r31, r31
    1666:	ee 0f       	add	r30, r30
    1668:	ff 1f       	adc	r31, r31
    166a:	e8 59       	subi	r30, 0x98	; 152
    166c:	fd 4f       	sbci	r31, 0xFD	; 253
    166e:	53 c0       	rjmp	.+166    	; 0x1716 <setModeAction+0xe2>
    1670:	fc 01       	movw	r30, r24
    1672:	ee 0f       	add	r30, r30
    1674:	ff 1f       	adc	r31, r31
    1676:	ee 0f       	add	r30, r30
    1678:	ff 1f       	adc	r31, r31
    167a:	e4 5a       	subi	r30, 0xA4	; 164
    167c:	fd 4f       	sbci	r31, 0xFD	; 253
    167e:	c0 91 5e 02 	lds	r28, 0x025E
    1682:	d0 91 5f 02 	lds	r29, 0x025F
    1686:	47 c0       	rjmp	.+142    	; 0x1716 <setModeAction+0xe2>
    1688:	fc 01       	movw	r30, r24
    168a:	ee 0f       	add	r30, r30
    168c:	ff 1f       	adc	r31, r31
    168e:	ee 0f       	add	r30, r30
    1690:	ff 1f       	adc	r31, r31
    1692:	e0 5b       	subi	r30, 0xB0	; 176
    1694:	fd 4f       	sbci	r31, 0xFD	; 253
    1696:	c0 91 52 02 	lds	r28, 0x0252
    169a:	d0 91 53 02 	lds	r29, 0x0253
    169e:	3b c0       	rjmp	.+118    	; 0x1716 <setModeAction+0xe2>
    16a0:	fc 01       	movw	r30, r24
    16a2:	ee 0f       	add	r30, r30
    16a4:	ff 1f       	adc	r31, r31
    16a6:	ee 0f       	add	r30, r30
    16a8:	ff 1f       	adc	r31, r31
    16aa:	ec 5b       	subi	r30, 0xBC	; 188
    16ac:	fd 4f       	sbci	r31, 0xFD	; 253
    16ae:	c0 91 46 02 	lds	r28, 0x0246
    16b2:	d0 91 47 02 	lds	r29, 0x0247
    16b6:	2f c0       	rjmp	.+94     	; 0x1716 <setModeAction+0xe2>
    16b8:	fc 01       	movw	r30, r24
    16ba:	ee 0f       	add	r30, r30
    16bc:	ff 1f       	adc	r31, r31
    16be:	ee 0f       	add	r30, r30
    16c0:	ff 1f       	adc	r31, r31
    16c2:	e8 5c       	subi	r30, 0xC8	; 200
    16c4:	fd 4f       	sbci	r31, 0xFD	; 253
    16c6:	c0 91 3a 02 	lds	r28, 0x023A
    16ca:	d0 91 3b 02 	lds	r29, 0x023B
    16ce:	23 c0       	rjmp	.+70     	; 0x1716 <setModeAction+0xe2>
    16d0:	fc 01       	movw	r30, r24
    16d2:	ee 0f       	add	r30, r30
    16d4:	ff 1f       	adc	r31, r31
    16d6:	ee 0f       	add	r30, r30
    16d8:	ff 1f       	adc	r31, r31
    16da:	e0 5d       	subi	r30, 0xD0	; 208
    16dc:	fd 4f       	sbci	r31, 0xFD	; 253
    16de:	c0 91 32 02 	lds	r28, 0x0232
    16e2:	d0 91 33 02 	lds	r29, 0x0233
    16e6:	17 c0       	rjmp	.+46     	; 0x1716 <setModeAction+0xe2>
    16e8:	fc 01       	movw	r30, r24
    16ea:	ee 0f       	add	r30, r30
    16ec:	ff 1f       	adc	r31, r31
    16ee:	ee 0f       	add	r30, r30
    16f0:	ff 1f       	adc	r31, r31
    16f2:	e0 5e       	subi	r30, 0xE0	; 224
    16f4:	fd 4f       	sbci	r31, 0xFD	; 253
    16f6:	c0 91 22 02 	lds	r28, 0x0222
    16fa:	d0 91 23 02 	lds	r29, 0x0223
    16fe:	0b c0       	rjmp	.+22     	; 0x1716 <setModeAction+0xe2>
    1700:	fc 01       	movw	r30, r24
    1702:	ee 0f       	add	r30, r30
    1704:	ff 1f       	adc	r31, r31
    1706:	ee 0f       	add	r30, r30
    1708:	ff 1f       	adc	r31, r31
    170a:	e0 5f       	subi	r30, 0xF0	; 240
    170c:	fd 4f       	sbci	r31, 0xFD	; 253
    170e:	c0 91 12 02 	lds	r28, 0x0212
    1712:	d0 91 13 02 	lds	r29, 0x0213
    1716:	80 91 8c 16 	lds	r24, 0x168C
    171a:	90 91 8d 16 	lds	r25, 0x168D
    171e:	18 16       	cp	r1, r24
    1720:	19 06       	cpc	r1, r25
    1722:	84 f1       	brlt	.+96     	; 0x1784 <setModeAction+0x150>
    1724:	80 91 96 16 	lds	r24, 0x1696
    1728:	90 91 97 16 	lds	r25, 0x1697
    172c:	01 97       	sbiw	r24, 0x01	; 1
    172e:	51 f5       	brne	.+84     	; 0x1784 <setModeAction+0x150>
    1730:	80 91 82 16 	lds	r24, 0x1682
    1734:	90 91 83 16 	lds	r25, 0x1683
    1738:	8d 7f       	andi	r24, 0xFD	; 253
    173a:	01 97       	sbiw	r24, 0x01	; 1
    173c:	51 f0       	breq	.+20     	; 0x1752 <setModeAction+0x11e>
    173e:	80 81       	ld	r24, Z
    1740:	91 81       	ldd	r25, Z+1	; 0x01
    1742:	03 97       	sbiw	r24, 0x03	; 3
    1744:	31 f4       	brne	.+12     	; 0x1752 <setModeAction+0x11e>
    1746:	61 e0       	ldi	r22, 0x01	; 1
    1748:	70 e0       	ldi	r23, 0x00	; 0
    174a:	81 e0       	ldi	r24, 0x01	; 1
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	c0 dd       	rcall	.-1152   	; 0x12d0 <startMotion>
    1750:	19 c0       	rjmp	.+50     	; 0x1784 <setModeAction+0x150>
    1752:	62 81       	ldd	r22, Z+2	; 0x02
    1754:	73 81       	ldd	r23, Z+3	; 0x03
    1756:	80 81       	ld	r24, Z
    1758:	91 81       	ldd	r25, Z+1	; 0x01
    175a:	ba dd       	rcall	.-1164   	; 0x12d0 <startMotion>
    175c:	80 91 90 16 	lds	r24, 0x1690
    1760:	90 91 91 16 	lds	r25, 0x1691
    1764:	01 96       	adiw	r24, 0x01	; 1
    1766:	c8 17       	cp	r28, r24
    1768:	d9 07       	cpc	r29, r25
    176a:	2c f0       	brlt	.+10     	; 0x1776 <setModeAction+0x142>
    176c:	90 93 91 16 	sts	0x1691, r25
    1770:	80 93 90 16 	sts	0x1690, r24
    1774:	07 c0       	rjmp	.+14     	; 0x1784 <setModeAction+0x150>
    1776:	81 e0       	ldi	r24, 0x01	; 1
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	90 93 91 16 	sts	0x1691, r25
    177e:	80 93 90 16 	sts	0x1690, r24
    1782:	f5 dd       	rcall	.-1046   	; 0x136e <judgeModeAct>
    1784:	df 91       	pop	r29
    1786:	cf 91       	pop	r28
    1788:	08 95       	ret

0000178a <PrintErrorCode>:
	
}

void PrintErrorCode()
{
	if(dxl_get_rxpacket_error(ERRBIT_VOLTAGE) == 1)
    178a:	81 e0       	ldi	r24, 0x01	; 1
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	0e 94 a2 00 	call	0x144	; 0x144 <dxl_get_rxpacket_error>
    1792:	01 97       	sbiw	r24, 0x01	; 1
    1794:	21 f4       	brne	.+8      	; 0x179e <PrintErrorCode+0x14>
	printf("Input voltage error!\n");
    1796:	8c e7       	ldi	r24, 0x7C	; 124
    1798:	91 e1       	ldi	r25, 0x11	; 17
    179a:	0e 94 46 14 	call	0x288c	; 0x288c <puts>

	if(dxl_get_rxpacket_error(ERRBIT_ANGLE) == 1)
    179e:	82 e0       	ldi	r24, 0x02	; 2
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	0e 94 a2 00 	call	0x144	; 0x144 <dxl_get_rxpacket_error>
    17a6:	01 97       	sbiw	r24, 0x01	; 1
    17a8:	21 f4       	brne	.+8      	; 0x17b2 <PrintErrorCode+0x28>
	printf("Angle limit error!\n");
    17aa:	81 e9       	ldi	r24, 0x91	; 145
    17ac:	91 e1       	ldi	r25, 0x11	; 17
    17ae:	0e 94 46 14 	call	0x288c	; 0x288c <puts>

	if(dxl_get_rxpacket_error(ERRBIT_OVERHEAT) == 1)
    17b2:	84 e0       	ldi	r24, 0x04	; 4
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	0e 94 a2 00 	call	0x144	; 0x144 <dxl_get_rxpacket_error>
    17ba:	01 97       	sbiw	r24, 0x01	; 1
    17bc:	21 f4       	brne	.+8      	; 0x17c6 <PrintErrorCode+0x3c>
	printf("Overheat error!\n");
    17be:	84 ea       	ldi	r24, 0xA4	; 164
    17c0:	91 e1       	ldi	r25, 0x11	; 17
    17c2:	0e 94 46 14 	call	0x288c	; 0x288c <puts>

	if(dxl_get_rxpacket_error(ERRBIT_RANGE) == 1)
    17c6:	88 e0       	ldi	r24, 0x08	; 8
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	0e 94 a2 00 	call	0x144	; 0x144 <dxl_get_rxpacket_error>
    17ce:	01 97       	sbiw	r24, 0x01	; 1
    17d0:	21 f4       	brne	.+8      	; 0x17da <PrintErrorCode+0x50>
	printf("Out of range error!\n");
    17d2:	84 eb       	ldi	r24, 0xB4	; 180
    17d4:	91 e1       	ldi	r25, 0x11	; 17
    17d6:	0e 94 46 14 	call	0x288c	; 0x288c <puts>

	if(dxl_get_rxpacket_error(ERRBIT_CHECKSUM) == 1)
    17da:	80 e1       	ldi	r24, 0x10	; 16
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	0e 94 a2 00 	call	0x144	; 0x144 <dxl_get_rxpacket_error>
    17e2:	01 97       	sbiw	r24, 0x01	; 1
    17e4:	21 f4       	brne	.+8      	; 0x17ee <PrintErrorCode+0x64>
	printf("Checksum error!\n");
    17e6:	88 ec       	ldi	r24, 0xC8	; 200
    17e8:	91 e1       	ldi	r25, 0x11	; 17
    17ea:	0e 94 46 14 	call	0x288c	; 0x288c <puts>

	if(dxl_get_rxpacket_error(ERRBIT_OVERLOAD) == 1)
    17ee:	80 e2       	ldi	r24, 0x20	; 32
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	0e 94 a2 00 	call	0x144	; 0x144 <dxl_get_rxpacket_error>
    17f6:	01 97       	sbiw	r24, 0x01	; 1
    17f8:	21 f4       	brne	.+8      	; 0x1802 <PrintErrorCode+0x78>
	printf("Overload error!\n");
    17fa:	88 ed       	ldi	r24, 0xD8	; 216
    17fc:	91 e1       	ldi	r25, 0x11	; 17
    17fe:	0e 94 46 14 	call	0x288c	; 0x288c <puts>

	if(dxl_get_rxpacket_error(ERRBIT_INSTRUCTION) == 1)
    1802:	80 e4       	ldi	r24, 0x40	; 64
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	0e 94 a2 00 	call	0x144	; 0x144 <dxl_get_rxpacket_error>
    180a:	01 97       	sbiw	r24, 0x01	; 1
    180c:	21 f4       	brne	.+8      	; 0x1816 <PrintErrorCode+0x8c>
	printf("Instruction code error!\n");
    180e:	88 ee       	ldi	r24, 0xE8	; 232
    1810:	91 e1       	ldi	r25, 0x11	; 17
    1812:	0c 94 46 14 	jmp	0x288c	; 0x288c <puts>
    1816:	08 95       	ret

00001818 <PrintCommStatus>:
}

// Print communication result
void PrintCommStatus(int CommStatus)
{
	switch(CommStatus)
    1818:	84 30       	cpi	r24, 0x04	; 4
    181a:	91 05       	cpc	r25, r1
    181c:	99 f0       	breq	.+38     	; 0x1844 <PrintCommStatus+0x2c>
    181e:	34 f4       	brge	.+12     	; 0x182c <PrintCommStatus+0x14>
    1820:	82 30       	cpi	r24, 0x02	; 2
    1822:	91 05       	cpc	r25, r1
    1824:	51 f0       	breq	.+20     	; 0x183a <PrintCommStatus+0x22>
    1826:	03 97       	sbiw	r24, 0x03	; 3
    1828:	91 f0       	breq	.+36     	; 0x184e <PrintCommStatus+0x36>
    182a:	25 c0       	rjmp	.+74     	; 0x1876 <PrintCommStatus+0x5e>
    182c:	86 30       	cpi	r24, 0x06	; 6
    182e:	91 05       	cpc	r25, r1
    1830:	c1 f0       	breq	.+48     	; 0x1862 <PrintCommStatus+0x4a>
    1832:	94 f0       	brlt	.+36     	; 0x1858 <PrintCommStatus+0x40>
    1834:	07 97       	sbiw	r24, 0x07	; 7
    1836:	d1 f0       	breq	.+52     	; 0x186c <PrintCommStatus+0x54>
    1838:	1e c0       	rjmp	.+60     	; 0x1876 <PrintCommStatus+0x5e>
	{
		case COMM_TXFAIL:
		printf("COMM_TXFAIL: Failed transmit instruction packet!\n");
    183a:	80 e0       	ldi	r24, 0x00	; 0
    183c:	92 e1       	ldi	r25, 0x12	; 18
    183e:	0c 94 46 14 	jmp	0x288c	; 0x288c <puts>
		break;
    1842:	08 95       	ret

		case COMM_TXERROR:
		printf("COMM_TXERROR: Incorrect instruction packet!\n");
    1844:	81 e3       	ldi	r24, 0x31	; 49
    1846:	92 e1       	ldi	r25, 0x12	; 18
    1848:	0c 94 46 14 	jmp	0x288c	; 0x288c <puts>
		break;
    184c:	08 95       	ret

		case COMM_RXFAIL:
		printf("COMM_RXFAIL: Failed get status packet from device!\n");
    184e:	8d e5       	ldi	r24, 0x5D	; 93
    1850:	92 e1       	ldi	r25, 0x12	; 18
    1852:	0c 94 46 14 	jmp	0x288c	; 0x288c <puts>
		break;
    1856:	08 95       	ret

		case COMM_RXWAITING:
		printf("COMM_RXWAITING: Now recieving status packet!\n");
    1858:	80 e9       	ldi	r24, 0x90	; 144
    185a:	92 e1       	ldi	r25, 0x12	; 18
    185c:	0c 94 46 14 	jmp	0x288c	; 0x288c <puts>
		break;
    1860:	08 95       	ret

		case COMM_RXTIMEOUT:
		printf("COMM_RXTIMEOUT: There is no status packet!\n");
    1862:	8d eb       	ldi	r24, 0xBD	; 189
    1864:	92 e1       	ldi	r25, 0x12	; 18
    1866:	0c 94 46 14 	jmp	0x288c	; 0x288c <puts>
		break;
    186a:	08 95       	ret

		case COMM_RXCORRUPT:
		printf("COMM_RXCORRUPT: Incorrect status packet!\n");
    186c:	88 ee       	ldi	r24, 0xE8	; 232
    186e:	92 e1       	ldi	r25, 0x12	; 18
    1870:	0c 94 46 14 	jmp	0x288c	; 0x288c <puts>
		break;
    1874:	08 95       	ret

		default:
		printf("This is unknown error code!\n");
    1876:	81 e1       	ldi	r24, 0x11	; 17
    1878:	93 e1       	ldi	r25, 0x13	; 19
    187a:	0c 94 46 14 	jmp	0x288c	; 0x288c <puts>
    187e:	08 95       	ret

00001880 <MotorControl>:
	
	printf( "%d:%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d\n",
	EVT_GET_VOLTAGE, tmp[0],tmp[1],tmp[2],tmp[3],tmp[4],tmp[5],tmp[6],tmp[7],tmp[8],tmp[9],tmp[10],tmp[11] );
}

void MotorControl( int id, int power ){
    1880:	0f 93       	push	r16
    1882:	1f 93       	push	r17
    1884:	cf 93       	push	r28
    1886:	df 93       	push	r29
    1888:	8c 01       	movw	r16, r24
    188a:	eb 01       	movw	r28, r22
	int CommStatus;
//	printf( "%d %d\n", id, power );
//	dxl_write_word( id, P_GOAL_SPEED_L, power );
	if(1){
		dxl_set_txpacket_id(BROADCAST_ID);
    188c:	8e ef       	ldi	r24, 0xFE	; 254
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	0e 94 94 00 	call	0x128	; 0x128 <dxl_set_txpacket_id>
		dxl_set_txpacket_instruction(INST_SYNC_WRITE);
    1894:	83 e8       	ldi	r24, 0x83	; 131
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	0e 94 97 00 	call	0x12e	; 0x12e <dxl_set_txpacket_instruction>
		dxl_set_txpacket_parameter(0, P_GOAL_SPEED_L);
    189c:	60 e2       	ldi	r22, 0x20	; 32
    189e:	70 e0       	ldi	r23, 0x00	; 0
    18a0:	80 e0       	ldi	r24, 0x00	; 0
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	0e 94 9a 00 	call	0x134	; 0x134 <dxl_set_txpacket_parameter>
		dxl_set_txpacket_parameter(1, 2);
    18a8:	62 e0       	ldi	r22, 0x02	; 2
    18aa:	70 e0       	ldi	r23, 0x00	; 0
    18ac:	81 e0       	ldi	r24, 0x01	; 1
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	0e 94 9a 00 	call	0x134	; 0x134 <dxl_set_txpacket_parameter>
		dxl_set_txpacket_parameter(2, id);
    18b4:	b8 01       	movw	r22, r16
    18b6:	82 e0       	ldi	r24, 0x02	; 2
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	0e 94 9a 00 	call	0x134	; 0x134 <dxl_set_txpacket_parameter>
		dxl_set_txpacket_parameter(3, dxl_get_lowbyte(power));
    18be:	ce 01       	movw	r24, r28
    18c0:	0e 94 bc 00 	call	0x178	; 0x178 <dxl_get_lowbyte>
    18c4:	bc 01       	movw	r22, r24
    18c6:	83 e0       	ldi	r24, 0x03	; 3
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	0e 94 9a 00 	call	0x134	; 0x134 <dxl_set_txpacket_parameter>
		dxl_set_txpacket_parameter(4, dxl_get_highbyte(power));
    18ce:	ce 01       	movw	r24, r28
    18d0:	0e 94 c0 00 	call	0x180	; 0x180 <dxl_get_highbyte>
    18d4:	bc 01       	movw	r22, r24
    18d6:	84 e0       	ldi	r24, 0x04	; 4
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	0e 94 9a 00 	call	0x134	; 0x134 <dxl_set_txpacket_parameter>
		dxl_set_txpacket_length(4+3*1);
    18de:	87 e0       	ldi	r24, 0x07	; 7
    18e0:	90 e0       	ldi	r25, 0x00	; 0
    18e2:	0e 94 9f 00 	call	0x13e	; 0x13e <dxl_set_txpacket_length>
		dxl_txrx_packet();
    18e6:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <dxl_txrx_packet>
		CommStatus = dxl_get_result();
    18ea:	0e 94 8f 00 	call	0x11e	; 0x11e <dxl_get_result>
		if( CommStatus == COMM_RXSUCCESS )
    18ee:	81 30       	cpi	r24, 0x01	; 1
    18f0:	91 05       	cpc	r25, r1
    18f2:	11 f4       	brne	.+4      	; 0x18f8 <MotorControl+0x78>
			PrintErrorCode();
    18f4:	4a df       	rcall	.-364    	; 0x178a <PrintErrorCode>
    18f6:	01 c0       	rjmp	.+2      	; 0x18fa <MotorControl+0x7a>
		else
			PrintCommStatus(CommStatus);
    18f8:	8f df       	rcall	.-226    	; 0x1818 <PrintCommStatus>
	}
}
    18fa:	df 91       	pop	r29
    18fc:	cf 91       	pop	r28
    18fe:	1f 91       	pop	r17
    1900:	0f 91       	pop	r16
    1902:	08 95       	ret

00001904 <ServoControl>:
//	printf( "%d:%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d: %d:\n",
//	EVT_ACTION, speed[0],speed[1],speed[2],speed[3],speed[4],
//	speed[5],speed[6],speed[7],speed[8],speed[9],speed[10],speed[11], movingTime );
}

void ServoControl( int act ){
    1904:	2f 92       	push	r2
    1906:	3f 92       	push	r3
    1908:	4f 92       	push	r4
    190a:	5f 92       	push	r5
    190c:	6f 92       	push	r6
    190e:	7f 92       	push	r7
    1910:	8f 92       	push	r8
    1912:	9f 92       	push	r9
    1914:	af 92       	push	r10
    1916:	bf 92       	push	r11
    1918:	cf 92       	push	r12
    191a:	df 92       	push	r13
    191c:	ef 92       	push	r14
    191e:	ff 92       	push	r15
    1920:	0f 93       	push	r16
    1922:	1f 93       	push	r17
    1924:	cf 93       	push	r28
    1926:	df 93       	push	r29
    1928:	cd b7       	in	r28, 0x3d	; 61
    192a:	de b7       	in	r29, 0x3e	; 62
    192c:	c8 54       	subi	r28, 0x48	; 72
    192e:	d1 09       	sbc	r29, r1
    1930:	0f b6       	in	r0, 0x3f	; 63
    1932:	f8 94       	cli
    1934:	de bf       	out	0x3e, r29	; 62
    1936:	0f be       	out	0x3f, r0	; 63
    1938:	cd bf       	out	0x3d, r28	; 61
    193a:	25 96       	adiw	r28, 0x05	; 5
    193c:	9f af       	std	Y+63, r25	; 0x3f
    193e:	8e af       	std	Y+62, r24	; 0x3e
    1940:	25 97       	sbiw	r28, 0x05	; 5
	int i;
	int CommStatus = 0;
	if( act >= ACT_MAX ){
    1942:	84 36       	cpi	r24, 0x64	; 100
    1944:	91 05       	cpc	r25, r1
    1946:	0c f0       	brlt	.+2      	; 0x194a <ServoControl+0x46>
    1948:	82 c1       	rjmp	.+772    	; 0x1c4e <ServoControl+0x34a>
	}
	
	//GetAngle
	int angle = 0;
	int diffMax = 0;
	int angleDiff[SERVO_MAX] = {0};
    194a:	fe 01       	movw	r30, r28
    194c:	31 96       	adiw	r30, 0x01	; 1
    194e:	8e e1       	ldi	r24, 0x1E	; 30
    1950:	df 01       	movw	r26, r30
    1952:	1d 92       	st	X+, r1
    1954:	8a 95       	dec	r24
    1956:	e9 f7       	brne	.-6      	; 0x1952 <ServoControl+0x4e>
    1958:	25 96       	adiw	r28, 0x05	; 5
    195a:	8e ad       	ldd	r24, Y+62	; 0x3e
    195c:	9f ad       	ldd	r25, Y+63	; 0x3f
    195e:	25 97       	sbiw	r28, 0x05	; 5
    1960:	88 0f       	add	r24, r24
    1962:	99 1f       	adc	r25, r25
    1964:	82 95       	swap	r24
    1966:	92 95       	swap	r25
    1968:	90 7f       	andi	r25, 0xF0	; 240
    196a:	98 27       	eor	r25, r24
    196c:	80 7f       	andi	r24, 0xF0	; 240
    196e:	98 27       	eor	r25, r24
    1970:	9c 01       	movw	r18, r24
    1972:	2a 5d       	subi	r18, 0xDA	; 218
    1974:	3c 4f       	sbci	r19, 0xFC	; 252
    1976:	27 96       	adiw	r28, 0x07	; 7
    1978:	3f af       	std	Y+63, r19	; 0x3f
    197a:	2e af       	std	Y+62, r18	; 0x3e
    197c:	27 97       	sbiw	r28, 0x07	; 7
    197e:	6e 2e       	mov	r6, r30
    1980:	7f 2e       	mov	r7, r31
    1982:	0f 2e       	mov	r0, r31
    1984:	f4 ec       	ldi	r31, 0xC4	; 196
    1986:	8f 2e       	mov	r8, r31
    1988:	ff e0       	ldi	r31, 0x0F	; 15
    198a:	9f 2e       	mov	r9, r31
    198c:	f0 2d       	mov	r31, r0
    198e:	7f 01       	movw	r14, r30
    1990:	59 01       	movw	r10, r18
    1992:	06 ea       	ldi	r16, 0xA6	; 166
    1994:	1f e0       	ldi	r17, 0x0F	; 15
		return;
	}
	
	//GetAngle
	int angle = 0;
	int diffMax = 0;
    1996:	c1 2c       	mov	r12, r1
    1998:	d1 2c       	mov	r13, r1
	int angleDiff[SERVO_MAX] = {0};
	for(int i=0; i<SERVO_MAX; i++ ){
//		if( motionFirst < 0 ){
			angle = dxl_read_word( servoId[i], P_PRESENT_POSITION_L );
    199a:	64 e2       	ldi	r22, 0x24	; 36
    199c:	70 e0       	ldi	r23, 0x00	; 0
    199e:	d8 01       	movw	r26, r16
    19a0:	8d 91       	ld	r24, X+
    19a2:	9d 91       	ld	r25, X+
    19a4:	8d 01       	movw	r16, r26
    19a6:	0e 94 1c 02 	call	0x438	; 0x438 <dxl_read_word>
//		}else{
//			angle = angleList[motionFirst][i];
//		}
		angleDiff[i] = angleList[act][i] - angle;
    19aa:	f5 01       	movw	r30, r10
    19ac:	21 91       	ld	r18, Z+
    19ae:	31 91       	ld	r19, Z+
    19b0:	5f 01       	movw	r10, r30
    19b2:	a9 01       	movw	r20, r18
    19b4:	48 1b       	sub	r20, r24
    19b6:	59 0b       	sbc	r21, r25
    19b8:	ca 01       	movw	r24, r20
		if( angleDiff[i] < 0 ){
    19ba:	99 23       	and	r25, r25
    19bc:	24 f0       	brlt	.+8      	; 0x19c6 <ServoControl+0xc2>
//		if( motionFirst < 0 ){
			angle = dxl_read_word( servoId[i], P_PRESENT_POSITION_L );
//		}else{
//			angle = angleList[motionFirst][i];
//		}
		angleDiff[i] = angleList[act][i] - angle;
    19be:	d7 01       	movw	r26, r14
    19c0:	4d 93       	st	X+, r20
    19c2:	5c 93       	st	X, r21
    19c4:	06 c0       	rjmp	.+12     	; 0x19d2 <ServoControl+0xce>
		if( angleDiff[i] < 0 ){
			angleDiff[i] = angleDiff[i] * -1;
    19c6:	91 95       	neg	r25
    19c8:	81 95       	neg	r24
    19ca:	91 09       	sbc	r25, r1
    19cc:	f7 01       	movw	r30, r14
    19ce:	91 83       	std	Z+1, r25	; 0x01
    19d0:	80 83       	st	Z, r24
		}
		if( diffMax < angleDiff[i] ){
    19d2:	d7 01       	movw	r26, r14
    19d4:	8d 91       	ld	r24, X+
    19d6:	9d 91       	ld	r25, X+
    19d8:	7d 01       	movw	r14, r26
    19da:	c8 16       	cp	r12, r24
    19dc:	d9 06       	cpc	r13, r25
    19de:	0c f4       	brge	.+2      	; 0x19e2 <ServoControl+0xde>
    19e0:	6c 01       	movw	r12, r24
	
	//GetAngle
	int angle = 0;
	int diffMax = 0;
	int angleDiff[SERVO_MAX] = {0};
	for(int i=0; i<SERVO_MAX; i++ ){
    19e2:	08 15       	cp	r16, r8
    19e4:	19 05       	cpc	r17, r9
    19e6:	c9 f6       	brne	.-78     	; 0x199a <ServoControl+0x96>
			diffMax = angleDiff[i];
		}
	}
//	motionFirst = act;
	
	int speed[SERVO_MAX] = {100};
    19e8:	1e 01       	movw	r2, r28
    19ea:	bf e1       	ldi	r27, 0x1F	; 31
    19ec:	2b 0e       	add	r2, r27
    19ee:	31 1c       	adc	r3, r1
    19f0:	8e e1       	ldi	r24, 0x1E	; 30
    19f2:	f1 01       	movw	r30, r2
    19f4:	11 92       	st	Z+, r1
    19f6:	8a 95       	dec	r24
    19f8:	e9 f7       	brne	.-6      	; 0x19f4 <ServoControl+0xf0>
    19fa:	84 e6       	ldi	r24, 0x64	; 100
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	98 a3       	std	Y+32, r25	; 0x20
    1a00:	8f 8f       	std	Y+31, r24	; 0x1f
	for(int i=0; i<SERVO_MAX; i++ ){
		speed[i] = (int)((float)(angleList[act][SERVO_MAX]) * ((float)angleDiff[i] / diffMax));
    1a02:	25 96       	adiw	r28, 0x05	; 5
    1a04:	ee ad       	ldd	r30, Y+62	; 0x3e
    1a06:	ff ad       	ldd	r31, Y+63	; 0x3f
    1a08:	25 97       	sbiw	r28, 0x05	; 5
    1a0a:	ee 0f       	add	r30, r30
    1a0c:	ff 1f       	adc	r31, r31
    1a0e:	e2 95       	swap	r30
    1a10:	f2 95       	swap	r31
    1a12:	f0 7f       	andi	r31, 0xF0	; 240
    1a14:	fe 27       	eor	r31, r30
    1a16:	e0 7f       	andi	r30, 0xF0	; 240
    1a18:	fe 27       	eor	r31, r30
    1a1a:	ea 5d       	subi	r30, 0xDA	; 218
    1a1c:	fc 4f       	sbci	r31, 0xFC	; 252
    1a1e:	66 8d       	ldd	r22, Z+30	; 0x1e
    1a20:	77 8d       	ldd	r23, Z+31	; 0x1f
    1a22:	88 27       	eor	r24, r24
    1a24:	77 fd       	sbrc	r23, 7
    1a26:	80 95       	com	r24
    1a28:	98 2f       	mov	r25, r24
    1a2a:	00 d5       	rcall	.+2560   	; 0x242c <__floatsisf>
    1a2c:	23 96       	adiw	r28, 0x03	; 3
    1a2e:	6c af       	std	Y+60, r22	; 0x3c
    1a30:	7d af       	std	Y+61, r23	; 0x3d
    1a32:	8e af       	std	Y+62, r24	; 0x3e
    1a34:	9f af       	std	Y+63, r25	; 0x3f
    1a36:	23 97       	sbiw	r28, 0x03	; 3
    1a38:	28 96       	adiw	r28, 0x08	; 8
    1a3a:	2f ae       	std	Y+63, r2	; 0x3f
    1a3c:	28 97       	sbiw	r28, 0x08	; 8
    1a3e:	29 96       	adiw	r28, 0x09	; 9
    1a40:	3f ae       	std	Y+63, r3	; 0x3f
    1a42:	29 97       	sbiw	r28, 0x09	; 9
    1a44:	3e ae       	std	Y+62, r3	; 0x3e
    1a46:	2d ae       	std	Y+61, r2	; 0x3d
    1a48:	a6 2c       	mov	r10, r6
    1a4a:	b7 2c       	mov	r11, r7
    1a4c:	ee 24       	eor	r14, r14
    1a4e:	d7 fc       	sbrc	r13, 7
    1a50:	e0 94       	com	r14
    1a52:	fe 2c       	mov	r15, r14
    1a54:	d5 01       	movw	r26, r10
    1a56:	0d 91       	ld	r16, X+
    1a58:	1d 91       	ld	r17, X+
    1a5a:	5d 01       	movw	r10, r26
    1a5c:	c7 01       	movw	r24, r14
    1a5e:	b6 01       	movw	r22, r12
    1a60:	e5 d4       	rcall	.+2506   	; 0x242c <__floatsisf>
    1a62:	2b 01       	movw	r4, r22
    1a64:	3c 01       	movw	r6, r24
    1a66:	b8 01       	movw	r22, r16
    1a68:	88 27       	eor	r24, r24
    1a6a:	77 fd       	sbrc	r23, 7
    1a6c:	80 95       	com	r24
    1a6e:	98 2f       	mov	r25, r24
    1a70:	dd d4       	rcall	.+2490   	; 0x242c <__floatsisf>
    1a72:	a3 01       	movw	r20, r6
    1a74:	92 01       	movw	r18, r4
    1a76:	3f d4       	rcall	.+2174   	; 0x22f6 <__divsf3>
    1a78:	9b 01       	movw	r18, r22
    1a7a:	ac 01       	movw	r20, r24
    1a7c:	23 96       	adiw	r28, 0x03	; 3
    1a7e:	6c ad       	ldd	r22, Y+60	; 0x3c
    1a80:	7d ad       	ldd	r23, Y+61	; 0x3d
    1a82:	8e ad       	ldd	r24, Y+62	; 0x3e
    1a84:	9f ad       	ldd	r25, Y+63	; 0x3f
    1a86:	23 97       	sbiw	r28, 0x03	; 3
    1a88:	5d d5       	rcall	.+2746   	; 0x2544 <__mulsf3>
    1a8a:	9d d4       	rcall	.+2362   	; 0x23c6 <__fixsfsi>
		if( speed[i] == 0 ){
    1a8c:	61 15       	cp	r22, r1
    1a8e:	71 05       	cpc	r23, r1
    1a90:	21 f0       	breq	.+8      	; 0x1a9a <ServoControl+0x196>
	}
//	motionFirst = act;
	
	int speed[SERVO_MAX] = {100};
	for(int i=0; i<SERVO_MAX; i++ ){
		speed[i] = (int)((float)(angleList[act][SERVO_MAX]) * ((float)angleDiff[i] / diffMax));
    1a92:	f1 01       	movw	r30, r2
    1a94:	71 83       	std	Z+1, r23	; 0x01
    1a96:	60 83       	st	Z, r22
    1a98:	05 c0       	rjmp	.+10     	; 0x1aa4 <ServoControl+0x1a0>
		if( speed[i] == 0 ){
			speed[i] = 1;
    1a9a:	e1 e0       	ldi	r30, 0x01	; 1
    1a9c:	f0 e0       	ldi	r31, 0x00	; 0
    1a9e:	d1 01       	movw	r26, r2
    1aa0:	ed 93       	st	X+, r30
    1aa2:	fc 93       	st	X, r31
    1aa4:	f2 e0       	ldi	r31, 0x02	; 2
    1aa6:	2f 0e       	add	r2, r31
    1aa8:	31 1c       	adc	r3, r1
		}
	}
//	motionFirst = act;
	
	int speed[SERVO_MAX] = {100};
	for(int i=0; i<SERVO_MAX; i++ ){
    1aaa:	2d ad       	ldd	r18, Y+61	; 0x3d
    1aac:	3e ad       	ldd	r19, Y+62	; 0x3e
    1aae:	a2 16       	cp	r10, r18
    1ab0:	b3 06       	cpc	r11, r19
    1ab2:	81 f6       	brne	.-96     	; 0x1a54 <ServoControl+0x150>
		}
	}

//    diffmaxTest[motionCount-1] = diffMax;
//	movingTime = ((float)CYCLE_TIME/VALUE_MAX) * ((float)VALUE_MAX / angleList[act][SERVO_MAX]) * diffMax;
    movingTime = diffMax * (float)(((VALUE_MAX*10)/angleList[act][SERVO_MAX])/2);
    1ab4:	25 96       	adiw	r28, 0x05	; 5
    1ab6:	ee ad       	ldd	r30, Y+62	; 0x3e
    1ab8:	ff ad       	ldd	r31, Y+63	; 0x3f
    1aba:	25 97       	sbiw	r28, 0x05	; 5
    1abc:	ee 0f       	add	r30, r30
    1abe:	ff 1f       	adc	r31, r31
    1ac0:	e2 95       	swap	r30
    1ac2:	f2 95       	swap	r31
    1ac4:	f0 7f       	andi	r31, 0xF0	; 240
    1ac6:	fe 27       	eor	r31, r30
    1ac8:	e0 7f       	andi	r30, 0xF0	; 240
    1aca:	fe 27       	eor	r31, r30
    1acc:	ea 5d       	subi	r30, 0xDA	; 218
    1ace:	fc 4f       	sbci	r31, 0xFC	; 252
    1ad0:	66 8d       	ldd	r22, Z+30	; 0x1e
    1ad2:	77 8d       	ldd	r23, Z+31	; 0x1f
    1ad4:	8b ef       	ldi	r24, 0xFB	; 251
    1ad6:	93 e1       	ldi	r25, 0x13	; 19
    1ad8:	c4 d5       	rcall	.+2952   	; 0x2662 <__divmodhi4>
    1ada:	88 27       	eor	r24, r24
    1adc:	77 fd       	sbrc	r23, 7
    1ade:	80 95       	com	r24
    1ae0:	98 2f       	mov	r25, r24
    1ae2:	a4 d4       	rcall	.+2376   	; 0x242c <__floatsisf>
    1ae4:	9b 01       	movw	r18, r22
    1ae6:	ac 01       	movw	r20, r24
    1ae8:	c3 01       	movw	r24, r6
    1aea:	b2 01       	movw	r22, r4
    1aec:	2b d5       	rcall	.+2646   	; 0x2544 <__mulsf3>
    1aee:	6b d4       	rcall	.+2262   	; 0x23c6 <__fixsfsi>
	if( movingTime < MAIN_DELAY ){
    1af0:	64 36       	cpi	r22, 0x64	; 100
    1af2:	71 05       	cpc	r23, r1
    1af4:	2c f0       	brlt	.+10     	; 0x1b00 <ServoControl+0x1fc>
		}
	}

//    diffmaxTest[motionCount-1] = diffMax;
//	movingTime = ((float)CYCLE_TIME/VALUE_MAX) * ((float)VALUE_MAX / angleList[act][SERVO_MAX]) * diffMax;
    movingTime = diffMax * (float)(((VALUE_MAX*10)/angleList[act][SERVO_MAX])/2);
    1af6:	70 93 89 16 	sts	0x1689, r23
    1afa:	60 93 88 16 	sts	0x1688, r22
    1afe:	06 c0       	rjmp	.+12     	; 0x1b0c <ServoControl+0x208>
	if( movingTime < MAIN_DELAY ){
		movingTime = MAIN_DELAY;
    1b00:	84 e6       	ldi	r24, 0x64	; 100
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	90 93 89 16 	sts	0x1689, r25
    1b08:	80 93 88 16 	sts	0x1688, r24
	}
	
	//Speed
	dxl_set_txpacket_id(BROADCAST_ID);
    1b0c:	8e ef       	ldi	r24, 0xFE	; 254
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	0e 94 94 00 	call	0x128	; 0x128 <dxl_set_txpacket_id>
	dxl_set_txpacket_instruction(INST_SYNC_WRITE);
    1b14:	83 e8       	ldi	r24, 0x83	; 131
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	0e 94 97 00 	call	0x12e	; 0x12e <dxl_set_txpacket_instruction>
	dxl_set_txpacket_parameter(0, P_GOAL_SPEED_L);
    1b1c:	60 e2       	ldi	r22, 0x20	; 32
    1b1e:	70 e0       	ldi	r23, 0x00	; 0
    1b20:	80 e0       	ldi	r24, 0x00	; 0
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	0e 94 9a 00 	call	0x134	; 0x134 <dxl_set_txpacket_parameter>
	dxl_set_txpacket_parameter(1, 2);
    1b28:	62 e0       	ldi	r22, 0x02	; 2
    1b2a:	70 e0       	ldi	r23, 0x00	; 0
    1b2c:	81 e0       	ldi	r24, 0x01	; 1
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	0e 94 9a 00 	call	0x134	; 0x134 <dxl_set_txpacket_parameter>
    1b34:	28 96       	adiw	r28, 0x08	; 8
    1b36:	cf ac       	ldd	r12, Y+63	; 0x3f
    1b38:	28 97       	sbiw	r28, 0x08	; 8
    1b3a:	29 96       	adiw	r28, 0x09	; 9
    1b3c:	df ac       	ldd	r13, Y+63	; 0x3f
    1b3e:	29 97       	sbiw	r28, 0x09	; 9
    1b40:	0f 2e       	mov	r0, r31
    1b42:	f6 ea       	ldi	r31, 0xA6	; 166
    1b44:	ef 2e       	mov	r14, r31
    1b46:	ff e0       	ldi	r31, 0x0F	; 15
    1b48:	ff 2e       	mov	r15, r31
    1b4a:	f0 2d       	mov	r31, r0
    1b4c:	02 e0       	ldi	r16, 0x02	; 2
    1b4e:	10 e0       	ldi	r17, 0x00	; 0
	for( i=0; i<SERVO_MAX; i++ ){
		dxl_set_txpacket_parameter(2+(3*i), servoId[i]);
    1b50:	d7 01       	movw	r26, r14
    1b52:	6d 91       	ld	r22, X+
    1b54:	7d 91       	ld	r23, X+
    1b56:	7d 01       	movw	r14, r26
    1b58:	c8 01       	movw	r24, r16
    1b5a:	0e 94 9a 00 	call	0x134	; 0x134 <dxl_set_txpacket_parameter>
		dxl_set_txpacket_parameter(3+(3*i), dxl_get_lowbyte(speed[i]));
    1b5e:	f6 01       	movw	r30, r12
    1b60:	a1 90       	ld	r10, Z+
    1b62:	b1 90       	ld	r11, Z+
    1b64:	6f 01       	movw	r12, r30
    1b66:	c5 01       	movw	r24, r10
    1b68:	0e 94 bc 00 	call	0x178	; 0x178 <dxl_get_lowbyte>
    1b6c:	bc 01       	movw	r22, r24
    1b6e:	c8 01       	movw	r24, r16
    1b70:	01 96       	adiw	r24, 0x01	; 1
    1b72:	0e 94 9a 00 	call	0x134	; 0x134 <dxl_set_txpacket_parameter>
		dxl_set_txpacket_parameter(4+(3*i), dxl_get_highbyte(speed[i]));
    1b76:	c5 01       	movw	r24, r10
    1b78:	0e 94 c0 00 	call	0x180	; 0x180 <dxl_get_highbyte>
    1b7c:	bc 01       	movw	r22, r24
    1b7e:	c8 01       	movw	r24, r16
    1b80:	02 96       	adiw	r24, 0x02	; 2
    1b82:	0e 94 9a 00 	call	0x134	; 0x134 <dxl_set_txpacket_parameter>
    1b86:	0d 5f       	subi	r16, 0xFD	; 253
    1b88:	1f 4f       	sbci	r17, 0xFF	; 255
	//Speed
	dxl_set_txpacket_id(BROADCAST_ID);
	dxl_set_txpacket_instruction(INST_SYNC_WRITE);
	dxl_set_txpacket_parameter(0, P_GOAL_SPEED_L);
	dxl_set_txpacket_parameter(1, 2);
	for( i=0; i<SERVO_MAX; i++ ){
    1b8a:	e8 14       	cp	r14, r8
    1b8c:	f9 04       	cpc	r15, r9
    1b8e:	01 f7       	brne	.-64     	; 0x1b50 <ServoControl+0x24c>
		dxl_set_txpacket_parameter(2+(3*i), servoId[i]);
		dxl_set_txpacket_parameter(3+(3*i), dxl_get_lowbyte(speed[i]));
		dxl_set_txpacket_parameter(4+(3*i), dxl_get_highbyte(speed[i]));
	}
	dxl_set_txpacket_length(4+3*SERVO_MAX);
    1b90:	81 e3       	ldi	r24, 0x31	; 49
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	0e 94 9f 00 	call	0x13e	; 0x13e <dxl_set_txpacket_length>
	dxl_txrx_packet();
    1b98:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <dxl_txrx_packet>
	CommStatus = dxl_get_result();
    1b9c:	0e 94 8f 00 	call	0x11e	; 0x11e <dxl_get_result>
	if( CommStatus == COMM_RXSUCCESS ){
    1ba0:	81 30       	cpi	r24, 0x01	; 1
    1ba2:	91 05       	cpc	r25, r1
    1ba4:	09 f0       	breq	.+2      	; 0x1ba8 <ServoControl+0x2a4>
    1ba6:	52 c0       	rjmp	.+164    	; 0x1c4c <ServoControl+0x348>
		PrintErrorCode();
    1ba8:	f0 dd       	rcall	.-1056   	; 0x178a <PrintErrorCode>
		
		//Angle
		dxl_set_txpacket_id(BROADCAST_ID);
    1baa:	8e ef       	ldi	r24, 0xFE	; 254
    1bac:	90 e0       	ldi	r25, 0x00	; 0
    1bae:	0e 94 94 00 	call	0x128	; 0x128 <dxl_set_txpacket_id>
		dxl_set_txpacket_instruction(INST_SYNC_WRITE);
    1bb2:	83 e8       	ldi	r24, 0x83	; 131
    1bb4:	90 e0       	ldi	r25, 0x00	; 0
    1bb6:	0e 94 97 00 	call	0x12e	; 0x12e <dxl_set_txpacket_instruction>
		dxl_set_txpacket_parameter(0, P_GOAL_POSITION_L);
    1bba:	6e e1       	ldi	r22, 0x1E	; 30
    1bbc:	70 e0       	ldi	r23, 0x00	; 0
    1bbe:	80 e0       	ldi	r24, 0x00	; 0
    1bc0:	90 e0       	ldi	r25, 0x00	; 0
    1bc2:	0e 94 9a 00 	call	0x134	; 0x134 <dxl_set_txpacket_parameter>
		dxl_set_txpacket_parameter(1, 2);
    1bc6:	62 e0       	ldi	r22, 0x02	; 2
    1bc8:	70 e0       	ldi	r23, 0x00	; 0
    1bca:	81 e0       	ldi	r24, 0x01	; 1
    1bcc:	90 e0       	ldi	r25, 0x00	; 0
    1bce:	0e 94 9a 00 	call	0x134	; 0x134 <dxl_set_txpacket_parameter>
    1bd2:	27 96       	adiw	r28, 0x07	; 7
    1bd4:	ce ac       	ldd	r12, Y+62	; 0x3e
    1bd6:	df ac       	ldd	r13, Y+63	; 0x3f
    1bd8:	27 97       	sbiw	r28, 0x07	; 7
    1bda:	0f 2e       	mov	r0, r31
    1bdc:	f6 ea       	ldi	r31, 0xA6	; 166
    1bde:	ef 2e       	mov	r14, r31
    1be0:	ff e0       	ldi	r31, 0x0F	; 15
    1be2:	ff 2e       	mov	r15, r31
    1be4:	f0 2d       	mov	r31, r0
    1be6:	02 e0       	ldi	r16, 0x02	; 2
    1be8:	10 e0       	ldi	r17, 0x00	; 0
		for( i=0; i<SERVO_MAX; i++ ){
			dxl_set_txpacket_parameter(2+(3*i), servoId[i]);
    1bea:	d7 01       	movw	r26, r14
    1bec:	6d 91       	ld	r22, X+
    1bee:	7d 91       	ld	r23, X+
    1bf0:	7d 01       	movw	r14, r26
    1bf2:	c8 01       	movw	r24, r16
    1bf4:	0e 94 9a 00 	call	0x134	; 0x134 <dxl_set_txpacket_parameter>
    1bf8:	56 01       	movw	r10, r12
			dxl_set_txpacket_parameter(3+(3*i), dxl_get_lowbyte(angleList[act][i]));
    1bfa:	f6 01       	movw	r30, r12
    1bfc:	81 91       	ld	r24, Z+
    1bfe:	91 91       	ld	r25, Z+
    1c00:	6f 01       	movw	r12, r30
    1c02:	0e 94 bc 00 	call	0x178	; 0x178 <dxl_get_lowbyte>
    1c06:	bc 01       	movw	r22, r24
    1c08:	c8 01       	movw	r24, r16
    1c0a:	01 96       	adiw	r24, 0x01	; 1
    1c0c:	0e 94 9a 00 	call	0x134	; 0x134 <dxl_set_txpacket_parameter>
			dxl_set_txpacket_parameter(4+(3*i), dxl_get_highbyte(angleList[act][i]));
    1c10:	d5 01       	movw	r26, r10
    1c12:	8d 91       	ld	r24, X+
    1c14:	9c 91       	ld	r25, X
    1c16:	0e 94 c0 00 	call	0x180	; 0x180 <dxl_get_highbyte>
    1c1a:	bc 01       	movw	r22, r24
    1c1c:	c8 01       	movw	r24, r16
    1c1e:	02 96       	adiw	r24, 0x02	; 2
    1c20:	0e 94 9a 00 	call	0x134	; 0x134 <dxl_set_txpacket_parameter>
    1c24:	0d 5f       	subi	r16, 0xFD	; 253
    1c26:	1f 4f       	sbci	r17, 0xFF	; 255
		//Angle
		dxl_set_txpacket_id(BROADCAST_ID);
		dxl_set_txpacket_instruction(INST_SYNC_WRITE);
		dxl_set_txpacket_parameter(0, P_GOAL_POSITION_L);
		dxl_set_txpacket_parameter(1, 2);
		for( i=0; i<SERVO_MAX; i++ ){
    1c28:	e8 14       	cp	r14, r8
    1c2a:	f9 04       	cpc	r15, r9
    1c2c:	f1 f6       	brne	.-68     	; 0x1bea <ServoControl+0x2e6>
			dxl_set_txpacket_parameter(2+(3*i), servoId[i]);
			dxl_set_txpacket_parameter(3+(3*i), dxl_get_lowbyte(angleList[act][i]));
			dxl_set_txpacket_parameter(4+(3*i), dxl_get_highbyte(angleList[act][i]));
		}
		dxl_set_txpacket_length(4+3*SERVO_MAX);
    1c2e:	81 e3       	ldi	r24, 0x31	; 49
    1c30:	90 e0       	ldi	r25, 0x00	; 0
    1c32:	0e 94 9f 00 	call	0x13e	; 0x13e <dxl_set_txpacket_length>
		dxl_txrx_packet();
    1c36:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <dxl_txrx_packet>
		CommStatus = dxl_get_result();
    1c3a:	0e 94 8f 00 	call	0x11e	; 0x11e <dxl_get_result>
		if( CommStatus == COMM_RXSUCCESS ){
    1c3e:	81 30       	cpi	r24, 0x01	; 1
    1c40:	91 05       	cpc	r25, r1
    1c42:	11 f4       	brne	.+4      	; 0x1c48 <ServoControl+0x344>
			PrintErrorCode();
    1c44:	a2 dd       	rcall	.-1212   	; 0x178a <PrintErrorCode>
    1c46:	03 c0       	rjmp	.+6      	; 0x1c4e <ServoControl+0x34a>
		}else{
			PrintCommStatus(CommStatus);
    1c48:	e7 dd       	rcall	.-1074   	; 0x1818 <PrintCommStatus>
    1c4a:	01 c0       	rjmp	.+2      	; 0x1c4e <ServoControl+0x34a>
		}
	}else{
		PrintCommStatus(CommStatus);
    1c4c:	e5 dd       	rcall	.-1078   	; 0x1818 <PrintCommStatus>
	}
}
    1c4e:	c8 5b       	subi	r28, 0xB8	; 184
    1c50:	df 4f       	sbci	r29, 0xFF	; 255
    1c52:	0f b6       	in	r0, 0x3f	; 63
    1c54:	f8 94       	cli
    1c56:	de bf       	out	0x3e, r29	; 62
    1c58:	0f be       	out	0x3f, r0	; 63
    1c5a:	cd bf       	out	0x3d, r28	; 61
    1c5c:	df 91       	pop	r29
    1c5e:	cf 91       	pop	r28
    1c60:	1f 91       	pop	r17
    1c62:	0f 91       	pop	r16
    1c64:	ff 90       	pop	r15
    1c66:	ef 90       	pop	r14
    1c68:	df 90       	pop	r13
    1c6a:	cf 90       	pop	r12
    1c6c:	bf 90       	pop	r11
    1c6e:	af 90       	pop	r10
    1c70:	9f 90       	pop	r9
    1c72:	8f 90       	pop	r8
    1c74:	7f 90       	pop	r7
    1c76:	6f 90       	pop	r6
    1c78:	5f 90       	pop	r5
    1c7a:	4f 90       	pop	r4
    1c7c:	3f 90       	pop	r3
    1c7e:	2f 90       	pop	r2
    1c80:	08 95       	ret

00001c82 <setMode>:
void sendAck( int ack ){
	printf("%d\n\n", ack );
}

void setMode(void){
	if( ~PIND & SW_BUTTON ){
    1c82:	48 99       	sbic	0x09, 0	; 9
    1c84:	0e c0       	rjmp	.+28     	; 0x1ca2 <setMode+0x20>
//        printf( "PIND is OFF\n");
		if( SwitchSts == 0 ){
    1c86:	80 91 94 16 	lds	r24, 0x1694
    1c8a:	90 91 95 16 	lds	r25, 0x1695
    1c8e:	89 2b       	or	r24, r25
    1c90:	09 f0       	breq	.+2      	; 0x1c94 <setMode+0x12>
    1c92:	50 c0       	rjmp	.+160    	; 0x1d34 <setMode+0xb2>
			SwitchSts = 1;
    1c94:	81 e0       	ldi	r24, 0x01	; 1
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	90 93 95 16 	sts	0x1695, r25
    1c9c:	80 93 94 16 	sts	0x1694, r24
    1ca0:	08 95       	ret
		}
	}else{
//		printf( "PIND is ON\n");	
		if( SwitchSts == 1 ){
    1ca2:	80 91 94 16 	lds	r24, 0x1694
    1ca6:	90 91 95 16 	lds	r25, 0x1695
    1caa:	01 97       	sbiw	r24, 0x01	; 1
    1cac:	09 f0       	breq	.+2      	; 0x1cb0 <setMode+0x2e>
    1cae:	42 c0       	rjmp	.+132    	; 0x1d34 <setMode+0xb2>
			SwitchSts = 0;
    1cb0:	10 92 95 16 	sts	0x1695, r1
    1cb4:	10 92 94 16 	sts	0x1694, r1
			mMode++;
    1cb8:	80 91 96 16 	lds	r24, 0x1696
    1cbc:	90 91 97 16 	lds	r25, 0x1697
    1cc0:	9c 01       	movw	r18, r24
    1cc2:	2f 5f       	subi	r18, 0xFF	; 255
    1cc4:	3f 4f       	sbci	r19, 0xFF	; 255
    1cc6:	30 93 97 16 	sts	0x1697, r19
    1cca:	20 93 96 16 	sts	0x1696, r18
			if( (LED_MAX - mMode) <= 0 ){
    1cce:	26 e0       	ldi	r18, 0x06	; 6
    1cd0:	30 e0       	ldi	r19, 0x00	; 0
    1cd2:	a9 01       	movw	r20, r18
    1cd4:	48 1b       	sub	r20, r24
    1cd6:	59 0b       	sbc	r21, r25
    1cd8:	ca 01       	movw	r24, r20
    1cda:	18 16       	cp	r1, r24
    1cdc:	19 06       	cpc	r1, r25
    1cde:	3c f0       	brlt	.+14     	; 0x1cee <setMode+0x6c>
				PORTC = LED_BAT|LED_TxD|LED_RxD|LED_AUX|LED_MANAGE|LED_PROGRAM;
    1ce0:	8f e3       	ldi	r24, 0x3F	; 63
    1ce2:	88 b9       	out	0x08, r24	; 8
				mMode = MODE_0;
    1ce4:	10 92 97 16 	sts	0x1697, r1
    1ce8:	10 92 96 16 	sts	0x1696, r1
    1cec:	0b c0       	rjmp	.+22     	; 0x1d04 <setMode+0x82>
			}else{
				PORTC = ~(1 << (LED_MAX - mMode));
    1cee:	21 e0       	ldi	r18, 0x01	; 1
    1cf0:	30 e0       	ldi	r19, 0x00	; 0
    1cf2:	a9 01       	movw	r20, r18
    1cf4:	02 c0       	rjmp	.+4      	; 0x1cfa <setMode+0x78>
    1cf6:	44 0f       	add	r20, r20
    1cf8:	55 1f       	adc	r21, r21
    1cfa:	8a 95       	dec	r24
    1cfc:	e2 f7       	brpl	.-8      	; 0x1cf6 <setMode+0x74>
    1cfe:	ca 01       	movw	r24, r20
    1d00:	80 95       	com	r24
    1d02:	88 b9       	out	0x08, r24	; 8
			}
			stopMotion();
    1d04:	1f db       	rcall	.-2498   	; 0x1344 <stopMotion>
			ServoControl( 0 );
    1d06:	80 e0       	ldi	r24, 0x00	; 0
    1d08:	90 e0       	ldi	r25, 0x00	; 0
    1d0a:	fc dd       	rcall	.-1032   	; 0x1904 <ServoControl>

			modeCounter = 1;
    1d0c:	81 e0       	ldi	r24, 0x01	; 1
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	90 93 91 16 	sts	0x1691, r25
    1d14:	80 93 90 16 	sts	0x1690, r24
			if( mMode == MODE_1 ){
    1d18:	80 91 96 16 	lds	r24, 0x1696
    1d1c:	90 91 97 16 	lds	r25, 0x1697
    1d20:	01 97       	sbiw	r24, 0x01	; 1
    1d22:	41 f4       	brne	.+16     	; 0x1d34 <setMode+0xb2>
				modeWait = mode1act[0][0];
    1d24:	80 91 68 02 	lds	r24, 0x0268
    1d28:	90 91 69 02 	lds	r25, 0x0269
    1d2c:	90 93 93 16 	sts	0x1693, r25
    1d30:	80 93 92 16 	sts	0x1692, r24
    1d34:	08 95       	ret

00001d36 <move>:
	motionTimes = 0;
	motionTime = 0;
	motionFirst = -1;
}

void move(void){
    1d36:	0f 93       	push	r16
    1d38:	1f 93       	push	r17
    1d3a:	cf 93       	push	r28
    1d3c:	df 93       	push	r29
	int log = 0;
	if( motionTimes > 0 && isMoving() == 0 ){
    1d3e:	80 91 8c 16 	lds	r24, 0x168C
    1d42:	90 91 8d 16 	lds	r25, 0x168D
    1d46:	18 16       	cp	r1, r24
    1d48:	19 06       	cpc	r1, r25
    1d4a:	0c f0       	brlt	.+2      	; 0x1d4e <move+0x18>
    1d4c:	80 c0       	rjmp	.+256    	; 0x1e4e <move+0x118>
    1d4e:	d8 d8       	rcall	.-3664   	; 0xf00 <isMoving>
    1d50:	89 2b       	or	r24, r25
    1d52:	09 f0       	breq	.+2      	; 0x1d56 <move+0x20>
    1d54:	7c c0       	rjmp	.+248    	; 0x1e4e <move+0x118>
		if (motionNumber >= ACT_TYPE_MAX) {
    1d56:	80 91 8e 16 	lds	r24, 0x168E
    1d5a:	90 91 8f 16 	lds	r25, 0x168F
    1d5e:	8d 30       	cpi	r24, 0x0D	; 13
    1d60:	91 05       	cpc	r25, r1
    1d62:	5c f0       	brlt	.+22     	; 0x1d7a <move+0x44>
			printf("move Oops! motionNumber:%d\n", motionNumber);
    1d64:	9f 93       	push	r25
    1d66:	8f 93       	push	r24
    1d68:	8d e2       	ldi	r24, 0x2D	; 45
    1d6a:	93 e1       	ldi	r25, 0x13	; 19
    1d6c:	9f 93       	push	r25
    1d6e:	8f 93       	push	r24
    1d70:	7c d5       	rcall	.+2808   	; 0x286a <printf>
    1d72:	0f 90       	pop	r0
    1d74:	0f 90       	pop	r0
    1d76:	0f 90       	pop	r0
    1d78:	0f 90       	pop	r0
//			motionNumber = ACT_WALK2;
		}
		int *motion = motionList[motionNumber];
    1d7a:	80 91 8e 16 	lds	r24, 0x168E
    1d7e:	90 91 8f 16 	lds	r25, 0x168F
    1d82:	fc 01       	movw	r30, r24
    1d84:	ee 0f       	add	r30, r30
    1d86:	ff 1f       	adc	r31, r31
    1d88:	e0 59       	subi	r30, 0x90	; 144
    1d8a:	fd 4f       	sbci	r31, 0xFD	; 253
    1d8c:	c0 81       	ld	r28, Z
    1d8e:	d1 81       	ldd	r29, Z+1	; 0x01
//        if (log == 1) printf("move motionNumber:%d, motion = %d\n", motionNumber, *motion);
		int max = motion[0];

//        if (log == 1) printf("move motionCount:%d, max:%d\n", motionCount, max);
		if( motionCount > max ){
    1d90:	48 81       	ld	r20, Y
    1d92:	59 81       	ldd	r21, Y+1	; 0x01
    1d94:	20 91 0e 02 	lds	r18, 0x020E
    1d98:	30 91 0f 02 	lds	r19, 0x020F
    1d9c:	42 17       	cp	r20, r18
    1d9e:	53 07       	cpc	r21, r19
    1da0:	bc f4       	brge	.+46     	; 0x1dd0 <move+0x9a>
		    }
			*/
			
//        printf("### motionCount > max. motionCount:%d, max:%d\n", motionCount, max);
//			printf("#%d,%d,%d,%d,%d,%d;\n", diffmaxTest[0],diffmaxTest[1],diffmaxTest[2],diffmaxTest[3],diffmaxTest[4],diffmaxTest[5] );
			motionCount = 1;
    1da2:	21 e0       	ldi	r18, 0x01	; 1
    1da4:	30 e0       	ldi	r19, 0x00	; 0
    1da6:	30 93 0f 02 	sts	0x020F, r19
    1daa:	20 93 0e 02 	sts	0x020E, r18
			if( motionTimes < 99 && --motionTimes <= 0 ){
    1dae:	20 91 8c 16 	lds	r18, 0x168C
    1db2:	30 91 8d 16 	lds	r19, 0x168D
    1db6:	23 36       	cpi	r18, 0x63	; 99
    1db8:	31 05       	cpc	r19, r1
    1dba:	54 f4       	brge	.+20     	; 0x1dd0 <move+0x9a>
    1dbc:	21 50       	subi	r18, 0x01	; 1
    1dbe:	31 09       	sbc	r19, r1
    1dc0:	30 93 8d 16 	sts	0x168D, r19
    1dc4:	20 93 8c 16 	sts	0x168C, r18
    1dc8:	12 16       	cp	r1, r18
    1dca:	13 06       	cpc	r1, r19
    1dcc:	0c f0       	brlt	.+2      	; 0x1dd0 <move+0x9a>
    1dce:	3f c0       	rjmp	.+126    	; 0x1e4e <move+0x118>
			}
			
		}
		
		if (log == 1) printf("move 3 motionNumber:%d\n", motionNumber);
		if (motionNumber == ACT_NECK_SEARCH_SWING) {
    1dd0:	08 97       	sbiw	r24, 0x08	; 8
    1dd2:	49 f5       	brne	.+82     	; 0x1e26 <move+0xf0>
			searchSensors[motionCount] = sensorTest(0);
    1dd4:	00 91 0e 02 	lds	r16, 0x020E
    1dd8:	10 91 0f 02 	lds	r17, 0x020F
    1ddc:	80 e0       	ldi	r24, 0x00	; 0
    1dde:	90 e0       	ldi	r25, 0x00	; 0
    1de0:	0e 94 a0 06 	call	0xd40	; 0xd40 <sensorTest>
    1de4:	f8 01       	movw	r30, r16
    1de6:	ee 0f       	add	r30, r30
    1de8:	ff 1f       	adc	r31, r31
    1dea:	ee 59       	subi	r30, 0x9E	; 158
    1dec:	f9 4e       	sbci	r31, 0xE9	; 233
    1dee:	91 83       	std	Z+1, r25	; 0x01
    1df0:	80 83       	st	Z, r24
			printf("move 4 searchSensors[%d]:%d\n", motionCount, searchSensors[motionCount]);
    1df2:	80 91 0e 02 	lds	r24, 0x020E
    1df6:	90 91 0f 02 	lds	r25, 0x020F
    1dfa:	fc 01       	movw	r30, r24
    1dfc:	ee 0f       	add	r30, r30
    1dfe:	ff 1f       	adc	r31, r31
    1e00:	ee 59       	subi	r30, 0x9E	; 158
    1e02:	f9 4e       	sbci	r31, 0xE9	; 233
    1e04:	21 81       	ldd	r18, Z+1	; 0x01
    1e06:	2f 93       	push	r18
    1e08:	20 81       	ld	r18, Z
    1e0a:	2f 93       	push	r18
    1e0c:	9f 93       	push	r25
    1e0e:	8f 93       	push	r24
    1e10:	89 e4       	ldi	r24, 0x49	; 73
    1e12:	93 e1       	ldi	r25, 0x13	; 19
    1e14:	9f 93       	push	r25
    1e16:	8f 93       	push	r24
    1e18:	28 d5       	rcall	.+2640   	; 0x286a <printf>
    1e1a:	0f 90       	pop	r0
    1e1c:	0f 90       	pop	r0
    1e1e:	0f 90       	pop	r0
    1e20:	0f 90       	pop	r0
    1e22:	0f 90       	pop	r0
    1e24:	0f 90       	pop	r0
		}
//		printf("### motionCount:%d\n", motionCount);
		ServoControl( motion[motionCount] );
    1e26:	80 91 0e 02 	lds	r24, 0x020E
    1e2a:	90 91 0f 02 	lds	r25, 0x020F
    1e2e:	88 0f       	add	r24, r24
    1e30:	99 1f       	adc	r25, r25
    1e32:	c8 0f       	add	r28, r24
    1e34:	d9 1f       	adc	r29, r25
    1e36:	88 81       	ld	r24, Y
    1e38:	99 81       	ldd	r25, Y+1	; 0x01
    1e3a:	64 dd       	rcall	.-1336   	; 0x1904 <ServoControl>
		motionCount++;
    1e3c:	80 91 0e 02 	lds	r24, 0x020E
    1e40:	90 91 0f 02 	lds	r25, 0x020F
    1e44:	01 96       	adiw	r24, 0x01	; 1
    1e46:	90 93 0f 02 	sts	0x020F, r25
    1e4a:	80 93 0e 02 	sts	0x020E, r24
	}
}
    1e4e:	df 91       	pop	r29
    1e50:	cf 91       	pop	r28
    1e52:	1f 91       	pop	r17
    1e54:	0f 91       	pop	r16
    1e56:	08 95       	ret

00001e58 <moveTest>:
		}
	}
}


void moveTest(void){
    1e58:	cf 93       	push	r28
    1e5a:	df 93       	push	r29
	if(isMoving() == 0 ){
    1e5c:	51 d8       	rcall	.-3934   	; 0xf00 <isMoving>
    1e5e:	89 2b       	or	r24, r25
    1e60:	09 f0       	breq	.+2      	; 0x1e64 <moveTest+0xc>
    1e62:	60 c0       	rjmp	.+192    	; 0x1f24 <moveTest+0xcc>
		int *motion = motionList[motionNumber];
    1e64:	e0 91 8e 16 	lds	r30, 0x168E
    1e68:	f0 91 8f 16 	lds	r31, 0x168F
    1e6c:	ee 0f       	add	r30, r30
    1e6e:	ff 1f       	adc	r31, r31
    1e70:	e0 59       	subi	r30, 0x90	; 144
    1e72:	fd 4f       	sbci	r31, 0xFD	; 253
    1e74:	c0 81       	ld	r28, Z
    1e76:	d1 81       	ldd	r29, Z+1	; 0x01
		int max = motion[0];
		if( motionCount > max ){
    1e78:	28 81       	ld	r18, Y
    1e7a:	39 81       	ldd	r19, Y+1	; 0x01
    1e7c:	80 91 0e 02 	lds	r24, 0x020E
    1e80:	90 91 0f 02 	lds	r25, 0x020F
    1e84:	28 17       	cp	r18, r24
    1e86:	39 07       	cpc	r19, r25
    1e88:	cc f5       	brge	.+114    	; 0x1efc <moveTest+0xa4>
			walkCounter++;
    1e8a:	80 91 6c 16 	lds	r24, 0x166C
    1e8e:	90 91 6d 16 	lds	r25, 0x166D
    1e92:	01 96       	adiw	r24, 0x01	; 1
    1e94:	90 93 6d 16 	sts	0x166D, r25
    1e98:	80 93 6c 16 	sts	0x166C, r24
			if (walkCounter < 10) {
    1e9c:	8a 30       	cpi	r24, 0x0A	; 10
    1e9e:	91 05       	cpc	r25, r1
    1ea0:	54 f4       	brge	.+20     	; 0x1eb6 <moveTest+0x5e>
				printf("### moveTest 1\n");
    1ea2:	86 e6       	ldi	r24, 0x66	; 102
    1ea4:	93 e1       	ldi	r25, 0x13	; 19
    1ea6:	f2 d4       	rcall	.+2532   	; 0x288c <puts>
				motionNumber = ACT_TURN_LEFT;
    1ea8:	84 e0       	ldi	r24, 0x04	; 4
    1eaa:	90 e0       	ldi	r25, 0x00	; 0
    1eac:	90 93 8f 16 	sts	0x168F, r25
    1eb0:	80 93 8e 16 	sts	0x168E, r24
    1eb4:	1d c0       	rjmp	.+58     	; 0x1ef0 <moveTest+0x98>
			} else if (walkCounter < 20) {
    1eb6:	84 31       	cpi	r24, 0x14	; 20
    1eb8:	91 05       	cpc	r25, r1
    1eba:	54 f4       	brge	.+20     	; 0x1ed0 <moveTest+0x78>
				printf("### moveTest 2\n");
    1ebc:	85 e7       	ldi	r24, 0x75	; 117
    1ebe:	93 e1       	ldi	r25, 0x13	; 19
    1ec0:	e5 d4       	rcall	.+2506   	; 0x288c <puts>
				motionNumber = ACT_TURN_RIGHT;
    1ec2:	85 e0       	ldi	r24, 0x05	; 5
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	90 93 8f 16 	sts	0x168F, r25
    1eca:	80 93 8e 16 	sts	0x168E, r24
    1ece:	10 c0       	rjmp	.+32     	; 0x1ef0 <moveTest+0x98>
			} else if (walkCounter < 30) {
    1ed0:	4e 97       	sbiw	r24, 0x1e	; 30
    1ed2:	54 f4       	brge	.+20     	; 0x1ee8 <moveTest+0x90>
				printf("### moveTest 3\n");
    1ed4:	84 e8       	ldi	r24, 0x84	; 132
    1ed6:	93 e1       	ldi	r25, 0x13	; 19
    1ed8:	d9 d4       	rcall	.+2482   	; 0x288c <puts>
				motionNumber = ACT_WALK2;
    1eda:	83 e0       	ldi	r24, 0x03	; 3
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	90 93 8f 16 	sts	0x168F, r25
    1ee2:	80 93 8e 16 	sts	0x168E, r24
    1ee6:	04 c0       	rjmp	.+8      	; 0x1ef0 <moveTest+0x98>
			} else {
				walkCounter=0;
    1ee8:	10 92 6d 16 	sts	0x166D, r1
    1eec:	10 92 6c 16 	sts	0x166C, r1
			}
			motionCount = 1;
    1ef0:	81 e0       	ldi	r24, 0x01	; 1
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	90 93 0f 02 	sts	0x020F, r25
    1ef8:	80 93 0e 02 	sts	0x020E, r24
		}
		ServoControl( motion[motionCount] );
    1efc:	80 91 0e 02 	lds	r24, 0x020E
    1f00:	90 91 0f 02 	lds	r25, 0x020F
    1f04:	88 0f       	add	r24, r24
    1f06:	99 1f       	adc	r25, r25
    1f08:	c8 0f       	add	r28, r24
    1f0a:	d9 1f       	adc	r29, r25
    1f0c:	88 81       	ld	r24, Y
    1f0e:	99 81       	ldd	r25, Y+1	; 0x01
    1f10:	f9 dc       	rcall	.-1550   	; 0x1904 <ServoControl>
		motionCount++;
    1f12:	80 91 0e 02 	lds	r24, 0x020E
    1f16:	90 91 0f 02 	lds	r25, 0x020F
    1f1a:	01 96       	adiw	r24, 0x01	; 1
    1f1c:	90 93 0f 02 	sts	0x020F, r25
    1f20:	80 93 0e 02 	sts	0x020E, r24
	}
}
    1f24:	df 91       	pop	r29
    1f26:	cf 91       	pop	r28
    1f28:	08 95       	ret

00001f2a <main>:
	EVT_WATCH_DOG       = 10,
	EVT_MOTION_EDIT     = 11,
	EVT_MAX
	};

int main(void){
    1f2a:	2f 92       	push	r2
    1f2c:	3f 92       	push	r3
    1f2e:	4f 92       	push	r4
    1f30:	5f 92       	push	r5
    1f32:	6f 92       	push	r6
    1f34:	7f 92       	push	r7
    1f36:	8f 92       	push	r8
    1f38:	9f 92       	push	r9
    1f3a:	af 92       	push	r10
    1f3c:	bf 92       	push	r11
    1f3e:	cf 92       	push	r12
    1f40:	df 92       	push	r13
    1f42:	ef 92       	push	r14
    1f44:	ff 92       	push	r15
    1f46:	0f 93       	push	r16
    1f48:	1f 93       	push	r17
    1f4a:	cf 93       	push	r28
    1f4c:	df 93       	push	r29
	//Start Switch
//	DDRA  = 0x00;
//	PORTA = 0x12;
	
	//Start PORT A for switch and IR sensors
	DDRA  = 0xFC;
    1f4e:	8c ef       	ldi	r24, 0xFC	; 252
    1f50:	81 b9       	out	0x01, r24	; 1
	PORTA = 0xFE;
    1f52:	8e ef       	ldi	r24, 0xFE	; 254
    1f54:	82 b9       	out	0x02, r24	; 2
	
	//LED Initial
	DDRC  = 0x7F;
    1f56:	8f e7       	ldi	r24, 0x7F	; 127
    1f58:	87 b9       	out	0x07, r24	; 7
	PORTC = 0x7E;
    1f5a:	8e e7       	ldi	r24, 0x7E	; 126
    1f5c:	88 b9       	out	0x08, r24	; 8
	DDRD  = 0x70;
    1f5e:	80 e7       	ldi	r24, 0x70	; 112
    1f60:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x11;
    1f62:	81 e1       	ldi	r24, 0x11	; 17
    1f64:	8b b9       	out	0x0b, r24	; 11

	MotorInit();
    1f66:	0e 94 2f 07 	call	0xe5e	; 0xe5e <MotorInit>
	initSerial();
    1f6a:	0e 94 27 06 	call	0xc4e	; 0xc4e <initSerial>
	char * readData = NULL;	
	int isFinish = 0;

    sensorInit();
    1f6e:	0e 94 8f 06 	call	0xd1e	; 0xd1e <sensorInit>
	if (isCaptureMode ==1) dxl_write_byte( BROADCAST_ID, P_TORQUE_ENABLE, 0 );
    1f72:	80 91 7a 16 	lds	r24, 0x167A
    1f76:	90 91 7b 16 	lds	r25, 0x167B
    1f7a:	01 97       	sbiw	r24, 0x01	; 1
    1f7c:	41 f4       	brne	.+16     	; 0x1f8e <main+0x64>
    1f7e:	40 e0       	ldi	r20, 0x00	; 0
    1f80:	50 e0       	ldi	r21, 0x00	; 0
    1f82:	68 e1       	ldi	r22, 0x18	; 24
    1f84:	70 e0       	ldi	r23, 0x00	; 0
    1f86:	8e ef       	ldi	r24, 0xFE	; 254
    1f88:	90 e0       	ldi	r25, 0x00	; 0
    1f8a:	0e 94 3a 02 	call	0x474	; 0x474 <dxl_write_byte>
		if( checkSerialRead() > 0 ){
			readData = getReadBuffer();
			if( readData != NULL ){
//				printf( "readData=%s\n", &readData[0] );
				split( &readData[0] );
				switch( serCmd[0] ){
    1f8e:	0f 2e       	mov	r0, r31
    1f90:	f8 e9       	ldi	r31, 0x98	; 152
    1f92:	4f 2e       	mov	r4, r31
    1f94:	f6 e1       	ldi	r31, 0x16	; 22
    1f96:	5f 2e       	mov	r5, r31
    1f98:	f0 2d       	mov	r31, r0
				}
				if( isFinish > 0 ){
					MotorControl( 0, 0 );
					break;
				}
				memset( readData, 0x00, SERIAL_BUFFER_SIZE );
    1f9a:	0f 2e       	mov	r0, r31
    1f9c:	f0 e5       	ldi	r31, 0x50	; 80
    1f9e:	3f 2e       	mov	r3, r31
    1fa0:	f0 2d       	mov	r31, r0
			}
		}
		memset( &serCmd[0], 0x00, sizeof(int) * SERIAL_BUFFER_SIZE );
    1fa2:	0f 2e       	mov	r0, r31
    1fa4:	f0 ea       	ldi	r31, 0xA0	; 160
    1fa6:	2f 2e       	mov	r2, r31
    1fa8:	f0 2d       	mov	r31, r0
			}else{
				if (log == 1) printf( "main() 2\n");
				modeWait -= MAIN_DELAY;
			}
		}
		if (sensorValue[0] == 0 && sensorValueOld[0] != sensorValue[0]) {
    1faa:	0f 2e       	mov	r0, r31
    1fac:	f4 e7       	ldi	r31, 0x74	; 116
    1fae:	cf 2e       	mov	r12, r31
    1fb0:	f6 e1       	ldi	r31, 0x16	; 22
    1fb2:	df 2e       	mov	r13, r31
    1fb4:	f0 2d       	mov	r31, r0
		if (log == 1) printf( "### main() sensorValue[0] == 0\n");
            PORTC |= LED_PROGRAM; //edit
		}else if (sensorValueOld[0] != sensorValue[0]){
    1fb6:	0f 2e       	mov	r0, r31
    1fb8:	fe e6       	ldi	r31, 0x6E	; 110
    1fba:	af 2e       	mov	r10, r31
    1fbc:	f6 e1       	ldi	r31, 0x16	; 22
    1fbe:	bf 2e       	mov	r11, r31
    1fc0:	f0 2d       	mov	r31, r0
			if (log == 1) printf( "### main() sensorValue[0] == 1\n");
			PORTC &= ~LED_PROGRAM; //edit
		}
		
		if (sensorValue[1] == 0 && sensorValueOld[1] != sensorValue[1]) {
    1fc2:	0f 2e       	mov	r0, r31
    1fc4:	f6 e7       	ldi	r31, 0x76	; 118
    1fc6:	ef 2e       	mov	r14, r31
    1fc8:	f6 e1       	ldi	r31, 0x16	; 22
    1fca:	ff 2e       	mov	r15, r31
    1fcc:	f0 2d       	mov	r31, r0
			if (log == 1) printf( "### main() sensorValue[1] == 0\n");
            PORTC |= LED_MANAGE; //mon
		}else if (sensorValueOld[1] != sensorValue[1]){
    1fce:	0f 2e       	mov	r0, r31
    1fd0:	f0 e7       	ldi	r31, 0x70	; 112
    1fd2:	8f 2e       	mov	r8, r31
    1fd4:	f6 e1       	ldi	r31, 0x16	; 22
    1fd6:	9f 2e       	mov	r9, r31
    1fd8:	f0 2d       	mov	r31, r0
			if (log == 1) printf( "### main() sensorValue[1] == 1\n");
			PORTC &= ~LED_MANAGE; //mon
		}

		if (sensorValue[2] == 0 && sensorValueOld[2] != sensorValue[2]) {
    1fda:	08 e7       	ldi	r16, 0x78	; 120
    1fdc:	16 e1       	ldi	r17, 0x16	; 22
			if (log == 1) printf( "### main() sensorValue[2] == 0\n");
            PORTC |= LED_AUX; //AUX
		}else if (sensorValueOld[2] != sensorValue[2]){
    1fde:	0f 2e       	mov	r0, r31
    1fe0:	f2 e7       	ldi	r31, 0x72	; 114
    1fe2:	6f 2e       	mov	r6, r31
    1fe4:	f6 e1       	ldi	r31, 0x16	; 22
    1fe6:	7f 2e       	mov	r7, r31
    1fe8:	f0 2d       	mov	r31, r0
	int isFinish = 0;

    sensorInit();
	if (isCaptureMode ==1) dxl_write_byte( BROADCAST_ID, P_TORQUE_ENABLE, 0 );
	while(1){
        sensorTest(0);
    1fea:	80 e0       	ldi	r24, 0x00	; 0
    1fec:	90 e0       	ldi	r25, 0x00	; 0
    1fee:	0e 94 a0 06 	call	0xd40	; 0xd40 <sensorTest>
        sensorTest(1);
    1ff2:	81 e0       	ldi	r24, 0x01	; 1
    1ff4:	90 e0       	ldi	r25, 0x00	; 0
    1ff6:	0e 94 a0 06 	call	0xd40	; 0xd40 <sensorTest>
        sensorTest(2);
    1ffa:	82 e0       	ldi	r24, 0x02	; 2
    1ffc:	90 e0       	ldi	r25, 0x00	; 0
    1ffe:	0e 94 a0 06 	call	0xd40	; 0xd40 <sensorTest>

		setMode();
    2002:	3f de       	rcall	.-898    	; 0x1c82 <setMode>
		
		if( checkSerialRead() > 0 ){
    2004:	0e 94 2e 06 	call	0xc5c	; 0xc5c <checkSerialRead>
    2008:	18 16       	cp	r1, r24
    200a:	19 06       	cpc	r1, r25
    200c:	0c f0       	brlt	.+2      	; 0x2010 <main+0xe6>
    200e:	95 c0       	rjmp	.+298    	; 0x213a <main+0x210>
			readData = getReadBuffer();
    2010:	0e 94 7e 06 	call	0xcfc	; 0xcfc <getReadBuffer>
    2014:	ec 01       	movw	r28, r24
			if( readData != NULL ){
    2016:	00 97       	sbiw	r24, 0x00	; 0
    2018:	09 f4       	brne	.+2      	; 0x201c <main+0xf2>
    201a:	8f c0       	rjmp	.+286    	; 0x213a <main+0x210>
//				printf( "readData=%s\n", &readData[0] );
				split( &readData[0] );
    201c:	0e 94 53 07 	call	0xea6	; 0xea6 <split>
				switch( serCmd[0] ){
    2020:	f2 01       	movw	r30, r4
    2022:	80 81       	ld	r24, Z
    2024:	91 81       	ldd	r25, Z+1	; 0x01
    2026:	86 30       	cpi	r24, 0x06	; 6
    2028:	91 05       	cpc	r25, r1
    202a:	09 f4       	brne	.+2      	; 0x202e <main+0x104>
    202c:	6b c0       	rjmp	.+214    	; 0x2104 <main+0x1da>
    202e:	94 f4       	brge	.+36     	; 0x2054 <main+0x12a>
    2030:	82 30       	cpi	r24, 0x02	; 2
    2032:	91 05       	cpc	r25, r1
    2034:	09 f4       	brne	.+2      	; 0x2038 <main+0x10e>
    2036:	4d c0       	rjmp	.+154    	; 0x20d2 <main+0x1a8>
    2038:	34 f4       	brge	.+12     	; 0x2046 <main+0x11c>
    203a:	00 97       	sbiw	r24, 0x00	; 0
    203c:	01 f1       	breq	.+64     	; 0x207e <main+0x154>
    203e:	01 97       	sbiw	r24, 0x01	; 1
    2040:	09 f4       	brne	.+2      	; 0x2044 <main+0x11a>
    2042:	4a c0       	rjmp	.+148    	; 0x20d8 <main+0x1ae>
    2044:	71 c0       	rjmp	.+226    	; 0x2128 <main+0x1fe>
    2046:	84 30       	cpi	r24, 0x04	; 4
    2048:	91 05       	cpc	r25, r1
    204a:	09 f4       	brne	.+2      	; 0x204e <main+0x124>
    204c:	56 c0       	rjmp	.+172    	; 0x20fa <main+0x1d0>
    204e:	0c f4       	brge	.+2      	; 0x2052 <main+0x128>
    2050:	45 c0       	rjmp	.+138    	; 0x20dc <main+0x1b2>
    2052:	56 c0       	rjmp	.+172    	; 0x2100 <main+0x1d6>
    2054:	89 30       	cpi	r24, 0x09	; 9
    2056:	91 05       	cpc	r25, r1
    2058:	91 f1       	breq	.+100    	; 0x20be <main+0x194>
    205a:	34 f4       	brge	.+12     	; 0x2068 <main+0x13e>
    205c:	87 30       	cpi	r24, 0x07	; 7
    205e:	91 05       	cpc	r25, r1
    2060:	c1 f0       	breq	.+48     	; 0x2092 <main+0x168>
    2062:	08 97       	sbiw	r24, 0x08	; 8
    2064:	31 f1       	breq	.+76     	; 0x20b2 <main+0x188>
    2066:	60 c0       	rjmp	.+192    	; 0x2128 <main+0x1fe>
    2068:	8b 30       	cpi	r24, 0x0B	; 11
    206a:	91 05       	cpc	r25, r1
    206c:	09 f4       	brne	.+2      	; 0x2070 <main+0x146>
    206e:	60 c0       	rjmp	.+192    	; 0x2130 <main+0x206>
    2070:	0c f4       	brge	.+2      	; 0x2074 <main+0x14a>
    2072:	51 c0       	rjmp	.+162    	; 0x2116 <main+0x1ec>
    2074:	87 3e       	cpi	r24, 0xE7	; 231
    2076:	93 40       	sbci	r25, 0x03	; 3
    2078:	09 f4       	brne	.+2      	; 0x207c <main+0x152>
    207a:	1f c1       	rjmp	.+574    	; 0x22ba <__stack+0xbb>
    207c:	55 c0       	rjmp	.+170    	; 0x2128 <main+0x1fe>
				case EVT_ACTION:
					ServoControl( serCmd[1] );
    207e:	ea e9       	ldi	r30, 0x9A	; 154
    2080:	f6 e1       	ldi	r31, 0x16	; 22
    2082:	80 81       	ld	r24, Z
    2084:	91 81       	ldd	r25, Z+1	; 0x01
    2086:	3e dc       	rcall	.-1924   	; 0x1904 <ServoControl>
//                    setSpeedTest( serCmd[1] );
					sendAck(1);
    2088:	81 e0       	ldi	r24, 0x01	; 1
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	0e 94 22 07 	call	0xe44	; 0xe44 <sendAck>
					break;
    2090:	4f c0       	rjmp	.+158    	; 0x2130 <main+0x206>
				case EVT_START_MOTION:
				    startMotion( serCmd[1], serCmd[2] );
    2092:	ec e9       	ldi	r30, 0x9C	; 156
    2094:	f6 e1       	ldi	r31, 0x16	; 22
    2096:	60 81       	ld	r22, Z
    2098:	71 81       	ldd	r23, Z+1	; 0x01
    209a:	ea e9       	ldi	r30, 0x9A	; 154
    209c:	f6 e1       	ldi	r31, 0x16	; 22
    209e:	80 81       	ld	r24, Z
    20a0:	91 81       	ldd	r25, Z+1	; 0x01
    20a2:	16 d9       	rcall	.-3540   	; 0x12d0 <startMotion>
					PORTC = ~(1 << (LED_MAX - 2));
    20a4:	ff ed       	ldi	r31, 0xDF	; 223
    20a6:	f8 b9       	out	0x08, r31	; 8
					sendAck(1);
    20a8:	81 e0       	ldi	r24, 0x01	; 1
    20aa:	90 e0       	ldi	r25, 0x00	; 0
    20ac:	0e 94 22 07 	call	0xe44	; 0xe44 <sendAck>
					break;
    20b0:	3f c0       	rjmp	.+126    	; 0x2130 <main+0x206>
				case EVT_STOP_MOTION:
					stopMotion();
    20b2:	48 d9       	rcall	.-3440   	; 0x1344 <stopMotion>
					sendAck(1);
    20b4:	81 e0       	ldi	r24, 0x01	; 1
    20b6:	90 e0       	ldi	r25, 0x00	; 0
    20b8:	0e 94 22 07 	call	0xe44	; 0xe44 <sendAck>
					break;
    20bc:	39 c0       	rjmp	.+114    	; 0x2130 <main+0x206>
				case EVT_FORCE_MOTION:
					forceMotion( serCmd[1], serCmd[2] );
    20be:	ec e9       	ldi	r30, 0x9C	; 156
    20c0:	f6 e1       	ldi	r31, 0x16	; 22
    20c2:	60 81       	ld	r22, Z
    20c4:	71 81       	ldd	r23, Z+1	; 0x01
    20c6:	ea e9       	ldi	r30, 0x9A	; 154
    20c8:	f6 e1       	ldi	r31, 0x16	; 22
    20ca:	80 81       	ld	r24, Z
    20cc:	91 81       	ldd	r25, Z+1	; 0x01
    20ce:	23 d9       	rcall	.-3514   	; 0x1316 <forceMotion>
					break;
    20d0:	2f c0       	rjmp	.+94     	; 0x2130 <main+0x206>
				case EVT_GET_NOW_ANGLE:
					getAngle();
    20d2:	0e 94 b8 07 	call	0xf70	; 0xf70 <getAngle>
					break;
    20d6:	2c c0       	rjmp	.+88     	; 0x2130 <main+0x206>
				case EVT_SET_ANGLE:
					setAngle();
    20d8:	0e 94 9b 07 	call	0xf36	; 0xf36 <setAngle>
				case EVT_GET_ACT_ANGLE:
				    if( serCmd[1] >= ACT_MAX ){
    20dc:	ea e9       	ldi	r30, 0x9A	; 154
    20de:	f6 e1       	ldi	r31, 0x16	; 22
    20e0:	80 81       	ld	r24, Z
    20e2:	91 81       	ldd	r25, Z+1	; 0x01
    20e4:	84 36       	cpi	r24, 0x64	; 100
    20e6:	91 05       	cpc	r25, r1
    20e8:	2c f0       	brlt	.+10     	; 0x20f4 <main+0x1ca>
					    sendAck(0);
    20ea:	80 e0       	ldi	r24, 0x00	; 0
    20ec:	90 e0       	ldi	r25, 0x00	; 0
    20ee:	0e 94 22 07 	call	0xe44	; 0xe44 <sendAck>
    20f2:	1e c0       	rjmp	.+60     	; 0x2130 <main+0x206>
					}else{
						sendActAngle(serCmd[1]);
    20f4:	0e 94 1f 08 	call	0x103e	; 0x103e <sendActAngle>
    20f8:	1b c0       	rjmp	.+54     	; 0x2130 <main+0x206>
					}
					break;
				case EVT_GET_LOAD:
					getLoad();
    20fa:	0e 94 70 08 	call	0x10e0	; 0x10e0 <getLoad>
//					printf( "%d\n", movingTime );
					break;
    20fe:	18 c0       	rjmp	.+48     	; 0x2130 <main+0x206>
				case EVT_GET_VOLTAGE:
					getVoltage();
    2100:	6a d8       	rcall	.-3884   	; 0x11d6 <getVoltage>
					break;
    2102:	16 c0       	rjmp	.+44     	; 0x2130 <main+0x206>
				case EVT_TORQUE_DISABLE:
					dxl_write_byte( BROADCAST_ID, P_TORQUE_ENABLE, 0 );
    2104:	40 e0       	ldi	r20, 0x00	; 0
    2106:	50 e0       	ldi	r21, 0x00	; 0
    2108:	68 e1       	ldi	r22, 0x18	; 24
    210a:	70 e0       	ldi	r23, 0x00	; 0
    210c:	8e ef       	ldi	r24, 0xFE	; 254
    210e:	90 e0       	ldi	r25, 0x00	; 0
    2110:	0e 94 3a 02 	call	0x474	; 0x474 <dxl_write_byte>
					break;
    2114:	0d c0       	rjmp	.+26     	; 0x2130 <main+0x206>
				case EVT_WATCH_DOG:
					watchDogCnt = 0;
    2116:	10 92 7e 16 	sts	0x167E, r1
    211a:	10 92 7f 16 	sts	0x167F, r1
    211e:	10 92 80 16 	sts	0x1680, r1
    2122:	10 92 81 16 	sts	0x1681, r1
					break;
    2126:	04 c0       	rjmp	.+8      	; 0x2130 <main+0x206>
//					printf( "finish\n");
					sendAck(999);
					isFinish = 1;
					break;
				default:
					sendAck(0);
    2128:	80 e0       	ldi	r24, 0x00	; 0
    212a:	90 e0       	ldi	r25, 0x00	; 0
    212c:	0e 94 22 07 	call	0xe44	; 0xe44 <sendAck>
				}
				if( isFinish > 0 ){
					MotorControl( 0, 0 );
					break;
				}
				memset( readData, 0x00, SERIAL_BUFFER_SIZE );
    2130:	fe 01       	movw	r30, r28
    2132:	23 2d       	mov	r18, r3
    2134:	11 92       	st	Z+, r1
    2136:	2a 95       	dec	r18
    2138:	e9 f7       	brne	.-6      	; 0x2134 <main+0x20a>
			}
		}
		memset( &serCmd[0], 0x00, sizeof(int) * SERIAL_BUFFER_SIZE );
    213a:	f2 01       	movw	r30, r4
    213c:	22 2d       	mov	r18, r2
    213e:	11 92       	st	Z+, r1
    2140:	2a 95       	dec	r18
    2142:	e9 f7       	brne	.-6      	; 0x213e <main+0x214>
		
		if (~PINA & SW_START ) {
    2144:	01 99       	sbic	0x00, 1	; 0
    2146:	17 c0       	rjmp	.+46     	; 0x2176 <main+0x24c>
			if (log == 1) printf( "main() 0\n");
			if( iStart > 0 ){
    2148:	80 91 0a 02 	lds	r24, 0x020A
    214c:	90 91 0b 02 	lds	r25, 0x020B
    2150:	18 16       	cp	r1, r24
    2152:	19 06       	cpc	r1, r25
    2154:	ac f5       	brge	.+106    	; 0x21c0 <main+0x296>
				iStart = 0;
    2156:	10 92 0b 02 	sts	0x020B, r1
    215a:	10 92 0a 02 	sts	0x020A, r1
				PORTC = LED_BAT|LED_TxD|LED_RxD|LED_AUX|LED_MANAGE|LED_PROGRAM|LED_PLAY;
    215e:	8f e7       	ldi	r24, 0x7F	; 127
    2160:	88 b9       	out	0x08, r24	; 8
				if (isCaptureMode != 1) ServoControl( 0 );
    2162:	80 91 7a 16 	lds	r24, 0x167A
    2166:	90 91 7b 16 	lds	r25, 0x167B
    216a:	01 97       	sbiw	r24, 0x01	; 1
    216c:	49 f1       	breq	.+82     	; 0x21c0 <main+0x296>
    216e:	80 e0       	ldi	r24, 0x00	; 0
    2170:	90 e0       	ldi	r25, 0x00	; 0
    2172:	c8 db       	rcall	.-2160   	; 0x1904 <ServoControl>
    2174:	25 c0       	rjmp	.+74     	; 0x21c0 <main+0x296>
			}
		}else{
			if( iStart == 0 ){
    2176:	80 91 0a 02 	lds	r24, 0x020A
    217a:	90 91 0b 02 	lds	r25, 0x020B
    217e:	89 2b       	or	r24, r25
    2180:	39 f4       	brne	.+14     	; 0x2190 <main+0x266>
				PORTC &= ~LED_PLAY;
    2182:	46 98       	cbi	0x08, 6	; 8
				iStart = 1;
    2184:	81 e0       	ldi	r24, 0x01	; 1
    2186:	90 e0       	ldi	r25, 0x00	; 0
    2188:	90 93 0b 02 	sts	0x020B, r25
    218c:	80 93 0a 02 	sts	0x020A, r24
			}
			if( modeWait <= 0 ){
    2190:	80 91 92 16 	lds	r24, 0x1692
    2194:	90 91 93 16 	lds	r25, 0x1693
    2198:	18 16       	cp	r1, r24
    219a:	19 06       	cpc	r1, r25
    219c:	5c f0       	brlt	.+22     	; 0x21b4 <main+0x28a>
				if (log == 1) printf( "main() 1\n");
				setModeAction();
    219e:	4a da       	rcall	.-2924   	; 0x1634 <setModeAction>
				if (isMovetest == 1) {
    21a0:	80 91 60 16 	lds	r24, 0x1660
    21a4:	90 91 61 16 	lds	r25, 0x1661
    21a8:	01 97       	sbiw	r24, 0x01	; 1
    21aa:	11 f4       	brne	.+4      	; 0x21b0 <main+0x286>
					moveTest();
    21ac:	55 de       	rcall	.-854    	; 0x1e58 <moveTest>
    21ae:	08 c0       	rjmp	.+16     	; 0x21c0 <main+0x296>
				} else {
					move();
    21b0:	c2 dd       	rcall	.-1148   	; 0x1d36 <move>
    21b2:	06 c0       	rjmp	.+12     	; 0x21c0 <main+0x296>
				}
			}else{
				if (log == 1) printf( "main() 2\n");
				modeWait -= MAIN_DELAY;
    21b4:	84 56       	subi	r24, 0x64	; 100
    21b6:	91 09       	sbc	r25, r1
    21b8:	90 93 93 16 	sts	0x1693, r25
    21bc:	80 93 92 16 	sts	0x1692, r24
			}
		}
		if (sensorValue[0] == 0 && sensorValueOld[0] != sensorValue[0]) {
    21c0:	f6 01       	movw	r30, r12
    21c2:	80 81       	ld	r24, Z
    21c4:	91 81       	ldd	r25, Z+1	; 0x01
    21c6:	00 97       	sbiw	r24, 0x00	; 0
    21c8:	39 f4       	brne	.+14     	; 0x21d8 <main+0x2ae>
    21ca:	f5 01       	movw	r30, r10
    21cc:	80 81       	ld	r24, Z
    21ce:	91 81       	ldd	r25, Z+1	; 0x01
    21d0:	89 2b       	or	r24, r25
    21d2:	49 f0       	breq	.+18     	; 0x21e6 <main+0x2bc>
		if (log == 1) printf( "### main() sensorValue[0] == 0\n");
            PORTC |= LED_PROGRAM; //edit
    21d4:	45 9a       	sbi	0x08, 5	; 8
    21d6:	07 c0       	rjmp	.+14     	; 0x21e6 <main+0x2bc>
		}else if (sensorValueOld[0] != sensorValue[0]){
    21d8:	f5 01       	movw	r30, r10
    21da:	20 81       	ld	r18, Z
    21dc:	31 81       	ldd	r19, Z+1	; 0x01
    21de:	82 17       	cp	r24, r18
    21e0:	93 07       	cpc	r25, r19
    21e2:	09 f0       	breq	.+2      	; 0x21e6 <main+0x2bc>
			if (log == 1) printf( "### main() sensorValue[0] == 1\n");
			PORTC &= ~LED_PROGRAM; //edit
    21e4:	45 98       	cbi	0x08, 5	; 8
		}
		
		if (sensorValue[1] == 0 && sensorValueOld[1] != sensorValue[1]) {
    21e6:	f7 01       	movw	r30, r14
    21e8:	80 81       	ld	r24, Z
    21ea:	91 81       	ldd	r25, Z+1	; 0x01
    21ec:	00 97       	sbiw	r24, 0x00	; 0
    21ee:	39 f4       	brne	.+14     	; 0x21fe <main+0x2d4>
    21f0:	f4 01       	movw	r30, r8
    21f2:	80 81       	ld	r24, Z
    21f4:	91 81       	ldd	r25, Z+1	; 0x01
    21f6:	89 2b       	or	r24, r25
    21f8:	49 f0       	breq	.+18     	; 0x220c <__stack+0xd>
			if (log == 1) printf( "### main() sensorValue[1] == 0\n");
            PORTC |= LED_MANAGE; //mon
    21fa:	44 9a       	sbi	0x08, 4	; 8
    21fc:	07 c0       	rjmp	.+14     	; 0x220c <__stack+0xd>
		}else if (sensorValueOld[1] != sensorValue[1]){
    21fe:	f4 01       	movw	r30, r8
    2200:	20 81       	ld	r18, Z
    2202:	31 81       	ldd	r19, Z+1	; 0x01
    2204:	82 17       	cp	r24, r18
    2206:	93 07       	cpc	r25, r19
    2208:	09 f0       	breq	.+2      	; 0x220c <__stack+0xd>
			if (log == 1) printf( "### main() sensorValue[1] == 1\n");
			PORTC &= ~LED_MANAGE; //mon
    220a:	44 98       	cbi	0x08, 4	; 8
		}

		if (sensorValue[2] == 0 && sensorValueOld[2] != sensorValue[2]) {
    220c:	f8 01       	movw	r30, r16
    220e:	80 81       	ld	r24, Z
    2210:	91 81       	ldd	r25, Z+1	; 0x01
    2212:	00 97       	sbiw	r24, 0x00	; 0
    2214:	39 f4       	brne	.+14     	; 0x2224 <__stack+0x25>
    2216:	f3 01       	movw	r30, r6
    2218:	80 81       	ld	r24, Z
    221a:	91 81       	ldd	r25, Z+1	; 0x01
    221c:	89 2b       	or	r24, r25
    221e:	49 f0       	breq	.+18     	; 0x2232 <__stack+0x33>
			if (log == 1) printf( "### main() sensorValue[2] == 0\n");
            PORTC |= LED_AUX; //AUX
    2220:	43 9a       	sbi	0x08, 3	; 8
    2222:	07 c0       	rjmp	.+14     	; 0x2232 <__stack+0x33>
		}else if (sensorValueOld[2] != sensorValue[2]){
    2224:	f3 01       	movw	r30, r6
    2226:	20 81       	ld	r18, Z
    2228:	31 81       	ldd	r19, Z+1	; 0x01
    222a:	82 17       	cp	r24, r18
    222c:	93 07       	cpc	r25, r19
    222e:	09 f0       	breq	.+2      	; 0x2232 <__stack+0x33>
			if (log == 1) printf( "### main() sensorValue[2] == 1\n");
			PORTC &= ~LED_AUX; //AUX
    2230:	43 98       	cbi	0x08, 3	; 8
    	}
	    sensorValueOld[0] = sensorValue[0];
    2232:	f6 01       	movw	r30, r12
    2234:	80 81       	ld	r24, Z
    2236:	91 81       	ldd	r25, Z+1	; 0x01
    2238:	f5 01       	movw	r30, r10
    223a:	91 83       	std	Z+1, r25	; 0x01
    223c:	80 83       	st	Z, r24
		sensorValueOld[1] = sensorValue[1];
    223e:	f7 01       	movw	r30, r14
    2240:	80 81       	ld	r24, Z
    2242:	91 81       	ldd	r25, Z+1	; 0x01
    2244:	f4 01       	movw	r30, r8
    2246:	91 83       	std	Z+1, r25	; 0x01
    2248:	80 83       	st	Z, r24
		sensorValueOld[2] = sensorValue[2];
    224a:	f8 01       	movw	r30, r16
    224c:	80 81       	ld	r24, Z
    224e:	91 81       	ldd	r25, Z+1	; 0x01
    2250:	f3 01       	movw	r30, r6
    2252:	91 83       	std	Z+1, r25	; 0x01
    2254:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2256:	87 ea       	ldi	r24, 0xA7	; 167
    2258:	91 e6       	ldi	r25, 0x61	; 97
    225a:	01 97       	sbiw	r24, 0x01	; 1
    225c:	f1 f7       	brne	.-4      	; 0x225a <__stack+0x5b>
    225e:	00 c0       	rjmp	.+0      	; 0x2260 <__stack+0x61>
    2260:	00 00       	nop
		
		// walk pattern LED
//		brinkLED();
		
		_delay_ms(MAIN_DELAY);
		watchDogCnt++;
    2262:	80 91 7e 16 	lds	r24, 0x167E
    2266:	90 91 7f 16 	lds	r25, 0x167F
    226a:	a0 91 80 16 	lds	r26, 0x1680
    226e:	b0 91 81 16 	lds	r27, 0x1681
    2272:	01 96       	adiw	r24, 0x01	; 1
    2274:	a1 1d       	adc	r26, r1
    2276:	b1 1d       	adc	r27, r1
    2278:	80 93 7e 16 	sts	0x167E, r24
    227c:	90 93 7f 16 	sts	0x167F, r25
    2280:	a0 93 80 16 	sts	0x1680, r26
    2284:	b0 93 81 16 	sts	0x1681, r27
		
		caputureCount1++;
    2288:	80 91 7c 16 	lds	r24, 0x167C
    228c:	90 91 7d 16 	lds	r25, 0x167D
    2290:	01 96       	adiw	r24, 0x01	; 1
    2292:	90 93 7d 16 	sts	0x167D, r25
    2296:	80 93 7c 16 	sts	0x167C, r24
		if (caputureCount1 == 25){
    229a:	49 97       	sbiw	r24, 0x19	; 25
    229c:	09 f0       	breq	.+2      	; 0x22a0 <__stack+0xa1>
    229e:	a5 ce       	rjmp	.-694    	; 0x1fea <main+0xc0>
			if (isCaptureMode == 1) getAngle();
    22a0:	80 91 7a 16 	lds	r24, 0x167A
    22a4:	90 91 7b 16 	lds	r25, 0x167B
    22a8:	01 97       	sbiw	r24, 0x01	; 1
    22aa:	11 f4       	brne	.+4      	; 0x22b0 <__stack+0xb1>
    22ac:	0e 94 b8 07 	call	0xf70	; 0xf70 <getAngle>
			caputureCount1 = 0;
    22b0:	10 92 7d 16 	sts	0x167D, r1
    22b4:	10 92 7c 16 	sts	0x167C, r1
    22b8:	98 ce       	rjmp	.-720    	; 0x1fea <main+0xc0>
					break;
				case EVT_MOTION_EDIT:
					break;
				case 999:
//					printf( "finish\n");
					sendAck(999);
    22ba:	87 ee       	ldi	r24, 0xE7	; 231
    22bc:	93 e0       	ldi	r25, 0x03	; 3
    22be:	0e 94 22 07 	call	0xe44	; 0xe44 <sendAck>
					break;
				default:
					sendAck(0);
				}
				if( isFinish > 0 ){
					MotorControl( 0, 0 );
    22c2:	60 e0       	ldi	r22, 0x00	; 0
    22c4:	70 e0       	ldi	r23, 0x00	; 0
    22c6:	80 e0       	ldi	r24, 0x00	; 0
    22c8:	90 e0       	ldi	r25, 0x00	; 0
    22ca:	da da       	rcall	.-2636   	; 0x1880 <MotorControl>
		if (caputureCount1 == 25){
			if (isCaptureMode == 1) getAngle();
			caputureCount1 = 0;
		}
	}
}
    22cc:	80 e0       	ldi	r24, 0x00	; 0
    22ce:	90 e0       	ldi	r25, 0x00	; 0
    22d0:	df 91       	pop	r29
    22d2:	cf 91       	pop	r28
    22d4:	1f 91       	pop	r17
    22d6:	0f 91       	pop	r16
    22d8:	ff 90       	pop	r15
    22da:	ef 90       	pop	r14
    22dc:	df 90       	pop	r13
    22de:	cf 90       	pop	r12
    22e0:	bf 90       	pop	r11
    22e2:	af 90       	pop	r10
    22e4:	9f 90       	pop	r9
    22e6:	8f 90       	pop	r8
    22e8:	7f 90       	pop	r7
    22ea:	6f 90       	pop	r6
    22ec:	5f 90       	pop	r5
    22ee:	4f 90       	pop	r4
    22f0:	3f 90       	pop	r3
    22f2:	2f 90       	pop	r2
    22f4:	08 95       	ret

000022f6 <__divsf3>:
    22f6:	0c d0       	rcall	.+24     	; 0x2310 <__divsf3x>
    22f8:	eb c0       	rjmp	.+470    	; 0x24d0 <__fp_round>
    22fa:	e3 d0       	rcall	.+454    	; 0x24c2 <__fp_pscB>
    22fc:	40 f0       	brcs	.+16     	; 0x230e <__divsf3+0x18>
    22fe:	da d0       	rcall	.+436    	; 0x24b4 <__fp_pscA>
    2300:	30 f0       	brcs	.+12     	; 0x230e <__divsf3+0x18>
    2302:	21 f4       	brne	.+8      	; 0x230c <__divsf3+0x16>
    2304:	5f 3f       	cpi	r21, 0xFF	; 255
    2306:	19 f0       	breq	.+6      	; 0x230e <__divsf3+0x18>
    2308:	cc c0       	rjmp	.+408    	; 0x24a2 <__fp_inf>
    230a:	51 11       	cpse	r21, r1
    230c:	15 c1       	rjmp	.+554    	; 0x2538 <__fp_szero>
    230e:	cf c0       	rjmp	.+414    	; 0x24ae <__fp_nan>

00002310 <__divsf3x>:
    2310:	f0 d0       	rcall	.+480    	; 0x24f2 <__fp_split3>
    2312:	98 f3       	brcs	.-26     	; 0x22fa <__divsf3+0x4>

00002314 <__divsf3_pse>:
    2314:	99 23       	and	r25, r25
    2316:	c9 f3       	breq	.-14     	; 0x230a <__divsf3+0x14>
    2318:	55 23       	and	r21, r21
    231a:	b1 f3       	breq	.-20     	; 0x2308 <__divsf3+0x12>
    231c:	95 1b       	sub	r25, r21
    231e:	55 0b       	sbc	r21, r21
    2320:	bb 27       	eor	r27, r27
    2322:	aa 27       	eor	r26, r26
    2324:	62 17       	cp	r22, r18
    2326:	73 07       	cpc	r23, r19
    2328:	84 07       	cpc	r24, r20
    232a:	38 f0       	brcs	.+14     	; 0x233a <__divsf3_pse+0x26>
    232c:	9f 5f       	subi	r25, 0xFF	; 255
    232e:	5f 4f       	sbci	r21, 0xFF	; 255
    2330:	22 0f       	add	r18, r18
    2332:	33 1f       	adc	r19, r19
    2334:	44 1f       	adc	r20, r20
    2336:	aa 1f       	adc	r26, r26
    2338:	a9 f3       	breq	.-22     	; 0x2324 <__divsf3_pse+0x10>
    233a:	33 d0       	rcall	.+102    	; 0x23a2 <__divsf3_pse+0x8e>
    233c:	0e 2e       	mov	r0, r30
    233e:	3a f0       	brmi	.+14     	; 0x234e <__divsf3_pse+0x3a>
    2340:	e0 e8       	ldi	r30, 0x80	; 128
    2342:	30 d0       	rcall	.+96     	; 0x23a4 <__divsf3_pse+0x90>
    2344:	91 50       	subi	r25, 0x01	; 1
    2346:	50 40       	sbci	r21, 0x00	; 0
    2348:	e6 95       	lsr	r30
    234a:	00 1c       	adc	r0, r0
    234c:	ca f7       	brpl	.-14     	; 0x2340 <__divsf3_pse+0x2c>
    234e:	29 d0       	rcall	.+82     	; 0x23a2 <__divsf3_pse+0x8e>
    2350:	fe 2f       	mov	r31, r30
    2352:	27 d0       	rcall	.+78     	; 0x23a2 <__divsf3_pse+0x8e>
    2354:	66 0f       	add	r22, r22
    2356:	77 1f       	adc	r23, r23
    2358:	88 1f       	adc	r24, r24
    235a:	bb 1f       	adc	r27, r27
    235c:	26 17       	cp	r18, r22
    235e:	37 07       	cpc	r19, r23
    2360:	48 07       	cpc	r20, r24
    2362:	ab 07       	cpc	r26, r27
    2364:	b0 e8       	ldi	r27, 0x80	; 128
    2366:	09 f0       	breq	.+2      	; 0x236a <__divsf3_pse+0x56>
    2368:	bb 0b       	sbc	r27, r27
    236a:	80 2d       	mov	r24, r0
    236c:	bf 01       	movw	r22, r30
    236e:	ff 27       	eor	r31, r31
    2370:	93 58       	subi	r25, 0x83	; 131
    2372:	5f 4f       	sbci	r21, 0xFF	; 255
    2374:	2a f0       	brmi	.+10     	; 0x2380 <__divsf3_pse+0x6c>
    2376:	9e 3f       	cpi	r25, 0xFE	; 254
    2378:	51 05       	cpc	r21, r1
    237a:	68 f0       	brcs	.+26     	; 0x2396 <__divsf3_pse+0x82>
    237c:	92 c0       	rjmp	.+292    	; 0x24a2 <__fp_inf>
    237e:	dc c0       	rjmp	.+440    	; 0x2538 <__fp_szero>
    2380:	5f 3f       	cpi	r21, 0xFF	; 255
    2382:	ec f3       	brlt	.-6      	; 0x237e <__divsf3_pse+0x6a>
    2384:	98 3e       	cpi	r25, 0xE8	; 232
    2386:	dc f3       	brlt	.-10     	; 0x237e <__divsf3_pse+0x6a>
    2388:	86 95       	lsr	r24
    238a:	77 95       	ror	r23
    238c:	67 95       	ror	r22
    238e:	b7 95       	ror	r27
    2390:	f7 95       	ror	r31
    2392:	9f 5f       	subi	r25, 0xFF	; 255
    2394:	c9 f7       	brne	.-14     	; 0x2388 <__divsf3_pse+0x74>
    2396:	88 0f       	add	r24, r24
    2398:	91 1d       	adc	r25, r1
    239a:	96 95       	lsr	r25
    239c:	87 95       	ror	r24
    239e:	97 f9       	bld	r25, 7
    23a0:	08 95       	ret
    23a2:	e1 e0       	ldi	r30, 0x01	; 1
    23a4:	66 0f       	add	r22, r22
    23a6:	77 1f       	adc	r23, r23
    23a8:	88 1f       	adc	r24, r24
    23aa:	bb 1f       	adc	r27, r27
    23ac:	62 17       	cp	r22, r18
    23ae:	73 07       	cpc	r23, r19
    23b0:	84 07       	cpc	r24, r20
    23b2:	ba 07       	cpc	r27, r26
    23b4:	20 f0       	brcs	.+8      	; 0x23be <__divsf3_pse+0xaa>
    23b6:	62 1b       	sub	r22, r18
    23b8:	73 0b       	sbc	r23, r19
    23ba:	84 0b       	sbc	r24, r20
    23bc:	ba 0b       	sbc	r27, r26
    23be:	ee 1f       	adc	r30, r30
    23c0:	88 f7       	brcc	.-30     	; 0x23a4 <__divsf3_pse+0x90>
    23c2:	e0 95       	com	r30
    23c4:	08 95       	ret

000023c6 <__fixsfsi>:
    23c6:	04 d0       	rcall	.+8      	; 0x23d0 <__fixunssfsi>
    23c8:	68 94       	set
    23ca:	b1 11       	cpse	r27, r1
    23cc:	b5 c0       	rjmp	.+362    	; 0x2538 <__fp_szero>
    23ce:	08 95       	ret

000023d0 <__fixunssfsi>:
    23d0:	98 d0       	rcall	.+304    	; 0x2502 <__fp_splitA>
    23d2:	88 f0       	brcs	.+34     	; 0x23f6 <__fixunssfsi+0x26>
    23d4:	9f 57       	subi	r25, 0x7F	; 127
    23d6:	90 f0       	brcs	.+36     	; 0x23fc <__fixunssfsi+0x2c>
    23d8:	b9 2f       	mov	r27, r25
    23da:	99 27       	eor	r25, r25
    23dc:	b7 51       	subi	r27, 0x17	; 23
    23de:	a0 f0       	brcs	.+40     	; 0x2408 <__fixunssfsi+0x38>
    23e0:	d1 f0       	breq	.+52     	; 0x2416 <__fixunssfsi+0x46>
    23e2:	66 0f       	add	r22, r22
    23e4:	77 1f       	adc	r23, r23
    23e6:	88 1f       	adc	r24, r24
    23e8:	99 1f       	adc	r25, r25
    23ea:	1a f0       	brmi	.+6      	; 0x23f2 <__fixunssfsi+0x22>
    23ec:	ba 95       	dec	r27
    23ee:	c9 f7       	brne	.-14     	; 0x23e2 <__fixunssfsi+0x12>
    23f0:	12 c0       	rjmp	.+36     	; 0x2416 <__fixunssfsi+0x46>
    23f2:	b1 30       	cpi	r27, 0x01	; 1
    23f4:	81 f0       	breq	.+32     	; 0x2416 <__fixunssfsi+0x46>
    23f6:	9f d0       	rcall	.+318    	; 0x2536 <__fp_zero>
    23f8:	b1 e0       	ldi	r27, 0x01	; 1
    23fa:	08 95       	ret
    23fc:	9c c0       	rjmp	.+312    	; 0x2536 <__fp_zero>
    23fe:	67 2f       	mov	r22, r23
    2400:	78 2f       	mov	r23, r24
    2402:	88 27       	eor	r24, r24
    2404:	b8 5f       	subi	r27, 0xF8	; 248
    2406:	39 f0       	breq	.+14     	; 0x2416 <__fixunssfsi+0x46>
    2408:	b9 3f       	cpi	r27, 0xF9	; 249
    240a:	cc f3       	brlt	.-14     	; 0x23fe <__fixunssfsi+0x2e>
    240c:	86 95       	lsr	r24
    240e:	77 95       	ror	r23
    2410:	67 95       	ror	r22
    2412:	b3 95       	inc	r27
    2414:	d9 f7       	brne	.-10     	; 0x240c <__fixunssfsi+0x3c>
    2416:	3e f4       	brtc	.+14     	; 0x2426 <__fixunssfsi+0x56>
    2418:	90 95       	com	r25
    241a:	80 95       	com	r24
    241c:	70 95       	com	r23
    241e:	61 95       	neg	r22
    2420:	7f 4f       	sbci	r23, 0xFF	; 255
    2422:	8f 4f       	sbci	r24, 0xFF	; 255
    2424:	9f 4f       	sbci	r25, 0xFF	; 255
    2426:	08 95       	ret

00002428 <__floatunsisf>:
    2428:	e8 94       	clt
    242a:	09 c0       	rjmp	.+18     	; 0x243e <__floatsisf+0x12>

0000242c <__floatsisf>:
    242c:	97 fb       	bst	r25, 7
    242e:	3e f4       	brtc	.+14     	; 0x243e <__floatsisf+0x12>
    2430:	90 95       	com	r25
    2432:	80 95       	com	r24
    2434:	70 95       	com	r23
    2436:	61 95       	neg	r22
    2438:	7f 4f       	sbci	r23, 0xFF	; 255
    243a:	8f 4f       	sbci	r24, 0xFF	; 255
    243c:	9f 4f       	sbci	r25, 0xFF	; 255
    243e:	99 23       	and	r25, r25
    2440:	a9 f0       	breq	.+42     	; 0x246c <__floatsisf+0x40>
    2442:	f9 2f       	mov	r31, r25
    2444:	96 e9       	ldi	r25, 0x96	; 150
    2446:	bb 27       	eor	r27, r27
    2448:	93 95       	inc	r25
    244a:	f6 95       	lsr	r31
    244c:	87 95       	ror	r24
    244e:	77 95       	ror	r23
    2450:	67 95       	ror	r22
    2452:	b7 95       	ror	r27
    2454:	f1 11       	cpse	r31, r1
    2456:	f8 cf       	rjmp	.-16     	; 0x2448 <__floatsisf+0x1c>
    2458:	fa f4       	brpl	.+62     	; 0x2498 <__floatsisf+0x6c>
    245a:	bb 0f       	add	r27, r27
    245c:	11 f4       	brne	.+4      	; 0x2462 <__floatsisf+0x36>
    245e:	60 ff       	sbrs	r22, 0
    2460:	1b c0       	rjmp	.+54     	; 0x2498 <__floatsisf+0x6c>
    2462:	6f 5f       	subi	r22, 0xFF	; 255
    2464:	7f 4f       	sbci	r23, 0xFF	; 255
    2466:	8f 4f       	sbci	r24, 0xFF	; 255
    2468:	9f 4f       	sbci	r25, 0xFF	; 255
    246a:	16 c0       	rjmp	.+44     	; 0x2498 <__floatsisf+0x6c>
    246c:	88 23       	and	r24, r24
    246e:	11 f0       	breq	.+4      	; 0x2474 <__floatsisf+0x48>
    2470:	96 e9       	ldi	r25, 0x96	; 150
    2472:	11 c0       	rjmp	.+34     	; 0x2496 <__floatsisf+0x6a>
    2474:	77 23       	and	r23, r23
    2476:	21 f0       	breq	.+8      	; 0x2480 <__floatsisf+0x54>
    2478:	9e e8       	ldi	r25, 0x8E	; 142
    247a:	87 2f       	mov	r24, r23
    247c:	76 2f       	mov	r23, r22
    247e:	05 c0       	rjmp	.+10     	; 0x248a <__floatsisf+0x5e>
    2480:	66 23       	and	r22, r22
    2482:	71 f0       	breq	.+28     	; 0x24a0 <__floatsisf+0x74>
    2484:	96 e8       	ldi	r25, 0x86	; 134
    2486:	86 2f       	mov	r24, r22
    2488:	70 e0       	ldi	r23, 0x00	; 0
    248a:	60 e0       	ldi	r22, 0x00	; 0
    248c:	2a f0       	brmi	.+10     	; 0x2498 <__floatsisf+0x6c>
    248e:	9a 95       	dec	r25
    2490:	66 0f       	add	r22, r22
    2492:	77 1f       	adc	r23, r23
    2494:	88 1f       	adc	r24, r24
    2496:	da f7       	brpl	.-10     	; 0x248e <__floatsisf+0x62>
    2498:	88 0f       	add	r24, r24
    249a:	96 95       	lsr	r25
    249c:	87 95       	ror	r24
    249e:	97 f9       	bld	r25, 7
    24a0:	08 95       	ret

000024a2 <__fp_inf>:
    24a2:	97 f9       	bld	r25, 7
    24a4:	9f 67       	ori	r25, 0x7F	; 127
    24a6:	80 e8       	ldi	r24, 0x80	; 128
    24a8:	70 e0       	ldi	r23, 0x00	; 0
    24aa:	60 e0       	ldi	r22, 0x00	; 0
    24ac:	08 95       	ret

000024ae <__fp_nan>:
    24ae:	9f ef       	ldi	r25, 0xFF	; 255
    24b0:	80 ec       	ldi	r24, 0xC0	; 192
    24b2:	08 95       	ret

000024b4 <__fp_pscA>:
    24b4:	00 24       	eor	r0, r0
    24b6:	0a 94       	dec	r0
    24b8:	16 16       	cp	r1, r22
    24ba:	17 06       	cpc	r1, r23
    24bc:	18 06       	cpc	r1, r24
    24be:	09 06       	cpc	r0, r25
    24c0:	08 95       	ret

000024c2 <__fp_pscB>:
    24c2:	00 24       	eor	r0, r0
    24c4:	0a 94       	dec	r0
    24c6:	12 16       	cp	r1, r18
    24c8:	13 06       	cpc	r1, r19
    24ca:	14 06       	cpc	r1, r20
    24cc:	05 06       	cpc	r0, r21
    24ce:	08 95       	ret

000024d0 <__fp_round>:
    24d0:	09 2e       	mov	r0, r25
    24d2:	03 94       	inc	r0
    24d4:	00 0c       	add	r0, r0
    24d6:	11 f4       	brne	.+4      	; 0x24dc <__fp_round+0xc>
    24d8:	88 23       	and	r24, r24
    24da:	52 f0       	brmi	.+20     	; 0x24f0 <__fp_round+0x20>
    24dc:	bb 0f       	add	r27, r27
    24de:	40 f4       	brcc	.+16     	; 0x24f0 <__fp_round+0x20>
    24e0:	bf 2b       	or	r27, r31
    24e2:	11 f4       	brne	.+4      	; 0x24e8 <__fp_round+0x18>
    24e4:	60 ff       	sbrs	r22, 0
    24e6:	04 c0       	rjmp	.+8      	; 0x24f0 <__fp_round+0x20>
    24e8:	6f 5f       	subi	r22, 0xFF	; 255
    24ea:	7f 4f       	sbci	r23, 0xFF	; 255
    24ec:	8f 4f       	sbci	r24, 0xFF	; 255
    24ee:	9f 4f       	sbci	r25, 0xFF	; 255
    24f0:	08 95       	ret

000024f2 <__fp_split3>:
    24f2:	57 fd       	sbrc	r21, 7
    24f4:	90 58       	subi	r25, 0x80	; 128
    24f6:	44 0f       	add	r20, r20
    24f8:	55 1f       	adc	r21, r21
    24fa:	59 f0       	breq	.+22     	; 0x2512 <__fp_splitA+0x10>
    24fc:	5f 3f       	cpi	r21, 0xFF	; 255
    24fe:	71 f0       	breq	.+28     	; 0x251c <__fp_splitA+0x1a>
    2500:	47 95       	ror	r20

00002502 <__fp_splitA>:
    2502:	88 0f       	add	r24, r24
    2504:	97 fb       	bst	r25, 7
    2506:	99 1f       	adc	r25, r25
    2508:	61 f0       	breq	.+24     	; 0x2522 <__fp_splitA+0x20>
    250a:	9f 3f       	cpi	r25, 0xFF	; 255
    250c:	79 f0       	breq	.+30     	; 0x252c <__fp_splitA+0x2a>
    250e:	87 95       	ror	r24
    2510:	08 95       	ret
    2512:	12 16       	cp	r1, r18
    2514:	13 06       	cpc	r1, r19
    2516:	14 06       	cpc	r1, r20
    2518:	55 1f       	adc	r21, r21
    251a:	f2 cf       	rjmp	.-28     	; 0x2500 <__fp_split3+0xe>
    251c:	46 95       	lsr	r20
    251e:	f1 df       	rcall	.-30     	; 0x2502 <__fp_splitA>
    2520:	08 c0       	rjmp	.+16     	; 0x2532 <__fp_splitA+0x30>
    2522:	16 16       	cp	r1, r22
    2524:	17 06       	cpc	r1, r23
    2526:	18 06       	cpc	r1, r24
    2528:	99 1f       	adc	r25, r25
    252a:	f1 cf       	rjmp	.-30     	; 0x250e <__fp_splitA+0xc>
    252c:	86 95       	lsr	r24
    252e:	71 05       	cpc	r23, r1
    2530:	61 05       	cpc	r22, r1
    2532:	08 94       	sec
    2534:	08 95       	ret

00002536 <__fp_zero>:
    2536:	e8 94       	clt

00002538 <__fp_szero>:
    2538:	bb 27       	eor	r27, r27
    253a:	66 27       	eor	r22, r22
    253c:	77 27       	eor	r23, r23
    253e:	cb 01       	movw	r24, r22
    2540:	97 f9       	bld	r25, 7
    2542:	08 95       	ret

00002544 <__mulsf3>:
    2544:	0b d0       	rcall	.+22     	; 0x255c <__mulsf3x>
    2546:	c4 cf       	rjmp	.-120    	; 0x24d0 <__fp_round>
    2548:	b5 df       	rcall	.-150    	; 0x24b4 <__fp_pscA>
    254a:	28 f0       	brcs	.+10     	; 0x2556 <__mulsf3+0x12>
    254c:	ba df       	rcall	.-140    	; 0x24c2 <__fp_pscB>
    254e:	18 f0       	brcs	.+6      	; 0x2556 <__mulsf3+0x12>
    2550:	95 23       	and	r25, r21
    2552:	09 f0       	breq	.+2      	; 0x2556 <__mulsf3+0x12>
    2554:	a6 cf       	rjmp	.-180    	; 0x24a2 <__fp_inf>
    2556:	ab cf       	rjmp	.-170    	; 0x24ae <__fp_nan>
    2558:	11 24       	eor	r1, r1
    255a:	ee cf       	rjmp	.-36     	; 0x2538 <__fp_szero>

0000255c <__mulsf3x>:
    255c:	ca df       	rcall	.-108    	; 0x24f2 <__fp_split3>
    255e:	a0 f3       	brcs	.-24     	; 0x2548 <__mulsf3+0x4>

00002560 <__mulsf3_pse>:
    2560:	95 9f       	mul	r25, r21
    2562:	d1 f3       	breq	.-12     	; 0x2558 <__mulsf3+0x14>
    2564:	95 0f       	add	r25, r21
    2566:	50 e0       	ldi	r21, 0x00	; 0
    2568:	55 1f       	adc	r21, r21
    256a:	62 9f       	mul	r22, r18
    256c:	f0 01       	movw	r30, r0
    256e:	72 9f       	mul	r23, r18
    2570:	bb 27       	eor	r27, r27
    2572:	f0 0d       	add	r31, r0
    2574:	b1 1d       	adc	r27, r1
    2576:	63 9f       	mul	r22, r19
    2578:	aa 27       	eor	r26, r26
    257a:	f0 0d       	add	r31, r0
    257c:	b1 1d       	adc	r27, r1
    257e:	aa 1f       	adc	r26, r26
    2580:	64 9f       	mul	r22, r20
    2582:	66 27       	eor	r22, r22
    2584:	b0 0d       	add	r27, r0
    2586:	a1 1d       	adc	r26, r1
    2588:	66 1f       	adc	r22, r22
    258a:	82 9f       	mul	r24, r18
    258c:	22 27       	eor	r18, r18
    258e:	b0 0d       	add	r27, r0
    2590:	a1 1d       	adc	r26, r1
    2592:	62 1f       	adc	r22, r18
    2594:	73 9f       	mul	r23, r19
    2596:	b0 0d       	add	r27, r0
    2598:	a1 1d       	adc	r26, r1
    259a:	62 1f       	adc	r22, r18
    259c:	83 9f       	mul	r24, r19
    259e:	a0 0d       	add	r26, r0
    25a0:	61 1d       	adc	r22, r1
    25a2:	22 1f       	adc	r18, r18
    25a4:	74 9f       	mul	r23, r20
    25a6:	33 27       	eor	r19, r19
    25a8:	a0 0d       	add	r26, r0
    25aa:	61 1d       	adc	r22, r1
    25ac:	23 1f       	adc	r18, r19
    25ae:	84 9f       	mul	r24, r20
    25b0:	60 0d       	add	r22, r0
    25b2:	21 1d       	adc	r18, r1
    25b4:	82 2f       	mov	r24, r18
    25b6:	76 2f       	mov	r23, r22
    25b8:	6a 2f       	mov	r22, r26
    25ba:	11 24       	eor	r1, r1
    25bc:	9f 57       	subi	r25, 0x7F	; 127
    25be:	50 40       	sbci	r21, 0x00	; 0
    25c0:	8a f0       	brmi	.+34     	; 0x25e4 <__mulsf3_pse+0x84>
    25c2:	e1 f0       	breq	.+56     	; 0x25fc <__mulsf3_pse+0x9c>
    25c4:	88 23       	and	r24, r24
    25c6:	4a f0       	brmi	.+18     	; 0x25da <__mulsf3_pse+0x7a>
    25c8:	ee 0f       	add	r30, r30
    25ca:	ff 1f       	adc	r31, r31
    25cc:	bb 1f       	adc	r27, r27
    25ce:	66 1f       	adc	r22, r22
    25d0:	77 1f       	adc	r23, r23
    25d2:	88 1f       	adc	r24, r24
    25d4:	91 50       	subi	r25, 0x01	; 1
    25d6:	50 40       	sbci	r21, 0x00	; 0
    25d8:	a9 f7       	brne	.-22     	; 0x25c4 <__mulsf3_pse+0x64>
    25da:	9e 3f       	cpi	r25, 0xFE	; 254
    25dc:	51 05       	cpc	r21, r1
    25de:	70 f0       	brcs	.+28     	; 0x25fc <__mulsf3_pse+0x9c>
    25e0:	60 cf       	rjmp	.-320    	; 0x24a2 <__fp_inf>
    25e2:	aa cf       	rjmp	.-172    	; 0x2538 <__fp_szero>
    25e4:	5f 3f       	cpi	r21, 0xFF	; 255
    25e6:	ec f3       	brlt	.-6      	; 0x25e2 <__mulsf3_pse+0x82>
    25e8:	98 3e       	cpi	r25, 0xE8	; 232
    25ea:	dc f3       	brlt	.-10     	; 0x25e2 <__mulsf3_pse+0x82>
    25ec:	86 95       	lsr	r24
    25ee:	77 95       	ror	r23
    25f0:	67 95       	ror	r22
    25f2:	b7 95       	ror	r27
    25f4:	f7 95       	ror	r31
    25f6:	e7 95       	ror	r30
    25f8:	9f 5f       	subi	r25, 0xFF	; 255
    25fa:	c1 f7       	brne	.-16     	; 0x25ec <__mulsf3_pse+0x8c>
    25fc:	fe 2b       	or	r31, r30
    25fe:	88 0f       	add	r24, r24
    2600:	91 1d       	adc	r25, r1
    2602:	96 95       	lsr	r25
    2604:	87 95       	ror	r24
    2606:	97 f9       	bld	r25, 7
    2608:	08 95       	ret

0000260a <__cmpsf2>:
    260a:	03 d0       	rcall	.+6      	; 0x2612 <__fp_cmp>
    260c:	08 f4       	brcc	.+2      	; 0x2610 <__cmpsf2+0x6>
    260e:	81 e0       	ldi	r24, 0x01	; 1
    2610:	08 95       	ret

00002612 <__fp_cmp>:
    2612:	99 0f       	add	r25, r25
    2614:	00 08       	sbc	r0, r0
    2616:	55 0f       	add	r21, r21
    2618:	aa 0b       	sbc	r26, r26
    261a:	e0 e8       	ldi	r30, 0x80	; 128
    261c:	fe ef       	ldi	r31, 0xFE	; 254
    261e:	16 16       	cp	r1, r22
    2620:	17 06       	cpc	r1, r23
    2622:	e8 07       	cpc	r30, r24
    2624:	f9 07       	cpc	r31, r25
    2626:	c0 f0       	brcs	.+48     	; 0x2658 <__fp_cmp+0x46>
    2628:	12 16       	cp	r1, r18
    262a:	13 06       	cpc	r1, r19
    262c:	e4 07       	cpc	r30, r20
    262e:	f5 07       	cpc	r31, r21
    2630:	98 f0       	brcs	.+38     	; 0x2658 <__fp_cmp+0x46>
    2632:	62 1b       	sub	r22, r18
    2634:	73 0b       	sbc	r23, r19
    2636:	84 0b       	sbc	r24, r20
    2638:	95 0b       	sbc	r25, r21
    263a:	39 f4       	brne	.+14     	; 0x264a <__fp_cmp+0x38>
    263c:	0a 26       	eor	r0, r26
    263e:	61 f0       	breq	.+24     	; 0x2658 <__fp_cmp+0x46>
    2640:	23 2b       	or	r18, r19
    2642:	24 2b       	or	r18, r20
    2644:	25 2b       	or	r18, r21
    2646:	21 f4       	brne	.+8      	; 0x2650 <__fp_cmp+0x3e>
    2648:	08 95       	ret
    264a:	0a 26       	eor	r0, r26
    264c:	09 f4       	brne	.+2      	; 0x2650 <__fp_cmp+0x3e>
    264e:	a1 40       	sbci	r26, 0x01	; 1
    2650:	a6 95       	lsr	r26
    2652:	8f ef       	ldi	r24, 0xFF	; 255
    2654:	81 1d       	adc	r24, r1
    2656:	81 1d       	adc	r24, r1
    2658:	08 95       	ret

0000265a <__gesf2>:
    265a:	db df       	rcall	.-74     	; 0x2612 <__fp_cmp>
    265c:	08 f4       	brcc	.+2      	; 0x2660 <__gesf2+0x6>
    265e:	8f ef       	ldi	r24, 0xFF	; 255
    2660:	08 95       	ret

00002662 <__divmodhi4>:
    2662:	97 fb       	bst	r25, 7
    2664:	07 2e       	mov	r0, r23
    2666:	16 f4       	brtc	.+4      	; 0x266c <__divmodhi4+0xa>
    2668:	00 94       	com	r0
    266a:	06 d0       	rcall	.+12     	; 0x2678 <__divmodhi4_neg1>
    266c:	77 fd       	sbrc	r23, 7
    266e:	08 d0       	rcall	.+16     	; 0x2680 <__divmodhi4_neg2>
    2670:	11 d0       	rcall	.+34     	; 0x2694 <__udivmodhi4>
    2672:	07 fc       	sbrc	r0, 7
    2674:	05 d0       	rcall	.+10     	; 0x2680 <__divmodhi4_neg2>
    2676:	3e f4       	brtc	.+14     	; 0x2686 <__divmodhi4_exit>

00002678 <__divmodhi4_neg1>:
    2678:	90 95       	com	r25
    267a:	81 95       	neg	r24
    267c:	9f 4f       	sbci	r25, 0xFF	; 255
    267e:	08 95       	ret

00002680 <__divmodhi4_neg2>:
    2680:	70 95       	com	r23
    2682:	61 95       	neg	r22
    2684:	7f 4f       	sbci	r23, 0xFF	; 255

00002686 <__divmodhi4_exit>:
    2686:	08 95       	ret

00002688 <__tablejump2__>:
    2688:	ee 0f       	add	r30, r30
    268a:	ff 1f       	adc	r31, r31

0000268c <__tablejump__>:
    268c:	05 90       	lpm	r0, Z+
    268e:	f4 91       	lpm	r31, Z
    2690:	e0 2d       	mov	r30, r0
    2692:	19 94       	eijmp

00002694 <__udivmodhi4>:
    2694:	aa 1b       	sub	r26, r26
    2696:	bb 1b       	sub	r27, r27
    2698:	51 e1       	ldi	r21, 0x11	; 17
    269a:	07 c0       	rjmp	.+14     	; 0x26aa <__udivmodhi4_ep>

0000269c <__udivmodhi4_loop>:
    269c:	aa 1f       	adc	r26, r26
    269e:	bb 1f       	adc	r27, r27
    26a0:	a6 17       	cp	r26, r22
    26a2:	b7 07       	cpc	r27, r23
    26a4:	10 f0       	brcs	.+4      	; 0x26aa <__udivmodhi4_ep>
    26a6:	a6 1b       	sub	r26, r22
    26a8:	b7 0b       	sbc	r27, r23

000026aa <__udivmodhi4_ep>:
    26aa:	88 1f       	adc	r24, r24
    26ac:	99 1f       	adc	r25, r25
    26ae:	5a 95       	dec	r21
    26b0:	a9 f7       	brne	.-22     	; 0x269c <__udivmodhi4_loop>
    26b2:	80 95       	com	r24
    26b4:	90 95       	com	r25
    26b6:	bc 01       	movw	r22, r24
    26b8:	cd 01       	movw	r24, r26
    26ba:	08 95       	ret

000026bc <atoi>:
    26bc:	fc 01       	movw	r30, r24
    26be:	88 27       	eor	r24, r24
    26c0:	99 27       	eor	r25, r25
    26c2:	e8 94       	clt
    26c4:	21 91       	ld	r18, Z+
    26c6:	20 32       	cpi	r18, 0x20	; 32
    26c8:	e9 f3       	breq	.-6      	; 0x26c4 <atoi+0x8>
    26ca:	29 30       	cpi	r18, 0x09	; 9
    26cc:	10 f0       	brcs	.+4      	; 0x26d2 <atoi+0x16>
    26ce:	2e 30       	cpi	r18, 0x0E	; 14
    26d0:	c8 f3       	brcs	.-14     	; 0x26c4 <atoi+0x8>
    26d2:	2b 32       	cpi	r18, 0x2B	; 43
    26d4:	39 f0       	breq	.+14     	; 0x26e4 <atoi+0x28>
    26d6:	2d 32       	cpi	r18, 0x2D	; 45
    26d8:	31 f4       	brne	.+12     	; 0x26e6 <atoi+0x2a>
    26da:	68 94       	set
    26dc:	03 c0       	rjmp	.+6      	; 0x26e4 <atoi+0x28>
    26de:	35 d0       	rcall	.+106    	; 0x274a <__mulhi_const_10>
    26e0:	82 0f       	add	r24, r18
    26e2:	91 1d       	adc	r25, r1
    26e4:	21 91       	ld	r18, Z+
    26e6:	20 53       	subi	r18, 0x30	; 48
    26e8:	2a 30       	cpi	r18, 0x0A	; 10
    26ea:	c8 f3       	brcs	.-14     	; 0x26de <atoi+0x22>
    26ec:	1e f4       	brtc	.+6      	; 0x26f4 <atoi+0x38>
    26ee:	90 95       	com	r25
    26f0:	81 95       	neg	r24
    26f2:	9f 4f       	sbci	r25, 0xFF	; 255
    26f4:	08 95       	ret

000026f6 <strtok>:
    26f6:	44 e0       	ldi	r20, 0x04	; 4
    26f8:	56 e1       	ldi	r21, 0x16	; 22
    26fa:	00 c0       	rjmp	.+0      	; 0x26fc <strtok_r>

000026fc <strtok_r>:
    26fc:	fa 01       	movw	r30, r20
    26fe:	a1 91       	ld	r26, Z+
    2700:	b0 81       	ld	r27, Z
    2702:	00 97       	sbiw	r24, 0x00	; 0
    2704:	19 f4       	brne	.+6      	; 0x270c <strtok_r+0x10>
    2706:	10 97       	sbiw	r26, 0x00	; 0
    2708:	e1 f0       	breq	.+56     	; 0x2742 <strtok_r+0x46>
    270a:	cd 01       	movw	r24, r26
    270c:	dc 01       	movw	r26, r24
    270e:	cd 01       	movw	r24, r26
    2710:	0d 90       	ld	r0, X+
    2712:	00 20       	and	r0, r0
    2714:	11 f4       	brne	.+4      	; 0x271a <strtok_r+0x1e>
    2716:	c0 01       	movw	r24, r0
    2718:	13 c0       	rjmp	.+38     	; 0x2740 <strtok_r+0x44>
    271a:	fb 01       	movw	r30, r22
    271c:	21 91       	ld	r18, Z+
    271e:	22 23       	and	r18, r18
    2720:	19 f0       	breq	.+6      	; 0x2728 <strtok_r+0x2c>
    2722:	20 15       	cp	r18, r0
    2724:	d9 f7       	brne	.-10     	; 0x271c <strtok_r+0x20>
    2726:	f3 cf       	rjmp	.-26     	; 0x270e <strtok_r+0x12>
    2728:	fb 01       	movw	r30, r22
    272a:	21 91       	ld	r18, Z+
    272c:	20 15       	cp	r18, r0
    272e:	19 f4       	brne	.+6      	; 0x2736 <strtok_r+0x3a>
    2730:	1e 92       	st	-X, r1
    2732:	11 96       	adiw	r26, 0x01	; 1
    2734:	06 c0       	rjmp	.+12     	; 0x2742 <strtok_r+0x46>
    2736:	22 23       	and	r18, r18
    2738:	c1 f7       	brne	.-16     	; 0x272a <strtok_r+0x2e>
    273a:	0d 90       	ld	r0, X+
    273c:	00 20       	and	r0, r0
    273e:	a1 f7       	brne	.-24     	; 0x2728 <strtok_r+0x2c>
    2740:	d0 01       	movw	r26, r0
    2742:	fa 01       	movw	r30, r20
    2744:	a1 93       	st	Z+, r26
    2746:	b0 83       	st	Z, r27
    2748:	08 95       	ret

0000274a <__mulhi_const_10>:
    274a:	7a e0       	ldi	r23, 0x0A	; 10
    274c:	97 9f       	mul	r25, r23
    274e:	90 2d       	mov	r25, r0
    2750:	87 9f       	mul	r24, r23
    2752:	80 2d       	mov	r24, r0
    2754:	91 0d       	add	r25, r1
    2756:	11 24       	eor	r1, r1
    2758:	08 95       	ret

0000275a <fdevopen>:
    275a:	0f 93       	push	r16
    275c:	1f 93       	push	r17
    275e:	cf 93       	push	r28
    2760:	df 93       	push	r29
    2762:	ec 01       	movw	r28, r24
    2764:	8b 01       	movw	r16, r22
    2766:	00 97       	sbiw	r24, 0x00	; 0
    2768:	31 f4       	brne	.+12     	; 0x2776 <fdevopen+0x1c>
    276a:	61 15       	cp	r22, r1
    276c:	71 05       	cpc	r23, r1
    276e:	19 f4       	brne	.+6      	; 0x2776 <fdevopen+0x1c>
    2770:	80 e0       	ldi	r24, 0x00	; 0
    2772:	90 e0       	ldi	r25, 0x00	; 0
    2774:	37 c0       	rjmp	.+110    	; 0x27e4 <fdevopen+0x8a>
    2776:	6e e0       	ldi	r22, 0x0E	; 14
    2778:	70 e0       	ldi	r23, 0x00	; 0
    277a:	81 e0       	ldi	r24, 0x01	; 1
    277c:	90 e0       	ldi	r25, 0x00	; 0
    277e:	a1 d2       	rcall	.+1346   	; 0x2cc2 <calloc>
    2780:	fc 01       	movw	r30, r24
    2782:	00 97       	sbiw	r24, 0x00	; 0
    2784:	a9 f3       	breq	.-22     	; 0x2770 <fdevopen+0x16>
    2786:	80 e8       	ldi	r24, 0x80	; 128
    2788:	83 83       	std	Z+3, r24	; 0x03
    278a:	01 15       	cp	r16, r1
    278c:	11 05       	cpc	r17, r1
    278e:	71 f0       	breq	.+28     	; 0x27ac <fdevopen+0x52>
    2790:	13 87       	std	Z+11, r17	; 0x0b
    2792:	02 87       	std	Z+10, r16	; 0x0a
    2794:	81 e8       	ldi	r24, 0x81	; 129
    2796:	83 83       	std	Z+3, r24	; 0x03
    2798:	80 91 60 17 	lds	r24, 0x1760
    279c:	90 91 61 17 	lds	r25, 0x1761
    27a0:	89 2b       	or	r24, r25
    27a2:	21 f4       	brne	.+8      	; 0x27ac <fdevopen+0x52>
    27a4:	f0 93 61 17 	sts	0x1761, r31
    27a8:	e0 93 60 17 	sts	0x1760, r30
    27ac:	20 97       	sbiw	r28, 0x00	; 0
    27ae:	c9 f0       	breq	.+50     	; 0x27e2 <fdevopen+0x88>
    27b0:	d1 87       	std	Z+9, r29	; 0x09
    27b2:	c0 87       	std	Z+8, r28	; 0x08
    27b4:	83 81       	ldd	r24, Z+3	; 0x03
    27b6:	82 60       	ori	r24, 0x02	; 2
    27b8:	83 83       	std	Z+3, r24	; 0x03
    27ba:	80 91 62 17 	lds	r24, 0x1762
    27be:	90 91 63 17 	lds	r25, 0x1763
    27c2:	89 2b       	or	r24, r25
    27c4:	71 f4       	brne	.+28     	; 0x27e2 <fdevopen+0x88>
    27c6:	f0 93 63 17 	sts	0x1763, r31
    27ca:	e0 93 62 17 	sts	0x1762, r30
    27ce:	80 91 64 17 	lds	r24, 0x1764
    27d2:	90 91 65 17 	lds	r25, 0x1765
    27d6:	89 2b       	or	r24, r25
    27d8:	21 f4       	brne	.+8      	; 0x27e2 <fdevopen+0x88>
    27da:	f0 93 65 17 	sts	0x1765, r31
    27de:	e0 93 64 17 	sts	0x1764, r30
    27e2:	cf 01       	movw	r24, r30
    27e4:	df 91       	pop	r29
    27e6:	cf 91       	pop	r28
    27e8:	1f 91       	pop	r17
    27ea:	0f 91       	pop	r16
    27ec:	08 95       	ret

000027ee <fgetc>:
    27ee:	cf 93       	push	r28
    27f0:	df 93       	push	r29
    27f2:	ec 01       	movw	r28, r24
    27f4:	2b 81       	ldd	r18, Y+3	; 0x03
    27f6:	20 ff       	sbrs	r18, 0
    27f8:	33 c0       	rjmp	.+102    	; 0x2860 <fgetc+0x72>
    27fa:	26 ff       	sbrs	r18, 6
    27fc:	0a c0       	rjmp	.+20     	; 0x2812 <fgetc+0x24>
    27fe:	2f 7b       	andi	r18, 0xBF	; 191
    2800:	2b 83       	std	Y+3, r18	; 0x03
    2802:	8e 81       	ldd	r24, Y+6	; 0x06
    2804:	9f 81       	ldd	r25, Y+7	; 0x07
    2806:	01 96       	adiw	r24, 0x01	; 1
    2808:	9f 83       	std	Y+7, r25	; 0x07
    280a:	8e 83       	std	Y+6, r24	; 0x06
    280c:	8a 81       	ldd	r24, Y+2	; 0x02
    280e:	90 e0       	ldi	r25, 0x00	; 0
    2810:	29 c0       	rjmp	.+82     	; 0x2864 <fgetc+0x76>
    2812:	22 ff       	sbrs	r18, 2
    2814:	0f c0       	rjmp	.+30     	; 0x2834 <fgetc+0x46>
    2816:	e8 81       	ld	r30, Y
    2818:	f9 81       	ldd	r31, Y+1	; 0x01
    281a:	80 81       	ld	r24, Z
    281c:	99 27       	eor	r25, r25
    281e:	87 fd       	sbrc	r24, 7
    2820:	90 95       	com	r25
    2822:	00 97       	sbiw	r24, 0x00	; 0
    2824:	19 f4       	brne	.+6      	; 0x282c <fgetc+0x3e>
    2826:	20 62       	ori	r18, 0x20	; 32
    2828:	2b 83       	std	Y+3, r18	; 0x03
    282a:	1a c0       	rjmp	.+52     	; 0x2860 <fgetc+0x72>
    282c:	31 96       	adiw	r30, 0x01	; 1
    282e:	f9 83       	std	Y+1, r31	; 0x01
    2830:	e8 83       	st	Y, r30
    2832:	0e c0       	rjmp	.+28     	; 0x2850 <fgetc+0x62>
    2834:	ea 85       	ldd	r30, Y+10	; 0x0a
    2836:	fb 85       	ldd	r31, Y+11	; 0x0b
    2838:	19 95       	eicall
    283a:	97 ff       	sbrs	r25, 7
    283c:	09 c0       	rjmp	.+18     	; 0x2850 <fgetc+0x62>
    283e:	2b 81       	ldd	r18, Y+3	; 0x03
    2840:	01 96       	adiw	r24, 0x01	; 1
    2842:	11 f4       	brne	.+4      	; 0x2848 <fgetc+0x5a>
    2844:	80 e1       	ldi	r24, 0x10	; 16
    2846:	01 c0       	rjmp	.+2      	; 0x284a <fgetc+0x5c>
    2848:	80 e2       	ldi	r24, 0x20	; 32
    284a:	82 2b       	or	r24, r18
    284c:	8b 83       	std	Y+3, r24	; 0x03
    284e:	08 c0       	rjmp	.+16     	; 0x2860 <fgetc+0x72>
    2850:	2e 81       	ldd	r18, Y+6	; 0x06
    2852:	3f 81       	ldd	r19, Y+7	; 0x07
    2854:	2f 5f       	subi	r18, 0xFF	; 255
    2856:	3f 4f       	sbci	r19, 0xFF	; 255
    2858:	3f 83       	std	Y+7, r19	; 0x07
    285a:	2e 83       	std	Y+6, r18	; 0x06
    285c:	99 27       	eor	r25, r25
    285e:	02 c0       	rjmp	.+4      	; 0x2864 <fgetc+0x76>
    2860:	8f ef       	ldi	r24, 0xFF	; 255
    2862:	9f ef       	ldi	r25, 0xFF	; 255
    2864:	df 91       	pop	r29
    2866:	cf 91       	pop	r28
    2868:	08 95       	ret

0000286a <printf>:
    286a:	cf 93       	push	r28
    286c:	df 93       	push	r29
    286e:	cd b7       	in	r28, 0x3d	; 61
    2870:	de b7       	in	r29, 0x3e	; 62
    2872:	fe 01       	movw	r30, r28
    2874:	36 96       	adiw	r30, 0x06	; 6
    2876:	61 91       	ld	r22, Z+
    2878:	71 91       	ld	r23, Z+
    287a:	af 01       	movw	r20, r30
    287c:	80 91 62 17 	lds	r24, 0x1762
    2880:	90 91 63 17 	lds	r25, 0x1763
    2884:	30 d0       	rcall	.+96     	; 0x28e6 <vfprintf>
    2886:	df 91       	pop	r29
    2888:	cf 91       	pop	r28
    288a:	08 95       	ret

0000288c <puts>:
    288c:	0f 93       	push	r16
    288e:	1f 93       	push	r17
    2890:	cf 93       	push	r28
    2892:	df 93       	push	r29
    2894:	e0 91 62 17 	lds	r30, 0x1762
    2898:	f0 91 63 17 	lds	r31, 0x1763
    289c:	23 81       	ldd	r18, Z+3	; 0x03
    289e:	21 ff       	sbrs	r18, 1
    28a0:	1b c0       	rjmp	.+54     	; 0x28d8 <puts+0x4c>
    28a2:	ec 01       	movw	r28, r24
    28a4:	00 e0       	ldi	r16, 0x00	; 0
    28a6:	10 e0       	ldi	r17, 0x00	; 0
    28a8:	89 91       	ld	r24, Y+
    28aa:	60 91 62 17 	lds	r22, 0x1762
    28ae:	70 91 63 17 	lds	r23, 0x1763
    28b2:	db 01       	movw	r26, r22
    28b4:	18 96       	adiw	r26, 0x08	; 8
    28b6:	ed 91       	ld	r30, X+
    28b8:	fc 91       	ld	r31, X
    28ba:	19 97       	sbiw	r26, 0x09	; 9
    28bc:	88 23       	and	r24, r24
    28be:	31 f0       	breq	.+12     	; 0x28cc <puts+0x40>
    28c0:	19 95       	eicall
    28c2:	89 2b       	or	r24, r25
    28c4:	89 f3       	breq	.-30     	; 0x28a8 <puts+0x1c>
    28c6:	0f ef       	ldi	r16, 0xFF	; 255
    28c8:	1f ef       	ldi	r17, 0xFF	; 255
    28ca:	ee cf       	rjmp	.-36     	; 0x28a8 <puts+0x1c>
    28cc:	8a e0       	ldi	r24, 0x0A	; 10
    28ce:	19 95       	eicall
    28d0:	89 2b       	or	r24, r25
    28d2:	11 f4       	brne	.+4      	; 0x28d8 <puts+0x4c>
    28d4:	c8 01       	movw	r24, r16
    28d6:	02 c0       	rjmp	.+4      	; 0x28dc <puts+0x50>
    28d8:	8f ef       	ldi	r24, 0xFF	; 255
    28da:	9f ef       	ldi	r25, 0xFF	; 255
    28dc:	df 91       	pop	r29
    28de:	cf 91       	pop	r28
    28e0:	1f 91       	pop	r17
    28e2:	0f 91       	pop	r16
    28e4:	08 95       	ret

000028e6 <vfprintf>:
    28e6:	2f 92       	push	r2
    28e8:	3f 92       	push	r3
    28ea:	4f 92       	push	r4
    28ec:	5f 92       	push	r5
    28ee:	6f 92       	push	r6
    28f0:	7f 92       	push	r7
    28f2:	8f 92       	push	r8
    28f4:	9f 92       	push	r9
    28f6:	af 92       	push	r10
    28f8:	bf 92       	push	r11
    28fa:	cf 92       	push	r12
    28fc:	df 92       	push	r13
    28fe:	ef 92       	push	r14
    2900:	ff 92       	push	r15
    2902:	0f 93       	push	r16
    2904:	1f 93       	push	r17
    2906:	cf 93       	push	r28
    2908:	df 93       	push	r29
    290a:	cd b7       	in	r28, 0x3d	; 61
    290c:	de b7       	in	r29, 0x3e	; 62
    290e:	2c 97       	sbiw	r28, 0x0c	; 12
    2910:	0f b6       	in	r0, 0x3f	; 63
    2912:	f8 94       	cli
    2914:	de bf       	out	0x3e, r29	; 62
    2916:	0f be       	out	0x3f, r0	; 63
    2918:	cd bf       	out	0x3d, r28	; 61
    291a:	7c 01       	movw	r14, r24
    291c:	6b 01       	movw	r12, r22
    291e:	8a 01       	movw	r16, r20
    2920:	fc 01       	movw	r30, r24
    2922:	17 82       	std	Z+7, r1	; 0x07
    2924:	16 82       	std	Z+6, r1	; 0x06
    2926:	83 81       	ldd	r24, Z+3	; 0x03
    2928:	81 ff       	sbrs	r24, 1
    292a:	b0 c1       	rjmp	.+864    	; 0x2c8c <vfprintf+0x3a6>
    292c:	ce 01       	movw	r24, r28
    292e:	01 96       	adiw	r24, 0x01	; 1
    2930:	4c 01       	movw	r8, r24
    2932:	f7 01       	movw	r30, r14
    2934:	93 81       	ldd	r25, Z+3	; 0x03
    2936:	f6 01       	movw	r30, r12
    2938:	93 fd       	sbrc	r25, 3
    293a:	85 91       	lpm	r24, Z+
    293c:	93 ff       	sbrs	r25, 3
    293e:	81 91       	ld	r24, Z+
    2940:	6f 01       	movw	r12, r30
    2942:	88 23       	and	r24, r24
    2944:	09 f4       	brne	.+2      	; 0x2948 <vfprintf+0x62>
    2946:	9e c1       	rjmp	.+828    	; 0x2c84 <vfprintf+0x39e>
    2948:	85 32       	cpi	r24, 0x25	; 37
    294a:	39 f4       	brne	.+14     	; 0x295a <vfprintf+0x74>
    294c:	93 fd       	sbrc	r25, 3
    294e:	85 91       	lpm	r24, Z+
    2950:	93 ff       	sbrs	r25, 3
    2952:	81 91       	ld	r24, Z+
    2954:	6f 01       	movw	r12, r30
    2956:	85 32       	cpi	r24, 0x25	; 37
    2958:	21 f4       	brne	.+8      	; 0x2962 <vfprintf+0x7c>
    295a:	b7 01       	movw	r22, r14
    295c:	90 e0       	ldi	r25, 0x00	; 0
    295e:	0f d3       	rcall	.+1566   	; 0x2f7e <fputc>
    2960:	e8 cf       	rjmp	.-48     	; 0x2932 <vfprintf+0x4c>
    2962:	51 2c       	mov	r5, r1
    2964:	31 2c       	mov	r3, r1
    2966:	20 e0       	ldi	r18, 0x00	; 0
    2968:	20 32       	cpi	r18, 0x20	; 32
    296a:	a0 f4       	brcc	.+40     	; 0x2994 <vfprintf+0xae>
    296c:	8b 32       	cpi	r24, 0x2B	; 43
    296e:	69 f0       	breq	.+26     	; 0x298a <vfprintf+0xa4>
    2970:	30 f4       	brcc	.+12     	; 0x297e <vfprintf+0x98>
    2972:	80 32       	cpi	r24, 0x20	; 32
    2974:	59 f0       	breq	.+22     	; 0x298c <vfprintf+0xa6>
    2976:	83 32       	cpi	r24, 0x23	; 35
    2978:	69 f4       	brne	.+26     	; 0x2994 <vfprintf+0xae>
    297a:	20 61       	ori	r18, 0x10	; 16
    297c:	2c c0       	rjmp	.+88     	; 0x29d6 <vfprintf+0xf0>
    297e:	8d 32       	cpi	r24, 0x2D	; 45
    2980:	39 f0       	breq	.+14     	; 0x2990 <vfprintf+0xaa>
    2982:	80 33       	cpi	r24, 0x30	; 48
    2984:	39 f4       	brne	.+14     	; 0x2994 <vfprintf+0xae>
    2986:	21 60       	ori	r18, 0x01	; 1
    2988:	26 c0       	rjmp	.+76     	; 0x29d6 <vfprintf+0xf0>
    298a:	22 60       	ori	r18, 0x02	; 2
    298c:	24 60       	ori	r18, 0x04	; 4
    298e:	23 c0       	rjmp	.+70     	; 0x29d6 <vfprintf+0xf0>
    2990:	28 60       	ori	r18, 0x08	; 8
    2992:	21 c0       	rjmp	.+66     	; 0x29d6 <vfprintf+0xf0>
    2994:	27 fd       	sbrc	r18, 7
    2996:	27 c0       	rjmp	.+78     	; 0x29e6 <vfprintf+0x100>
    2998:	30 ed       	ldi	r19, 0xD0	; 208
    299a:	38 0f       	add	r19, r24
    299c:	3a 30       	cpi	r19, 0x0A	; 10
    299e:	78 f4       	brcc	.+30     	; 0x29be <vfprintf+0xd8>
    29a0:	26 ff       	sbrs	r18, 6
    29a2:	06 c0       	rjmp	.+12     	; 0x29b0 <vfprintf+0xca>
    29a4:	fa e0       	ldi	r31, 0x0A	; 10
    29a6:	5f 9e       	mul	r5, r31
    29a8:	30 0d       	add	r19, r0
    29aa:	11 24       	eor	r1, r1
    29ac:	53 2e       	mov	r5, r19
    29ae:	13 c0       	rjmp	.+38     	; 0x29d6 <vfprintf+0xf0>
    29b0:	8a e0       	ldi	r24, 0x0A	; 10
    29b2:	38 9e       	mul	r3, r24
    29b4:	30 0d       	add	r19, r0
    29b6:	11 24       	eor	r1, r1
    29b8:	33 2e       	mov	r3, r19
    29ba:	20 62       	ori	r18, 0x20	; 32
    29bc:	0c c0       	rjmp	.+24     	; 0x29d6 <vfprintf+0xf0>
    29be:	8e 32       	cpi	r24, 0x2E	; 46
    29c0:	21 f4       	brne	.+8      	; 0x29ca <vfprintf+0xe4>
    29c2:	26 fd       	sbrc	r18, 6
    29c4:	5f c1       	rjmp	.+702    	; 0x2c84 <vfprintf+0x39e>
    29c6:	20 64       	ori	r18, 0x40	; 64
    29c8:	06 c0       	rjmp	.+12     	; 0x29d6 <vfprintf+0xf0>
    29ca:	8c 36       	cpi	r24, 0x6C	; 108
    29cc:	11 f4       	brne	.+4      	; 0x29d2 <vfprintf+0xec>
    29ce:	20 68       	ori	r18, 0x80	; 128
    29d0:	02 c0       	rjmp	.+4      	; 0x29d6 <vfprintf+0xf0>
    29d2:	88 36       	cpi	r24, 0x68	; 104
    29d4:	41 f4       	brne	.+16     	; 0x29e6 <vfprintf+0x100>
    29d6:	f6 01       	movw	r30, r12
    29d8:	93 fd       	sbrc	r25, 3
    29da:	85 91       	lpm	r24, Z+
    29dc:	93 ff       	sbrs	r25, 3
    29de:	81 91       	ld	r24, Z+
    29e0:	6f 01       	movw	r12, r30
    29e2:	81 11       	cpse	r24, r1
    29e4:	c1 cf       	rjmp	.-126    	; 0x2968 <vfprintf+0x82>
    29e6:	98 2f       	mov	r25, r24
    29e8:	9f 7d       	andi	r25, 0xDF	; 223
    29ea:	95 54       	subi	r25, 0x45	; 69
    29ec:	93 30       	cpi	r25, 0x03	; 3
    29ee:	28 f4       	brcc	.+10     	; 0x29fa <vfprintf+0x114>
    29f0:	0c 5f       	subi	r16, 0xFC	; 252
    29f2:	1f 4f       	sbci	r17, 0xFF	; 255
    29f4:	ff e3       	ldi	r31, 0x3F	; 63
    29f6:	f9 83       	std	Y+1, r31	; 0x01
    29f8:	0d c0       	rjmp	.+26     	; 0x2a14 <vfprintf+0x12e>
    29fa:	83 36       	cpi	r24, 0x63	; 99
    29fc:	31 f0       	breq	.+12     	; 0x2a0a <vfprintf+0x124>
    29fe:	83 37       	cpi	r24, 0x73	; 115
    2a00:	71 f0       	breq	.+28     	; 0x2a1e <vfprintf+0x138>
    2a02:	83 35       	cpi	r24, 0x53	; 83
    2a04:	09 f0       	breq	.+2      	; 0x2a08 <vfprintf+0x122>
    2a06:	57 c0       	rjmp	.+174    	; 0x2ab6 <vfprintf+0x1d0>
    2a08:	21 c0       	rjmp	.+66     	; 0x2a4c <vfprintf+0x166>
    2a0a:	f8 01       	movw	r30, r16
    2a0c:	80 81       	ld	r24, Z
    2a0e:	89 83       	std	Y+1, r24	; 0x01
    2a10:	0e 5f       	subi	r16, 0xFE	; 254
    2a12:	1f 4f       	sbci	r17, 0xFF	; 255
    2a14:	44 24       	eor	r4, r4
    2a16:	43 94       	inc	r4
    2a18:	51 2c       	mov	r5, r1
    2a1a:	54 01       	movw	r10, r8
    2a1c:	14 c0       	rjmp	.+40     	; 0x2a46 <vfprintf+0x160>
    2a1e:	38 01       	movw	r6, r16
    2a20:	f2 e0       	ldi	r31, 0x02	; 2
    2a22:	6f 0e       	add	r6, r31
    2a24:	71 1c       	adc	r7, r1
    2a26:	f8 01       	movw	r30, r16
    2a28:	a0 80       	ld	r10, Z
    2a2a:	b1 80       	ldd	r11, Z+1	; 0x01
    2a2c:	26 ff       	sbrs	r18, 6
    2a2e:	03 c0       	rjmp	.+6      	; 0x2a36 <vfprintf+0x150>
    2a30:	65 2d       	mov	r22, r5
    2a32:	70 e0       	ldi	r23, 0x00	; 0
    2a34:	02 c0       	rjmp	.+4      	; 0x2a3a <vfprintf+0x154>
    2a36:	6f ef       	ldi	r22, 0xFF	; 255
    2a38:	7f ef       	ldi	r23, 0xFF	; 255
    2a3a:	c5 01       	movw	r24, r10
    2a3c:	2c 87       	std	Y+12, r18	; 0x0c
    2a3e:	94 d2       	rcall	.+1320   	; 0x2f68 <strnlen>
    2a40:	2c 01       	movw	r4, r24
    2a42:	83 01       	movw	r16, r6
    2a44:	2c 85       	ldd	r18, Y+12	; 0x0c
    2a46:	2f 77       	andi	r18, 0x7F	; 127
    2a48:	22 2e       	mov	r2, r18
    2a4a:	16 c0       	rjmp	.+44     	; 0x2a78 <vfprintf+0x192>
    2a4c:	38 01       	movw	r6, r16
    2a4e:	f2 e0       	ldi	r31, 0x02	; 2
    2a50:	6f 0e       	add	r6, r31
    2a52:	71 1c       	adc	r7, r1
    2a54:	f8 01       	movw	r30, r16
    2a56:	a0 80       	ld	r10, Z
    2a58:	b1 80       	ldd	r11, Z+1	; 0x01
    2a5a:	26 ff       	sbrs	r18, 6
    2a5c:	03 c0       	rjmp	.+6      	; 0x2a64 <vfprintf+0x17e>
    2a5e:	65 2d       	mov	r22, r5
    2a60:	70 e0       	ldi	r23, 0x00	; 0
    2a62:	02 c0       	rjmp	.+4      	; 0x2a68 <vfprintf+0x182>
    2a64:	6f ef       	ldi	r22, 0xFF	; 255
    2a66:	7f ef       	ldi	r23, 0xFF	; 255
    2a68:	c5 01       	movw	r24, r10
    2a6a:	2c 87       	std	Y+12, r18	; 0x0c
    2a6c:	6b d2       	rcall	.+1238   	; 0x2f44 <strnlen_P>
    2a6e:	2c 01       	movw	r4, r24
    2a70:	2c 85       	ldd	r18, Y+12	; 0x0c
    2a72:	20 68       	ori	r18, 0x80	; 128
    2a74:	22 2e       	mov	r2, r18
    2a76:	83 01       	movw	r16, r6
    2a78:	23 fc       	sbrc	r2, 3
    2a7a:	19 c0       	rjmp	.+50     	; 0x2aae <vfprintf+0x1c8>
    2a7c:	83 2d       	mov	r24, r3
    2a7e:	90 e0       	ldi	r25, 0x00	; 0
    2a80:	48 16       	cp	r4, r24
    2a82:	59 06       	cpc	r5, r25
    2a84:	a0 f4       	brcc	.+40     	; 0x2aae <vfprintf+0x1c8>
    2a86:	b7 01       	movw	r22, r14
    2a88:	80 e2       	ldi	r24, 0x20	; 32
    2a8a:	90 e0       	ldi	r25, 0x00	; 0
    2a8c:	78 d2       	rcall	.+1264   	; 0x2f7e <fputc>
    2a8e:	3a 94       	dec	r3
    2a90:	f5 cf       	rjmp	.-22     	; 0x2a7c <vfprintf+0x196>
    2a92:	f5 01       	movw	r30, r10
    2a94:	27 fc       	sbrc	r2, 7
    2a96:	85 91       	lpm	r24, Z+
    2a98:	27 fe       	sbrs	r2, 7
    2a9a:	81 91       	ld	r24, Z+
    2a9c:	5f 01       	movw	r10, r30
    2a9e:	b7 01       	movw	r22, r14
    2aa0:	90 e0       	ldi	r25, 0x00	; 0
    2aa2:	6d d2       	rcall	.+1242   	; 0x2f7e <fputc>
    2aa4:	31 10       	cpse	r3, r1
    2aa6:	3a 94       	dec	r3
    2aa8:	f1 e0       	ldi	r31, 0x01	; 1
    2aaa:	4f 1a       	sub	r4, r31
    2aac:	51 08       	sbc	r5, r1
    2aae:	41 14       	cp	r4, r1
    2ab0:	51 04       	cpc	r5, r1
    2ab2:	79 f7       	brne	.-34     	; 0x2a92 <vfprintf+0x1ac>
    2ab4:	de c0       	rjmp	.+444    	; 0x2c72 <vfprintf+0x38c>
    2ab6:	84 36       	cpi	r24, 0x64	; 100
    2ab8:	11 f0       	breq	.+4      	; 0x2abe <vfprintf+0x1d8>
    2aba:	89 36       	cpi	r24, 0x69	; 105
    2abc:	31 f5       	brne	.+76     	; 0x2b0a <vfprintf+0x224>
    2abe:	f8 01       	movw	r30, r16
    2ac0:	27 ff       	sbrs	r18, 7
    2ac2:	07 c0       	rjmp	.+14     	; 0x2ad2 <vfprintf+0x1ec>
    2ac4:	60 81       	ld	r22, Z
    2ac6:	71 81       	ldd	r23, Z+1	; 0x01
    2ac8:	82 81       	ldd	r24, Z+2	; 0x02
    2aca:	93 81       	ldd	r25, Z+3	; 0x03
    2acc:	0c 5f       	subi	r16, 0xFC	; 252
    2ace:	1f 4f       	sbci	r17, 0xFF	; 255
    2ad0:	08 c0       	rjmp	.+16     	; 0x2ae2 <vfprintf+0x1fc>
    2ad2:	60 81       	ld	r22, Z
    2ad4:	71 81       	ldd	r23, Z+1	; 0x01
    2ad6:	88 27       	eor	r24, r24
    2ad8:	77 fd       	sbrc	r23, 7
    2ada:	80 95       	com	r24
    2adc:	98 2f       	mov	r25, r24
    2ade:	0e 5f       	subi	r16, 0xFE	; 254
    2ae0:	1f 4f       	sbci	r17, 0xFF	; 255
    2ae2:	2f 76       	andi	r18, 0x6F	; 111
    2ae4:	b2 2e       	mov	r11, r18
    2ae6:	97 ff       	sbrs	r25, 7
    2ae8:	09 c0       	rjmp	.+18     	; 0x2afc <vfprintf+0x216>
    2aea:	90 95       	com	r25
    2aec:	80 95       	com	r24
    2aee:	70 95       	com	r23
    2af0:	61 95       	neg	r22
    2af2:	7f 4f       	sbci	r23, 0xFF	; 255
    2af4:	8f 4f       	sbci	r24, 0xFF	; 255
    2af6:	9f 4f       	sbci	r25, 0xFF	; 255
    2af8:	20 68       	ori	r18, 0x80	; 128
    2afa:	b2 2e       	mov	r11, r18
    2afc:	2a e0       	ldi	r18, 0x0A	; 10
    2afe:	30 e0       	ldi	r19, 0x00	; 0
    2b00:	a4 01       	movw	r20, r8
    2b02:	6f d2       	rcall	.+1246   	; 0x2fe2 <__ultoa_invert>
    2b04:	a8 2e       	mov	r10, r24
    2b06:	a8 18       	sub	r10, r8
    2b08:	43 c0       	rjmp	.+134    	; 0x2b90 <vfprintf+0x2aa>
    2b0a:	85 37       	cpi	r24, 0x75	; 117
    2b0c:	29 f4       	brne	.+10     	; 0x2b18 <vfprintf+0x232>
    2b0e:	2f 7e       	andi	r18, 0xEF	; 239
    2b10:	b2 2e       	mov	r11, r18
    2b12:	2a e0       	ldi	r18, 0x0A	; 10
    2b14:	30 e0       	ldi	r19, 0x00	; 0
    2b16:	25 c0       	rjmp	.+74     	; 0x2b62 <vfprintf+0x27c>
    2b18:	f2 2f       	mov	r31, r18
    2b1a:	f9 7f       	andi	r31, 0xF9	; 249
    2b1c:	bf 2e       	mov	r11, r31
    2b1e:	8f 36       	cpi	r24, 0x6F	; 111
    2b20:	c1 f0       	breq	.+48     	; 0x2b52 <vfprintf+0x26c>
    2b22:	18 f4       	brcc	.+6      	; 0x2b2a <vfprintf+0x244>
    2b24:	88 35       	cpi	r24, 0x58	; 88
    2b26:	79 f0       	breq	.+30     	; 0x2b46 <vfprintf+0x260>
    2b28:	ad c0       	rjmp	.+346    	; 0x2c84 <vfprintf+0x39e>
    2b2a:	80 37       	cpi	r24, 0x70	; 112
    2b2c:	19 f0       	breq	.+6      	; 0x2b34 <vfprintf+0x24e>
    2b2e:	88 37       	cpi	r24, 0x78	; 120
    2b30:	21 f0       	breq	.+8      	; 0x2b3a <vfprintf+0x254>
    2b32:	a8 c0       	rjmp	.+336    	; 0x2c84 <vfprintf+0x39e>
    2b34:	2f 2f       	mov	r18, r31
    2b36:	20 61       	ori	r18, 0x10	; 16
    2b38:	b2 2e       	mov	r11, r18
    2b3a:	b4 fe       	sbrs	r11, 4
    2b3c:	0d c0       	rjmp	.+26     	; 0x2b58 <vfprintf+0x272>
    2b3e:	8b 2d       	mov	r24, r11
    2b40:	84 60       	ori	r24, 0x04	; 4
    2b42:	b8 2e       	mov	r11, r24
    2b44:	09 c0       	rjmp	.+18     	; 0x2b58 <vfprintf+0x272>
    2b46:	24 ff       	sbrs	r18, 4
    2b48:	0a c0       	rjmp	.+20     	; 0x2b5e <vfprintf+0x278>
    2b4a:	9f 2f       	mov	r25, r31
    2b4c:	96 60       	ori	r25, 0x06	; 6
    2b4e:	b9 2e       	mov	r11, r25
    2b50:	06 c0       	rjmp	.+12     	; 0x2b5e <vfprintf+0x278>
    2b52:	28 e0       	ldi	r18, 0x08	; 8
    2b54:	30 e0       	ldi	r19, 0x00	; 0
    2b56:	05 c0       	rjmp	.+10     	; 0x2b62 <vfprintf+0x27c>
    2b58:	20 e1       	ldi	r18, 0x10	; 16
    2b5a:	30 e0       	ldi	r19, 0x00	; 0
    2b5c:	02 c0       	rjmp	.+4      	; 0x2b62 <vfprintf+0x27c>
    2b5e:	20 e1       	ldi	r18, 0x10	; 16
    2b60:	32 e0       	ldi	r19, 0x02	; 2
    2b62:	f8 01       	movw	r30, r16
    2b64:	b7 fe       	sbrs	r11, 7
    2b66:	07 c0       	rjmp	.+14     	; 0x2b76 <vfprintf+0x290>
    2b68:	60 81       	ld	r22, Z
    2b6a:	71 81       	ldd	r23, Z+1	; 0x01
    2b6c:	82 81       	ldd	r24, Z+2	; 0x02
    2b6e:	93 81       	ldd	r25, Z+3	; 0x03
    2b70:	0c 5f       	subi	r16, 0xFC	; 252
    2b72:	1f 4f       	sbci	r17, 0xFF	; 255
    2b74:	06 c0       	rjmp	.+12     	; 0x2b82 <vfprintf+0x29c>
    2b76:	60 81       	ld	r22, Z
    2b78:	71 81       	ldd	r23, Z+1	; 0x01
    2b7a:	80 e0       	ldi	r24, 0x00	; 0
    2b7c:	90 e0       	ldi	r25, 0x00	; 0
    2b7e:	0e 5f       	subi	r16, 0xFE	; 254
    2b80:	1f 4f       	sbci	r17, 0xFF	; 255
    2b82:	a4 01       	movw	r20, r8
    2b84:	2e d2       	rcall	.+1116   	; 0x2fe2 <__ultoa_invert>
    2b86:	a8 2e       	mov	r10, r24
    2b88:	a8 18       	sub	r10, r8
    2b8a:	fb 2d       	mov	r31, r11
    2b8c:	ff 77       	andi	r31, 0x7F	; 127
    2b8e:	bf 2e       	mov	r11, r31
    2b90:	b6 fe       	sbrs	r11, 6
    2b92:	0b c0       	rjmp	.+22     	; 0x2baa <vfprintf+0x2c4>
    2b94:	2b 2d       	mov	r18, r11
    2b96:	2e 7f       	andi	r18, 0xFE	; 254
    2b98:	a5 14       	cp	r10, r5
    2b9a:	50 f4       	brcc	.+20     	; 0x2bb0 <vfprintf+0x2ca>
    2b9c:	b4 fe       	sbrs	r11, 4
    2b9e:	0a c0       	rjmp	.+20     	; 0x2bb4 <vfprintf+0x2ce>
    2ba0:	b2 fc       	sbrc	r11, 2
    2ba2:	08 c0       	rjmp	.+16     	; 0x2bb4 <vfprintf+0x2ce>
    2ba4:	2b 2d       	mov	r18, r11
    2ba6:	2e 7e       	andi	r18, 0xEE	; 238
    2ba8:	05 c0       	rjmp	.+10     	; 0x2bb4 <vfprintf+0x2ce>
    2baa:	7a 2c       	mov	r7, r10
    2bac:	2b 2d       	mov	r18, r11
    2bae:	03 c0       	rjmp	.+6      	; 0x2bb6 <vfprintf+0x2d0>
    2bb0:	7a 2c       	mov	r7, r10
    2bb2:	01 c0       	rjmp	.+2      	; 0x2bb6 <vfprintf+0x2d0>
    2bb4:	75 2c       	mov	r7, r5
    2bb6:	24 ff       	sbrs	r18, 4
    2bb8:	0d c0       	rjmp	.+26     	; 0x2bd4 <vfprintf+0x2ee>
    2bba:	fe 01       	movw	r30, r28
    2bbc:	ea 0d       	add	r30, r10
    2bbe:	f1 1d       	adc	r31, r1
    2bc0:	80 81       	ld	r24, Z
    2bc2:	80 33       	cpi	r24, 0x30	; 48
    2bc4:	11 f4       	brne	.+4      	; 0x2bca <vfprintf+0x2e4>
    2bc6:	29 7e       	andi	r18, 0xE9	; 233
    2bc8:	09 c0       	rjmp	.+18     	; 0x2bdc <vfprintf+0x2f6>
    2bca:	22 ff       	sbrs	r18, 2
    2bcc:	06 c0       	rjmp	.+12     	; 0x2bda <vfprintf+0x2f4>
    2bce:	73 94       	inc	r7
    2bd0:	73 94       	inc	r7
    2bd2:	04 c0       	rjmp	.+8      	; 0x2bdc <vfprintf+0x2f6>
    2bd4:	82 2f       	mov	r24, r18
    2bd6:	86 78       	andi	r24, 0x86	; 134
    2bd8:	09 f0       	breq	.+2      	; 0x2bdc <vfprintf+0x2f6>
    2bda:	73 94       	inc	r7
    2bdc:	23 fd       	sbrc	r18, 3
    2bde:	12 c0       	rjmp	.+36     	; 0x2c04 <vfprintf+0x31e>
    2be0:	20 ff       	sbrs	r18, 0
    2be2:	06 c0       	rjmp	.+12     	; 0x2bf0 <vfprintf+0x30a>
    2be4:	5a 2c       	mov	r5, r10
    2be6:	73 14       	cp	r7, r3
    2be8:	18 f4       	brcc	.+6      	; 0x2bf0 <vfprintf+0x30a>
    2bea:	53 0c       	add	r5, r3
    2bec:	57 18       	sub	r5, r7
    2bee:	73 2c       	mov	r7, r3
    2bf0:	73 14       	cp	r7, r3
    2bf2:	60 f4       	brcc	.+24     	; 0x2c0c <vfprintf+0x326>
    2bf4:	b7 01       	movw	r22, r14
    2bf6:	80 e2       	ldi	r24, 0x20	; 32
    2bf8:	90 e0       	ldi	r25, 0x00	; 0
    2bfa:	2c 87       	std	Y+12, r18	; 0x0c
    2bfc:	c0 d1       	rcall	.+896    	; 0x2f7e <fputc>
    2bfe:	73 94       	inc	r7
    2c00:	2c 85       	ldd	r18, Y+12	; 0x0c
    2c02:	f6 cf       	rjmp	.-20     	; 0x2bf0 <vfprintf+0x30a>
    2c04:	73 14       	cp	r7, r3
    2c06:	10 f4       	brcc	.+4      	; 0x2c0c <vfprintf+0x326>
    2c08:	37 18       	sub	r3, r7
    2c0a:	01 c0       	rjmp	.+2      	; 0x2c0e <vfprintf+0x328>
    2c0c:	31 2c       	mov	r3, r1
    2c0e:	24 ff       	sbrs	r18, 4
    2c10:	11 c0       	rjmp	.+34     	; 0x2c34 <vfprintf+0x34e>
    2c12:	b7 01       	movw	r22, r14
    2c14:	80 e3       	ldi	r24, 0x30	; 48
    2c16:	90 e0       	ldi	r25, 0x00	; 0
    2c18:	2c 87       	std	Y+12, r18	; 0x0c
    2c1a:	b1 d1       	rcall	.+866    	; 0x2f7e <fputc>
    2c1c:	2c 85       	ldd	r18, Y+12	; 0x0c
    2c1e:	22 ff       	sbrs	r18, 2
    2c20:	16 c0       	rjmp	.+44     	; 0x2c4e <vfprintf+0x368>
    2c22:	21 ff       	sbrs	r18, 1
    2c24:	03 c0       	rjmp	.+6      	; 0x2c2c <vfprintf+0x346>
    2c26:	88 e5       	ldi	r24, 0x58	; 88
    2c28:	90 e0       	ldi	r25, 0x00	; 0
    2c2a:	02 c0       	rjmp	.+4      	; 0x2c30 <vfprintf+0x34a>
    2c2c:	88 e7       	ldi	r24, 0x78	; 120
    2c2e:	90 e0       	ldi	r25, 0x00	; 0
    2c30:	b7 01       	movw	r22, r14
    2c32:	0c c0       	rjmp	.+24     	; 0x2c4c <vfprintf+0x366>
    2c34:	82 2f       	mov	r24, r18
    2c36:	86 78       	andi	r24, 0x86	; 134
    2c38:	51 f0       	breq	.+20     	; 0x2c4e <vfprintf+0x368>
    2c3a:	21 fd       	sbrc	r18, 1
    2c3c:	02 c0       	rjmp	.+4      	; 0x2c42 <vfprintf+0x35c>
    2c3e:	80 e2       	ldi	r24, 0x20	; 32
    2c40:	01 c0       	rjmp	.+2      	; 0x2c44 <vfprintf+0x35e>
    2c42:	8b e2       	ldi	r24, 0x2B	; 43
    2c44:	27 fd       	sbrc	r18, 7
    2c46:	8d e2       	ldi	r24, 0x2D	; 45
    2c48:	b7 01       	movw	r22, r14
    2c4a:	90 e0       	ldi	r25, 0x00	; 0
    2c4c:	98 d1       	rcall	.+816    	; 0x2f7e <fputc>
    2c4e:	a5 14       	cp	r10, r5
    2c50:	30 f4       	brcc	.+12     	; 0x2c5e <vfprintf+0x378>
    2c52:	b7 01       	movw	r22, r14
    2c54:	80 e3       	ldi	r24, 0x30	; 48
    2c56:	90 e0       	ldi	r25, 0x00	; 0
    2c58:	92 d1       	rcall	.+804    	; 0x2f7e <fputc>
    2c5a:	5a 94       	dec	r5
    2c5c:	f8 cf       	rjmp	.-16     	; 0x2c4e <vfprintf+0x368>
    2c5e:	aa 94       	dec	r10
    2c60:	f4 01       	movw	r30, r8
    2c62:	ea 0d       	add	r30, r10
    2c64:	f1 1d       	adc	r31, r1
    2c66:	80 81       	ld	r24, Z
    2c68:	b7 01       	movw	r22, r14
    2c6a:	90 e0       	ldi	r25, 0x00	; 0
    2c6c:	88 d1       	rcall	.+784    	; 0x2f7e <fputc>
    2c6e:	a1 10       	cpse	r10, r1
    2c70:	f6 cf       	rjmp	.-20     	; 0x2c5e <vfprintf+0x378>
    2c72:	33 20       	and	r3, r3
    2c74:	09 f4       	brne	.+2      	; 0x2c78 <vfprintf+0x392>
    2c76:	5d ce       	rjmp	.-838    	; 0x2932 <vfprintf+0x4c>
    2c78:	b7 01       	movw	r22, r14
    2c7a:	80 e2       	ldi	r24, 0x20	; 32
    2c7c:	90 e0       	ldi	r25, 0x00	; 0
    2c7e:	7f d1       	rcall	.+766    	; 0x2f7e <fputc>
    2c80:	3a 94       	dec	r3
    2c82:	f7 cf       	rjmp	.-18     	; 0x2c72 <vfprintf+0x38c>
    2c84:	f7 01       	movw	r30, r14
    2c86:	86 81       	ldd	r24, Z+6	; 0x06
    2c88:	97 81       	ldd	r25, Z+7	; 0x07
    2c8a:	02 c0       	rjmp	.+4      	; 0x2c90 <vfprintf+0x3aa>
    2c8c:	8f ef       	ldi	r24, 0xFF	; 255
    2c8e:	9f ef       	ldi	r25, 0xFF	; 255
    2c90:	2c 96       	adiw	r28, 0x0c	; 12
    2c92:	0f b6       	in	r0, 0x3f	; 63
    2c94:	f8 94       	cli
    2c96:	de bf       	out	0x3e, r29	; 62
    2c98:	0f be       	out	0x3f, r0	; 63
    2c9a:	cd bf       	out	0x3d, r28	; 61
    2c9c:	df 91       	pop	r29
    2c9e:	cf 91       	pop	r28
    2ca0:	1f 91       	pop	r17
    2ca2:	0f 91       	pop	r16
    2ca4:	ff 90       	pop	r15
    2ca6:	ef 90       	pop	r14
    2ca8:	df 90       	pop	r13
    2caa:	cf 90       	pop	r12
    2cac:	bf 90       	pop	r11
    2cae:	af 90       	pop	r10
    2cb0:	9f 90       	pop	r9
    2cb2:	8f 90       	pop	r8
    2cb4:	7f 90       	pop	r7
    2cb6:	6f 90       	pop	r6
    2cb8:	5f 90       	pop	r5
    2cba:	4f 90       	pop	r4
    2cbc:	3f 90       	pop	r3
    2cbe:	2f 90       	pop	r2
    2cc0:	08 95       	ret

00002cc2 <calloc>:
    2cc2:	0f 93       	push	r16
    2cc4:	1f 93       	push	r17
    2cc6:	cf 93       	push	r28
    2cc8:	df 93       	push	r29
    2cca:	86 9f       	mul	r24, r22
    2ccc:	80 01       	movw	r16, r0
    2cce:	87 9f       	mul	r24, r23
    2cd0:	10 0d       	add	r17, r0
    2cd2:	96 9f       	mul	r25, r22
    2cd4:	10 0d       	add	r17, r0
    2cd6:	11 24       	eor	r1, r1
    2cd8:	c8 01       	movw	r24, r16
    2cda:	0d d0       	rcall	.+26     	; 0x2cf6 <malloc>
    2cdc:	ec 01       	movw	r28, r24
    2cde:	00 97       	sbiw	r24, 0x00	; 0
    2ce0:	21 f0       	breq	.+8      	; 0x2cea <calloc+0x28>
    2ce2:	a8 01       	movw	r20, r16
    2ce4:	60 e0       	ldi	r22, 0x00	; 0
    2ce6:	70 e0       	ldi	r23, 0x00	; 0
    2ce8:	38 d1       	rcall	.+624    	; 0x2f5a <memset>
    2cea:	ce 01       	movw	r24, r28
    2cec:	df 91       	pop	r29
    2cee:	cf 91       	pop	r28
    2cf0:	1f 91       	pop	r17
    2cf2:	0f 91       	pop	r16
    2cf4:	08 95       	ret

00002cf6 <malloc>:
    2cf6:	cf 93       	push	r28
    2cf8:	df 93       	push	r29
    2cfa:	82 30       	cpi	r24, 0x02	; 2
    2cfc:	91 05       	cpc	r25, r1
    2cfe:	10 f4       	brcc	.+4      	; 0x2d04 <malloc+0xe>
    2d00:	82 e0       	ldi	r24, 0x02	; 2
    2d02:	90 e0       	ldi	r25, 0x00	; 0
    2d04:	e0 91 68 17 	lds	r30, 0x1768
    2d08:	f0 91 69 17 	lds	r31, 0x1769
    2d0c:	20 e0       	ldi	r18, 0x00	; 0
    2d0e:	30 e0       	ldi	r19, 0x00	; 0
    2d10:	a0 e0       	ldi	r26, 0x00	; 0
    2d12:	b0 e0       	ldi	r27, 0x00	; 0
    2d14:	30 97       	sbiw	r30, 0x00	; 0
    2d16:	39 f1       	breq	.+78     	; 0x2d66 <malloc+0x70>
    2d18:	40 81       	ld	r20, Z
    2d1a:	51 81       	ldd	r21, Z+1	; 0x01
    2d1c:	48 17       	cp	r20, r24
    2d1e:	59 07       	cpc	r21, r25
    2d20:	b8 f0       	brcs	.+46     	; 0x2d50 <malloc+0x5a>
    2d22:	48 17       	cp	r20, r24
    2d24:	59 07       	cpc	r21, r25
    2d26:	71 f4       	brne	.+28     	; 0x2d44 <malloc+0x4e>
    2d28:	82 81       	ldd	r24, Z+2	; 0x02
    2d2a:	93 81       	ldd	r25, Z+3	; 0x03
    2d2c:	10 97       	sbiw	r26, 0x00	; 0
    2d2e:	29 f0       	breq	.+10     	; 0x2d3a <malloc+0x44>
    2d30:	13 96       	adiw	r26, 0x03	; 3
    2d32:	9c 93       	st	X, r25
    2d34:	8e 93       	st	-X, r24
    2d36:	12 97       	sbiw	r26, 0x02	; 2
    2d38:	2c c0       	rjmp	.+88     	; 0x2d92 <malloc+0x9c>
    2d3a:	90 93 69 17 	sts	0x1769, r25
    2d3e:	80 93 68 17 	sts	0x1768, r24
    2d42:	27 c0       	rjmp	.+78     	; 0x2d92 <malloc+0x9c>
    2d44:	21 15       	cp	r18, r1
    2d46:	31 05       	cpc	r19, r1
    2d48:	31 f0       	breq	.+12     	; 0x2d56 <malloc+0x60>
    2d4a:	42 17       	cp	r20, r18
    2d4c:	53 07       	cpc	r21, r19
    2d4e:	18 f0       	brcs	.+6      	; 0x2d56 <malloc+0x60>
    2d50:	a9 01       	movw	r20, r18
    2d52:	db 01       	movw	r26, r22
    2d54:	01 c0       	rjmp	.+2      	; 0x2d58 <malloc+0x62>
    2d56:	ef 01       	movw	r28, r30
    2d58:	9a 01       	movw	r18, r20
    2d5a:	bd 01       	movw	r22, r26
    2d5c:	df 01       	movw	r26, r30
    2d5e:	02 80       	ldd	r0, Z+2	; 0x02
    2d60:	f3 81       	ldd	r31, Z+3	; 0x03
    2d62:	e0 2d       	mov	r30, r0
    2d64:	d7 cf       	rjmp	.-82     	; 0x2d14 <malloc+0x1e>
    2d66:	21 15       	cp	r18, r1
    2d68:	31 05       	cpc	r19, r1
    2d6a:	f9 f0       	breq	.+62     	; 0x2daa <malloc+0xb4>
    2d6c:	28 1b       	sub	r18, r24
    2d6e:	39 0b       	sbc	r19, r25
    2d70:	24 30       	cpi	r18, 0x04	; 4
    2d72:	31 05       	cpc	r19, r1
    2d74:	80 f4       	brcc	.+32     	; 0x2d96 <malloc+0xa0>
    2d76:	8a 81       	ldd	r24, Y+2	; 0x02
    2d78:	9b 81       	ldd	r25, Y+3	; 0x03
    2d7a:	61 15       	cp	r22, r1
    2d7c:	71 05       	cpc	r23, r1
    2d7e:	21 f0       	breq	.+8      	; 0x2d88 <malloc+0x92>
    2d80:	fb 01       	movw	r30, r22
    2d82:	93 83       	std	Z+3, r25	; 0x03
    2d84:	82 83       	std	Z+2, r24	; 0x02
    2d86:	04 c0       	rjmp	.+8      	; 0x2d90 <malloc+0x9a>
    2d88:	90 93 69 17 	sts	0x1769, r25
    2d8c:	80 93 68 17 	sts	0x1768, r24
    2d90:	fe 01       	movw	r30, r28
    2d92:	32 96       	adiw	r30, 0x02	; 2
    2d94:	44 c0       	rjmp	.+136    	; 0x2e1e <malloc+0x128>
    2d96:	fe 01       	movw	r30, r28
    2d98:	e2 0f       	add	r30, r18
    2d9a:	f3 1f       	adc	r31, r19
    2d9c:	81 93       	st	Z+, r24
    2d9e:	91 93       	st	Z+, r25
    2da0:	22 50       	subi	r18, 0x02	; 2
    2da2:	31 09       	sbc	r19, r1
    2da4:	39 83       	std	Y+1, r19	; 0x01
    2da6:	28 83       	st	Y, r18
    2da8:	3a c0       	rjmp	.+116    	; 0x2e1e <malloc+0x128>
    2daa:	20 91 66 17 	lds	r18, 0x1766
    2dae:	30 91 67 17 	lds	r19, 0x1767
    2db2:	23 2b       	or	r18, r19
    2db4:	41 f4       	brne	.+16     	; 0x2dc6 <malloc+0xd0>
    2db6:	20 91 04 02 	lds	r18, 0x0204
    2dba:	30 91 05 02 	lds	r19, 0x0205
    2dbe:	30 93 67 17 	sts	0x1767, r19
    2dc2:	20 93 66 17 	sts	0x1766, r18
    2dc6:	20 91 02 02 	lds	r18, 0x0202
    2dca:	30 91 03 02 	lds	r19, 0x0203
    2dce:	21 15       	cp	r18, r1
    2dd0:	31 05       	cpc	r19, r1
    2dd2:	41 f4       	brne	.+16     	; 0x2de4 <malloc+0xee>
    2dd4:	2d b7       	in	r18, 0x3d	; 61
    2dd6:	3e b7       	in	r19, 0x3e	; 62
    2dd8:	40 91 06 02 	lds	r20, 0x0206
    2ddc:	50 91 07 02 	lds	r21, 0x0207
    2de0:	24 1b       	sub	r18, r20
    2de2:	35 0b       	sbc	r19, r21
    2de4:	e0 91 66 17 	lds	r30, 0x1766
    2de8:	f0 91 67 17 	lds	r31, 0x1767
    2dec:	e2 17       	cp	r30, r18
    2dee:	f3 07       	cpc	r31, r19
    2df0:	a0 f4       	brcc	.+40     	; 0x2e1a <malloc+0x124>
    2df2:	2e 1b       	sub	r18, r30
    2df4:	3f 0b       	sbc	r19, r31
    2df6:	28 17       	cp	r18, r24
    2df8:	39 07       	cpc	r19, r25
    2dfa:	78 f0       	brcs	.+30     	; 0x2e1a <malloc+0x124>
    2dfc:	ac 01       	movw	r20, r24
    2dfe:	4e 5f       	subi	r20, 0xFE	; 254
    2e00:	5f 4f       	sbci	r21, 0xFF	; 255
    2e02:	24 17       	cp	r18, r20
    2e04:	35 07       	cpc	r19, r21
    2e06:	48 f0       	brcs	.+18     	; 0x2e1a <malloc+0x124>
    2e08:	4e 0f       	add	r20, r30
    2e0a:	5f 1f       	adc	r21, r31
    2e0c:	50 93 67 17 	sts	0x1767, r21
    2e10:	40 93 66 17 	sts	0x1766, r20
    2e14:	81 93       	st	Z+, r24
    2e16:	91 93       	st	Z+, r25
    2e18:	02 c0       	rjmp	.+4      	; 0x2e1e <malloc+0x128>
    2e1a:	e0 e0       	ldi	r30, 0x00	; 0
    2e1c:	f0 e0       	ldi	r31, 0x00	; 0
    2e1e:	cf 01       	movw	r24, r30
    2e20:	df 91       	pop	r29
    2e22:	cf 91       	pop	r28
    2e24:	08 95       	ret

00002e26 <free>:
    2e26:	cf 93       	push	r28
    2e28:	df 93       	push	r29
    2e2a:	00 97       	sbiw	r24, 0x00	; 0
    2e2c:	09 f4       	brne	.+2      	; 0x2e30 <free+0xa>
    2e2e:	87 c0       	rjmp	.+270    	; 0x2f3e <free+0x118>
    2e30:	fc 01       	movw	r30, r24
    2e32:	32 97       	sbiw	r30, 0x02	; 2
    2e34:	13 82       	std	Z+3, r1	; 0x03
    2e36:	12 82       	std	Z+2, r1	; 0x02
    2e38:	c0 91 68 17 	lds	r28, 0x1768
    2e3c:	d0 91 69 17 	lds	r29, 0x1769
    2e40:	20 97       	sbiw	r28, 0x00	; 0
    2e42:	81 f4       	brne	.+32     	; 0x2e64 <free+0x3e>
    2e44:	20 81       	ld	r18, Z
    2e46:	31 81       	ldd	r19, Z+1	; 0x01
    2e48:	28 0f       	add	r18, r24
    2e4a:	39 1f       	adc	r19, r25
    2e4c:	80 91 66 17 	lds	r24, 0x1766
    2e50:	90 91 67 17 	lds	r25, 0x1767
    2e54:	82 17       	cp	r24, r18
    2e56:	93 07       	cpc	r25, r19
    2e58:	79 f5       	brne	.+94     	; 0x2eb8 <free+0x92>
    2e5a:	f0 93 67 17 	sts	0x1767, r31
    2e5e:	e0 93 66 17 	sts	0x1766, r30
    2e62:	6d c0       	rjmp	.+218    	; 0x2f3e <free+0x118>
    2e64:	de 01       	movw	r26, r28
    2e66:	20 e0       	ldi	r18, 0x00	; 0
    2e68:	30 e0       	ldi	r19, 0x00	; 0
    2e6a:	ae 17       	cp	r26, r30
    2e6c:	bf 07       	cpc	r27, r31
    2e6e:	50 f4       	brcc	.+20     	; 0x2e84 <free+0x5e>
    2e70:	12 96       	adiw	r26, 0x02	; 2
    2e72:	4d 91       	ld	r20, X+
    2e74:	5c 91       	ld	r21, X
    2e76:	13 97       	sbiw	r26, 0x03	; 3
    2e78:	9d 01       	movw	r18, r26
    2e7a:	41 15       	cp	r20, r1
    2e7c:	51 05       	cpc	r21, r1
    2e7e:	09 f1       	breq	.+66     	; 0x2ec2 <free+0x9c>
    2e80:	da 01       	movw	r26, r20
    2e82:	f3 cf       	rjmp	.-26     	; 0x2e6a <free+0x44>
    2e84:	b3 83       	std	Z+3, r27	; 0x03
    2e86:	a2 83       	std	Z+2, r26	; 0x02
    2e88:	40 81       	ld	r20, Z
    2e8a:	51 81       	ldd	r21, Z+1	; 0x01
    2e8c:	84 0f       	add	r24, r20
    2e8e:	95 1f       	adc	r25, r21
    2e90:	8a 17       	cp	r24, r26
    2e92:	9b 07       	cpc	r25, r27
    2e94:	71 f4       	brne	.+28     	; 0x2eb2 <free+0x8c>
    2e96:	8d 91       	ld	r24, X+
    2e98:	9c 91       	ld	r25, X
    2e9a:	11 97       	sbiw	r26, 0x01	; 1
    2e9c:	84 0f       	add	r24, r20
    2e9e:	95 1f       	adc	r25, r21
    2ea0:	02 96       	adiw	r24, 0x02	; 2
    2ea2:	91 83       	std	Z+1, r25	; 0x01
    2ea4:	80 83       	st	Z, r24
    2ea6:	12 96       	adiw	r26, 0x02	; 2
    2ea8:	8d 91       	ld	r24, X+
    2eaa:	9c 91       	ld	r25, X
    2eac:	13 97       	sbiw	r26, 0x03	; 3
    2eae:	93 83       	std	Z+3, r25	; 0x03
    2eb0:	82 83       	std	Z+2, r24	; 0x02
    2eb2:	21 15       	cp	r18, r1
    2eb4:	31 05       	cpc	r19, r1
    2eb6:	29 f4       	brne	.+10     	; 0x2ec2 <free+0x9c>
    2eb8:	f0 93 69 17 	sts	0x1769, r31
    2ebc:	e0 93 68 17 	sts	0x1768, r30
    2ec0:	3e c0       	rjmp	.+124    	; 0x2f3e <free+0x118>
    2ec2:	d9 01       	movw	r26, r18
    2ec4:	13 96       	adiw	r26, 0x03	; 3
    2ec6:	fc 93       	st	X, r31
    2ec8:	ee 93       	st	-X, r30
    2eca:	12 97       	sbiw	r26, 0x02	; 2
    2ecc:	4d 91       	ld	r20, X+
    2ece:	5d 91       	ld	r21, X+
    2ed0:	a4 0f       	add	r26, r20
    2ed2:	b5 1f       	adc	r27, r21
    2ed4:	ea 17       	cp	r30, r26
    2ed6:	fb 07       	cpc	r31, r27
    2ed8:	79 f4       	brne	.+30     	; 0x2ef8 <free+0xd2>
    2eda:	80 81       	ld	r24, Z
    2edc:	91 81       	ldd	r25, Z+1	; 0x01
    2ede:	84 0f       	add	r24, r20
    2ee0:	95 1f       	adc	r25, r21
    2ee2:	02 96       	adiw	r24, 0x02	; 2
    2ee4:	d9 01       	movw	r26, r18
    2ee6:	11 96       	adiw	r26, 0x01	; 1
    2ee8:	9c 93       	st	X, r25
    2eea:	8e 93       	st	-X, r24
    2eec:	82 81       	ldd	r24, Z+2	; 0x02
    2eee:	93 81       	ldd	r25, Z+3	; 0x03
    2ef0:	13 96       	adiw	r26, 0x03	; 3
    2ef2:	9c 93       	st	X, r25
    2ef4:	8e 93       	st	-X, r24
    2ef6:	12 97       	sbiw	r26, 0x02	; 2
    2ef8:	e0 e0       	ldi	r30, 0x00	; 0
    2efa:	f0 e0       	ldi	r31, 0x00	; 0
    2efc:	8a 81       	ldd	r24, Y+2	; 0x02
    2efe:	9b 81       	ldd	r25, Y+3	; 0x03
    2f00:	00 97       	sbiw	r24, 0x00	; 0
    2f02:	19 f0       	breq	.+6      	; 0x2f0a <free+0xe4>
    2f04:	fe 01       	movw	r30, r28
    2f06:	ec 01       	movw	r28, r24
    2f08:	f9 cf       	rjmp	.-14     	; 0x2efc <free+0xd6>
    2f0a:	ce 01       	movw	r24, r28
    2f0c:	02 96       	adiw	r24, 0x02	; 2
    2f0e:	28 81       	ld	r18, Y
    2f10:	39 81       	ldd	r19, Y+1	; 0x01
    2f12:	82 0f       	add	r24, r18
    2f14:	93 1f       	adc	r25, r19
    2f16:	20 91 66 17 	lds	r18, 0x1766
    2f1a:	30 91 67 17 	lds	r19, 0x1767
    2f1e:	28 17       	cp	r18, r24
    2f20:	39 07       	cpc	r19, r25
    2f22:	69 f4       	brne	.+26     	; 0x2f3e <free+0x118>
    2f24:	30 97       	sbiw	r30, 0x00	; 0
    2f26:	29 f4       	brne	.+10     	; 0x2f32 <free+0x10c>
    2f28:	10 92 69 17 	sts	0x1769, r1
    2f2c:	10 92 68 17 	sts	0x1768, r1
    2f30:	02 c0       	rjmp	.+4      	; 0x2f36 <free+0x110>
    2f32:	13 82       	std	Z+3, r1	; 0x03
    2f34:	12 82       	std	Z+2, r1	; 0x02
    2f36:	d0 93 67 17 	sts	0x1767, r29
    2f3a:	c0 93 66 17 	sts	0x1766, r28
    2f3e:	df 91       	pop	r29
    2f40:	cf 91       	pop	r28
    2f42:	08 95       	ret

00002f44 <strnlen_P>:
    2f44:	fc 01       	movw	r30, r24
    2f46:	05 90       	lpm	r0, Z+
    2f48:	61 50       	subi	r22, 0x01	; 1
    2f4a:	70 40       	sbci	r23, 0x00	; 0
    2f4c:	01 10       	cpse	r0, r1
    2f4e:	d8 f7       	brcc	.-10     	; 0x2f46 <strnlen_P+0x2>
    2f50:	80 95       	com	r24
    2f52:	90 95       	com	r25
    2f54:	8e 0f       	add	r24, r30
    2f56:	9f 1f       	adc	r25, r31
    2f58:	08 95       	ret

00002f5a <memset>:
    2f5a:	dc 01       	movw	r26, r24
    2f5c:	01 c0       	rjmp	.+2      	; 0x2f60 <memset+0x6>
    2f5e:	6d 93       	st	X+, r22
    2f60:	41 50       	subi	r20, 0x01	; 1
    2f62:	50 40       	sbci	r21, 0x00	; 0
    2f64:	e0 f7       	brcc	.-8      	; 0x2f5e <memset+0x4>
    2f66:	08 95       	ret

00002f68 <strnlen>:
    2f68:	fc 01       	movw	r30, r24
    2f6a:	61 50       	subi	r22, 0x01	; 1
    2f6c:	70 40       	sbci	r23, 0x00	; 0
    2f6e:	01 90       	ld	r0, Z+
    2f70:	01 10       	cpse	r0, r1
    2f72:	d8 f7       	brcc	.-10     	; 0x2f6a <strnlen+0x2>
    2f74:	80 95       	com	r24
    2f76:	90 95       	com	r25
    2f78:	8e 0f       	add	r24, r30
    2f7a:	9f 1f       	adc	r25, r31
    2f7c:	08 95       	ret

00002f7e <fputc>:
    2f7e:	0f 93       	push	r16
    2f80:	1f 93       	push	r17
    2f82:	cf 93       	push	r28
    2f84:	df 93       	push	r29
    2f86:	18 2f       	mov	r17, r24
    2f88:	09 2f       	mov	r16, r25
    2f8a:	eb 01       	movw	r28, r22
    2f8c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f8e:	81 fd       	sbrc	r24, 1
    2f90:	03 c0       	rjmp	.+6      	; 0x2f98 <fputc+0x1a>
    2f92:	8f ef       	ldi	r24, 0xFF	; 255
    2f94:	9f ef       	ldi	r25, 0xFF	; 255
    2f96:	20 c0       	rjmp	.+64     	; 0x2fd8 <fputc+0x5a>
    2f98:	82 ff       	sbrs	r24, 2
    2f9a:	10 c0       	rjmp	.+32     	; 0x2fbc <fputc+0x3e>
    2f9c:	4e 81       	ldd	r20, Y+6	; 0x06
    2f9e:	5f 81       	ldd	r21, Y+7	; 0x07
    2fa0:	2c 81       	ldd	r18, Y+4	; 0x04
    2fa2:	3d 81       	ldd	r19, Y+5	; 0x05
    2fa4:	42 17       	cp	r20, r18
    2fa6:	53 07       	cpc	r21, r19
    2fa8:	7c f4       	brge	.+30     	; 0x2fc8 <fputc+0x4a>
    2faa:	e8 81       	ld	r30, Y
    2fac:	f9 81       	ldd	r31, Y+1	; 0x01
    2fae:	9f 01       	movw	r18, r30
    2fb0:	2f 5f       	subi	r18, 0xFF	; 255
    2fb2:	3f 4f       	sbci	r19, 0xFF	; 255
    2fb4:	39 83       	std	Y+1, r19	; 0x01
    2fb6:	28 83       	st	Y, r18
    2fb8:	10 83       	st	Z, r17
    2fba:	06 c0       	rjmp	.+12     	; 0x2fc8 <fputc+0x4a>
    2fbc:	e8 85       	ldd	r30, Y+8	; 0x08
    2fbe:	f9 85       	ldd	r31, Y+9	; 0x09
    2fc0:	81 2f       	mov	r24, r17
    2fc2:	19 95       	eicall
    2fc4:	89 2b       	or	r24, r25
    2fc6:	29 f7       	brne	.-54     	; 0x2f92 <fputc+0x14>
    2fc8:	2e 81       	ldd	r18, Y+6	; 0x06
    2fca:	3f 81       	ldd	r19, Y+7	; 0x07
    2fcc:	2f 5f       	subi	r18, 0xFF	; 255
    2fce:	3f 4f       	sbci	r19, 0xFF	; 255
    2fd0:	3f 83       	std	Y+7, r19	; 0x07
    2fd2:	2e 83       	std	Y+6, r18	; 0x06
    2fd4:	81 2f       	mov	r24, r17
    2fd6:	90 2f       	mov	r25, r16
    2fd8:	df 91       	pop	r29
    2fda:	cf 91       	pop	r28
    2fdc:	1f 91       	pop	r17
    2fde:	0f 91       	pop	r16
    2fe0:	08 95       	ret

00002fe2 <__ultoa_invert>:
    2fe2:	fa 01       	movw	r30, r20
    2fe4:	aa 27       	eor	r26, r26
    2fe6:	28 30       	cpi	r18, 0x08	; 8
    2fe8:	51 f1       	breq	.+84     	; 0x303e <__ultoa_invert+0x5c>
    2fea:	20 31       	cpi	r18, 0x10	; 16
    2fec:	81 f1       	breq	.+96     	; 0x304e <__ultoa_invert+0x6c>
    2fee:	e8 94       	clt
    2ff0:	6f 93       	push	r22
    2ff2:	6e 7f       	andi	r22, 0xFE	; 254
    2ff4:	6e 5f       	subi	r22, 0xFE	; 254
    2ff6:	7f 4f       	sbci	r23, 0xFF	; 255
    2ff8:	8f 4f       	sbci	r24, 0xFF	; 255
    2ffa:	9f 4f       	sbci	r25, 0xFF	; 255
    2ffc:	af 4f       	sbci	r26, 0xFF	; 255
    2ffe:	b1 e0       	ldi	r27, 0x01	; 1
    3000:	3e d0       	rcall	.+124    	; 0x307e <__ultoa_invert+0x9c>
    3002:	b4 e0       	ldi	r27, 0x04	; 4
    3004:	3c d0       	rcall	.+120    	; 0x307e <__ultoa_invert+0x9c>
    3006:	67 0f       	add	r22, r23
    3008:	78 1f       	adc	r23, r24
    300a:	89 1f       	adc	r24, r25
    300c:	9a 1f       	adc	r25, r26
    300e:	a1 1d       	adc	r26, r1
    3010:	68 0f       	add	r22, r24
    3012:	79 1f       	adc	r23, r25
    3014:	8a 1f       	adc	r24, r26
    3016:	91 1d       	adc	r25, r1
    3018:	a1 1d       	adc	r26, r1
    301a:	6a 0f       	add	r22, r26
    301c:	71 1d       	adc	r23, r1
    301e:	81 1d       	adc	r24, r1
    3020:	91 1d       	adc	r25, r1
    3022:	a1 1d       	adc	r26, r1
    3024:	20 d0       	rcall	.+64     	; 0x3066 <__ultoa_invert+0x84>
    3026:	09 f4       	brne	.+2      	; 0x302a <__ultoa_invert+0x48>
    3028:	68 94       	set
    302a:	3f 91       	pop	r19
    302c:	2a e0       	ldi	r18, 0x0A	; 10
    302e:	26 9f       	mul	r18, r22
    3030:	11 24       	eor	r1, r1
    3032:	30 19       	sub	r19, r0
    3034:	30 5d       	subi	r19, 0xD0	; 208
    3036:	31 93       	st	Z+, r19
    3038:	de f6       	brtc	.-74     	; 0x2ff0 <__ultoa_invert+0xe>
    303a:	cf 01       	movw	r24, r30
    303c:	08 95       	ret
    303e:	46 2f       	mov	r20, r22
    3040:	47 70       	andi	r20, 0x07	; 7
    3042:	40 5d       	subi	r20, 0xD0	; 208
    3044:	41 93       	st	Z+, r20
    3046:	b3 e0       	ldi	r27, 0x03	; 3
    3048:	0f d0       	rcall	.+30     	; 0x3068 <__ultoa_invert+0x86>
    304a:	c9 f7       	brne	.-14     	; 0x303e <__ultoa_invert+0x5c>
    304c:	f6 cf       	rjmp	.-20     	; 0x303a <__ultoa_invert+0x58>
    304e:	46 2f       	mov	r20, r22
    3050:	4f 70       	andi	r20, 0x0F	; 15
    3052:	40 5d       	subi	r20, 0xD0	; 208
    3054:	4a 33       	cpi	r20, 0x3A	; 58
    3056:	18 f0       	brcs	.+6      	; 0x305e <__ultoa_invert+0x7c>
    3058:	49 5d       	subi	r20, 0xD9	; 217
    305a:	31 fd       	sbrc	r19, 1
    305c:	40 52       	subi	r20, 0x20	; 32
    305e:	41 93       	st	Z+, r20
    3060:	02 d0       	rcall	.+4      	; 0x3066 <__ultoa_invert+0x84>
    3062:	a9 f7       	brne	.-22     	; 0x304e <__ultoa_invert+0x6c>
    3064:	ea cf       	rjmp	.-44     	; 0x303a <__ultoa_invert+0x58>
    3066:	b4 e0       	ldi	r27, 0x04	; 4
    3068:	a6 95       	lsr	r26
    306a:	97 95       	ror	r25
    306c:	87 95       	ror	r24
    306e:	77 95       	ror	r23
    3070:	67 95       	ror	r22
    3072:	ba 95       	dec	r27
    3074:	c9 f7       	brne	.-14     	; 0x3068 <__ultoa_invert+0x86>
    3076:	00 97       	sbiw	r24, 0x00	; 0
    3078:	61 05       	cpc	r22, r1
    307a:	71 05       	cpc	r23, r1
    307c:	08 95       	ret
    307e:	9b 01       	movw	r18, r22
    3080:	ac 01       	movw	r20, r24
    3082:	0a 2e       	mov	r0, r26
    3084:	06 94       	lsr	r0
    3086:	57 95       	ror	r21
    3088:	47 95       	ror	r20
    308a:	37 95       	ror	r19
    308c:	27 95       	ror	r18
    308e:	ba 95       	dec	r27
    3090:	c9 f7       	brne	.-14     	; 0x3084 <__ultoa_invert+0xa2>
    3092:	62 0f       	add	r22, r18
    3094:	73 1f       	adc	r23, r19
    3096:	84 1f       	adc	r24, r20
    3098:	95 1f       	adc	r25, r21
    309a:	a0 1d       	adc	r26, r0
    309c:	08 95       	ret

0000309e <_exit>:
    309e:	f8 94       	cli

000030a0 <__stop_program>:
    30a0:	ff cf       	rjmp	.-2      	; 0x30a0 <__stop_program>


GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000730  00800200  00002abc  00002b50  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002abc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000394  00800930  00800930  00003280  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003280  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000178  00000000  00000000  000032dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000004bb  00000000  00000000  00003454  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000275c  00000000  00000000  0000390f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ae3  00000000  00000000  0000606b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001897  00000000  00000000  00006b4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000708  00000000  00000000  000083e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b2a  00000000  00000000  00008af0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000015fe  00000000  00000000  0000961a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  0000ac18  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	65 c0       	rjmp	.+202    	; 0xcc <__ctors_end>
       2:	00 00       	nop
       4:	84 c0       	rjmp	.+264    	; 0x10e <__bad_interrupt>
       6:	00 00       	nop
       8:	82 c0       	rjmp	.+260    	; 0x10e <__bad_interrupt>
       a:	00 00       	nop
       c:	80 c0       	rjmp	.+256    	; 0x10e <__bad_interrupt>
       e:	00 00       	nop
      10:	7e c0       	rjmp	.+252    	; 0x10e <__bad_interrupt>
      12:	00 00       	nop
      14:	7c c0       	rjmp	.+248    	; 0x10e <__bad_interrupt>
      16:	00 00       	nop
      18:	7a c0       	rjmp	.+244    	; 0x10e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	78 c0       	rjmp	.+240    	; 0x10e <__bad_interrupt>
      1e:	00 00       	nop
      20:	76 c0       	rjmp	.+236    	; 0x10e <__bad_interrupt>
      22:	00 00       	nop
      24:	74 c0       	rjmp	.+232    	; 0x10e <__bad_interrupt>
      26:	00 00       	nop
      28:	72 c0       	rjmp	.+228    	; 0x10e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	70 c0       	rjmp	.+224    	; 0x10e <__bad_interrupt>
      2e:	00 00       	nop
      30:	6e c0       	rjmp	.+220    	; 0x10e <__bad_interrupt>
      32:	00 00       	nop
      34:	6c c0       	rjmp	.+216    	; 0x10e <__bad_interrupt>
      36:	00 00       	nop
      38:	6a c0       	rjmp	.+212    	; 0x10e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	68 c0       	rjmp	.+208    	; 0x10e <__bad_interrupt>
      3e:	00 00       	nop
      40:	66 c0       	rjmp	.+204    	; 0x10e <__bad_interrupt>
      42:	00 00       	nop
      44:	64 c0       	rjmp	.+200    	; 0x10e <__bad_interrupt>
      46:	00 00       	nop
      48:	62 c0       	rjmp	.+196    	; 0x10e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	60 c0       	rjmp	.+192    	; 0x10e <__bad_interrupt>
      4e:	00 00       	nop
      50:	5e c0       	rjmp	.+188    	; 0x10e <__bad_interrupt>
      52:	00 00       	nop
      54:	5c c0       	rjmp	.+184    	; 0x10e <__bad_interrupt>
      56:	00 00       	nop
      58:	5a c0       	rjmp	.+180    	; 0x10e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	58 c0       	rjmp	.+176    	; 0x10e <__bad_interrupt>
      5e:	00 00       	nop
      60:	56 c0       	rjmp	.+172    	; 0x10e <__bad_interrupt>
      62:	00 00       	nop
      64:	24 c4       	rjmp	.+2120   	; 0x8ae <__vector_25>
      66:	00 00       	nop
      68:	52 c0       	rjmp	.+164    	; 0x10e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	50 c0       	rjmp	.+160    	; 0x10e <__bad_interrupt>
      6e:	00 00       	nop
      70:	4e c0       	rjmp	.+156    	; 0x10e <__bad_interrupt>
      72:	00 00       	nop
      74:	4c c0       	rjmp	.+152    	; 0x10e <__bad_interrupt>
      76:	00 00       	nop
      78:	4a c0       	rjmp	.+148    	; 0x10e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	48 c0       	rjmp	.+144    	; 0x10e <__bad_interrupt>
      7e:	00 00       	nop
      80:	46 c0       	rjmp	.+140    	; 0x10e <__bad_interrupt>
      82:	00 00       	nop
      84:	44 c0       	rjmp	.+136    	; 0x10e <__bad_interrupt>
      86:	00 00       	nop
      88:	42 c0       	rjmp	.+132    	; 0x10e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	40 c0       	rjmp	.+128    	; 0x10e <__bad_interrupt>
      8e:	00 00       	nop
      90:	13 c5       	rjmp	.+2598   	; 0xab8 <__vector_36>
      92:	00 00       	nop
      94:	3c c0       	rjmp	.+120    	; 0x10e <__bad_interrupt>
      96:	00 00       	nop
      98:	3a c0       	rjmp	.+116    	; 0x10e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	38 c0       	rjmp	.+112    	; 0x10e <__bad_interrupt>
      9e:	00 00       	nop
      a0:	36 c0       	rjmp	.+108    	; 0x10e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	34 c0       	rjmp	.+104    	; 0x10e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	32 c0       	rjmp	.+100    	; 0x10e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	30 c0       	rjmp	.+96     	; 0x10e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	2e c0       	rjmp	.+92     	; 0x10e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	2c c0       	rjmp	.+88     	; 0x10e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	2a c0       	rjmp	.+84     	; 0x10e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	28 c0       	rjmp	.+80     	; 0x10e <__bad_interrupt>
      be:	00 00       	nop
      c0:	26 c0       	rjmp	.+76     	; 0x10e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	24 c0       	rjmp	.+72     	; 0x10e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	22 c0       	rjmp	.+68     	; 0x10e <__bad_interrupt>
	...

000000cc <__ctors_end>:
      cc:	11 24       	eor	r1, r1
      ce:	1f be       	out	0x3f, r1	; 63
      d0:	cf ef       	ldi	r28, 0xFF	; 255
      d2:	d1 e2       	ldi	r29, 0x21	; 33
      d4:	de bf       	out	0x3e, r29	; 62
      d6:	cd bf       	out	0x3d, r28	; 61
      d8:	00 e0       	ldi	r16, 0x00	; 0
      da:	0c bf       	out	0x3c, r16	; 60

000000dc <__do_copy_data>:
      dc:	19 e0       	ldi	r17, 0x09	; 9
      de:	a0 e0       	ldi	r26, 0x00	; 0
      e0:	b2 e0       	ldi	r27, 0x02	; 2
      e2:	ec eb       	ldi	r30, 0xBC	; 188
      e4:	fa e2       	ldi	r31, 0x2A	; 42
      e6:	00 e0       	ldi	r16, 0x00	; 0
      e8:	0b bf       	out	0x3b, r16	; 59
      ea:	02 c0       	rjmp	.+4      	; 0xf0 <__do_copy_data+0x14>
      ec:	07 90       	elpm	r0, Z+
      ee:	0d 92       	st	X+, r0
      f0:	a0 33       	cpi	r26, 0x30	; 48
      f2:	b1 07       	cpc	r27, r17
      f4:	d9 f7       	brne	.-10     	; 0xec <__do_copy_data+0x10>

000000f6 <__do_clear_bss>:
      f6:	2c e0       	ldi	r18, 0x0C	; 12
      f8:	a0 e3       	ldi	r26, 0x30	; 48
      fa:	b9 e0       	ldi	r27, 0x09	; 9
      fc:	01 c0       	rjmp	.+2      	; 0x100 <.do_clear_bss_start>

000000fe <.do_clear_bss_loop>:
      fe:	1d 92       	st	X+, r1

00000100 <.do_clear_bss_start>:
     100:	a4 3c       	cpi	r26, 0xC4	; 196
     102:	b2 07       	cpc	r27, r18
     104:	e1 f7       	brne	.-8      	; 0xfe <.do_clear_bss_loop>
     106:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <main>
     10a:	0c 94 5c 15 	jmp	0x2ab8	; 0x2ab8 <_exit>

0000010e <__bad_interrupt>:
     10e:	78 cf       	rjmp	.-272    	; 0x0 <__vectors>

00000110 <dxl_get_result>:
     110:	80 91 00 02 	lds	r24, 0x0200
     114:	90 91 01 02 	lds	r25, 0x0201
     118:	08 95       	ret

0000011a <dxl_set_txpacket_id>:
     11a:	80 93 32 09 	sts	0x0932, r24
     11e:	08 95       	ret

00000120 <dxl_set_txpacket_instruction>:
     120:	80 93 34 09 	sts	0x0934, r24
     124:	08 95       	ret

00000126 <dxl_set_txpacket_parameter>:
     126:	fc 01       	movw	r30, r24
     128:	e0 5d       	subi	r30, 0xD0	; 208
     12a:	f6 4f       	sbci	r31, 0xF6	; 246
     12c:	65 83       	std	Z+5, r22	; 0x05
     12e:	08 95       	ret

00000130 <dxl_set_txpacket_length>:
     130:	80 93 33 09 	sts	0x0933, r24
     134:	08 95       	ret

00000136 <dxl_get_rxpacket_error>:
     136:	20 e0       	ldi	r18, 0x00	; 0
     138:	30 e0       	ldi	r19, 0x00	; 0
     13a:	90 91 d4 09 	lds	r25, 0x09D4
     13e:	98 23       	and	r25, r24
     140:	11 f0       	breq	.+4      	; 0x146 <dxl_get_rxpacket_error+0x10>
     142:	21 e0       	ldi	r18, 0x01	; 1
     144:	30 e0       	ldi	r19, 0x00	; 0
     146:	c9 01       	movw	r24, r18
     148:	08 95       	ret

0000014a <dxl_get_rxpacket_length>:
     14a:	80 91 d3 09 	lds	r24, 0x09D3
     14e:	90 e0       	ldi	r25, 0x00	; 0
     150:	08 95       	ret

00000152 <dxl_get_rxpacket_parameter>:
     152:	fc 01       	movw	r30, r24
     154:	e0 53       	subi	r30, 0x30	; 48
     156:	f6 4f       	sbci	r31, 0xF6	; 246
     158:	85 81       	ldd	r24, Z+5	; 0x05
     15a:	90 e0       	ldi	r25, 0x00	; 0
     15c:	08 95       	ret

0000015e <dxl_makeword>:
     15e:	36 2f       	mov	r19, r22
     160:	20 e0       	ldi	r18, 0x00	; 0
     162:	28 0f       	add	r18, r24
     164:	39 1f       	adc	r19, r25
     166:	c9 01       	movw	r24, r18
     168:	08 95       	ret

0000016a <dxl_get_lowbyte>:
     16a:	28 2f       	mov	r18, r24
     16c:	30 e0       	ldi	r19, 0x00	; 0
     16e:	c9 01       	movw	r24, r18
     170:	08 95       	ret

00000172 <dxl_get_highbyte>:
     172:	80 70       	andi	r24, 0x00	; 0
     174:	89 2f       	mov	r24, r25
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	08 95       	ret

0000017a <dxl_rx_packet>:
     17a:	0f 93       	push	r16
     17c:	1f 93       	push	r17
     17e:	cf 93       	push	r28
     180:	df 93       	push	r29
     182:	80 91 18 0a 	lds	r24, 0x0A18
     186:	90 91 19 0a 	lds	r25, 0x0A19
     18a:	89 2b       	or	r24, r25
     18c:	09 f4       	brne	.+2      	; 0x190 <dxl_rx_packet+0x16>
     18e:	b8 c0       	rjmp	.+368    	; 0x300 <dxl_rx_packet+0x186>
     190:	80 91 32 09 	lds	r24, 0x0932
     194:	8e 3f       	cpi	r24, 0xFE	; 254
     196:	09 f4       	brne	.+2      	; 0x19a <dxl_rx_packet+0x20>
     198:	a9 c0       	rjmp	.+338    	; 0x2ec <dxl_rx_packet+0x172>
     19a:	80 91 00 02 	lds	r24, 0x0200
     19e:	90 91 01 02 	lds	r25, 0x0201
     1a2:	89 2b       	or	r24, r25
     1a4:	29 f4       	brne	.+10     	; 0x1b0 <dxl_rx_packet+0x36>
     1a6:	10 92 17 0a 	sts	0x0A17, r1
     1aa:	86 e0       	ldi	r24, 0x06	; 6
     1ac:	80 93 16 0a 	sts	0x0A16, r24
     1b0:	80 91 17 0a 	lds	r24, 0x0A17
     1b4:	90 e0       	ldi	r25, 0x00	; 0
     1b6:	60 91 16 0a 	lds	r22, 0x0A16
     1ba:	70 e0       	ldi	r23, 0x00	; 0
     1bc:	68 1b       	sub	r22, r24
     1be:	79 0b       	sbc	r23, r25
     1c0:	80 53       	subi	r24, 0x30	; 48
     1c2:	96 4f       	sbci	r25, 0xF6	; 246
     1c4:	49 d3       	rcall	.+1682   	; 0x858 <dxl_hal_rx>
     1c6:	90 91 17 0a 	lds	r25, 0x0A17
     1ca:	98 0f       	add	r25, r24
     1cc:	90 93 17 0a 	sts	0x0A17, r25
     1d0:	80 91 16 0a 	lds	r24, 0x0A16
     1d4:	98 17       	cp	r25, r24
     1d6:	18 f4       	brcc	.+6      	; 0x1de <dxl_rx_packet+0x64>
     1d8:	4a d2       	rcall	.+1172   	; 0x66e <dxl_hal_timeout>
     1da:	01 97       	sbiw	r24, 0x01	; 1
     1dc:	71 f0       	breq	.+28     	; 0x1fa <dxl_rx_packet+0x80>
     1de:	70 91 17 0a 	lds	r23, 0x0A17
     1e2:	47 2f       	mov	r20, r23
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	da 01       	movw	r26, r20
     1e8:	11 97       	sbiw	r26, 0x01	; 1
     1ea:	8a 01       	movw	r16, r20
     1ec:	02 50       	subi	r16, 0x02	; 2
     1ee:	10 40       	sbci	r17, 0x00	; 0
     1f0:	60 e0       	ldi	r22, 0x00	; 0
     1f2:	ed 01       	movw	r28, r26
     1f4:	c0 53       	subi	r28, 0x30	; 48
     1f6:	d6 4f       	sbci	r29, 0xF6	; 246
     1f8:	18 c0       	rjmp	.+48     	; 0x22a <dxl_rx_packet+0xb0>
     1fa:	80 91 17 0a 	lds	r24, 0x0A17
     1fe:	88 23       	and	r24, r24
     200:	09 f0       	breq	.+2      	; 0x204 <dxl_rx_packet+0x8a>
     202:	71 c0       	rjmp	.+226    	; 0x2e6 <dxl_rx_packet+0x16c>
     204:	86 e0       	ldi	r24, 0x06	; 6
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	73 c0       	rjmp	.+230    	; 0x2f0 <dxl_rx_packet+0x176>
     20a:	f9 01       	movw	r30, r18
     20c:	e0 53       	subi	r30, 0x30	; 48
     20e:	f6 4f       	sbci	r31, 0xF6	; 246
     210:	80 81       	ld	r24, Z
     212:	8f 3f       	cpi	r24, 0xFF	; 255
     214:	19 f4       	brne	.+6      	; 0x21c <dxl_rx_packet+0xa2>
     216:	81 81       	ldd	r24, Z+1	; 0x01
     218:	8f 3f       	cpi	r24, 0xFF	; 255
     21a:	61 f0       	breq	.+24     	; 0x234 <dxl_rx_packet+0xba>
     21c:	20 17       	cp	r18, r16
     21e:	31 07       	cpc	r19, r17
     220:	19 f4       	brne	.+6      	; 0x228 <dxl_rx_packet+0xae>
     222:	88 81       	ld	r24, Y
     224:	8f 3f       	cpi	r24, 0xFF	; 255
     226:	31 f0       	breq	.+12     	; 0x234 <dxl_rx_packet+0xba>
     228:	6f 5f       	subi	r22, 0xFF	; 255
     22a:	26 2f       	mov	r18, r22
     22c:	30 e0       	ldi	r19, 0x00	; 0
     22e:	2a 17       	cp	r18, r26
     230:	3b 07       	cpc	r19, r27
     232:	5c f3       	brlt	.-42     	; 0x20a <dxl_rx_packet+0x90>
     234:	66 23       	and	r22, r22
     236:	a1 f0       	breq	.+40     	; 0x260 <dxl_rx_packet+0xe6>
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	42 1b       	sub	r20, r18
     23c:	53 0b       	sbc	r21, r19
     23e:	08 c0       	rjmp	.+16     	; 0x250 <dxl_rx_packet+0xd6>
     240:	e0 53       	subi	r30, 0x30	; 48
     242:	f6 4f       	sbci	r31, 0xF6	; 246
     244:	df 01       	movw	r26, r30
     246:	a2 0f       	add	r26, r18
     248:	b3 1f       	adc	r27, r19
     24a:	8c 91       	ld	r24, X
     24c:	80 83       	st	Z, r24
     24e:	9f 5f       	subi	r25, 0xFF	; 255
     250:	e9 2f       	mov	r30, r25
     252:	f0 e0       	ldi	r31, 0x00	; 0
     254:	e4 17       	cp	r30, r20
     256:	f5 07       	cpc	r31, r21
     258:	9c f3       	brlt	.-26     	; 0x240 <dxl_rx_packet+0xc6>
     25a:	76 1b       	sub	r23, r22
     25c:	70 93 17 0a 	sts	0x0A17, r23
     260:	20 91 17 0a 	lds	r18, 0x0A17
     264:	80 91 16 0a 	lds	r24, 0x0A16
     268:	28 17       	cp	r18, r24
     26a:	28 f1       	brcs	.+74     	; 0x2b6 <dxl_rx_packet+0x13c>
     26c:	90 91 32 09 	lds	r25, 0x0932
     270:	80 91 d2 09 	lds	r24, 0x09D2
     274:	98 17       	cp	r25, r24
     276:	b9 f5       	brne	.+110    	; 0x2e6 <dxl_rx_packet+0x16c>
     278:	60 91 d3 09 	lds	r22, 0x09D3
     27c:	6c 5f       	subi	r22, 0xFC	; 252
     27e:	60 93 16 0a 	sts	0x0A16, r22
     282:	26 17       	cp	r18, r22
     284:	88 f4       	brcc	.+34     	; 0x2a8 <dxl_rx_packet+0x12e>
     286:	82 2f       	mov	r24, r18
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	70 e0       	ldi	r23, 0x00	; 0
     28c:	68 1b       	sub	r22, r24
     28e:	79 0b       	sbc	r23, r25
     290:	80 53       	subi	r24, 0x30	; 48
     292:	96 4f       	sbci	r25, 0xF6	; 246
     294:	e1 d2       	rcall	.+1474   	; 0x858 <dxl_hal_rx>
     296:	90 91 17 0a 	lds	r25, 0x0A17
     29a:	98 0f       	add	r25, r24
     29c:	90 93 17 0a 	sts	0x0A17, r25
     2a0:	80 91 16 0a 	lds	r24, 0x0A16
     2a4:	98 17       	cp	r25, r24
     2a6:	38 f0       	brcs	.+14     	; 0x2b6 <dxl_rx_packet+0x13c>
     2a8:	80 91 d3 09 	lds	r24, 0x09D3
     2ac:	a8 2f       	mov	r26, r24
     2ae:	b0 e0       	ldi	r27, 0x00	; 0
     2b0:	20 e0       	ldi	r18, 0x00	; 0
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	0c c0       	rjmp	.+24     	; 0x2ce <dxl_rx_packet+0x154>
     2b6:	85 e0       	ldi	r24, 0x05	; 5
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	90 93 01 02 	sts	0x0201, r25
     2be:	80 93 00 02 	sts	0x0200, r24
     2c2:	1e c0       	rjmp	.+60     	; 0x300 <dxl_rx_packet+0x186>
     2c4:	e0 53       	subi	r30, 0x30	; 48
     2c6:	f6 4f       	sbci	r31, 0xF6	; 246
     2c8:	82 81       	ldd	r24, Z+2	; 0x02
     2ca:	98 0f       	add	r25, r24
     2cc:	2f 5f       	subi	r18, 0xFF	; 255
     2ce:	e2 2f       	mov	r30, r18
     2d0:	f0 e0       	ldi	r31, 0x00	; 0
     2d2:	ae 17       	cp	r26, r30
     2d4:	bf 07       	cpc	r27, r31
     2d6:	b4 f7       	brge	.-20     	; 0x2c4 <dxl_rx_packet+0x14a>
     2d8:	a0 53       	subi	r26, 0x30	; 48
     2da:	b6 4f       	sbci	r27, 0xF6	; 246
     2dc:	90 95       	com	r25
     2de:	13 96       	adiw	r26, 0x03	; 3
     2e0:	8c 91       	ld	r24, X
     2e2:	89 17       	cp	r24, r25
     2e4:	19 f0       	breq	.+6      	; 0x2ec <dxl_rx_packet+0x172>
     2e6:	87 e0       	ldi	r24, 0x07	; 7
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <dxl_rx_packet+0x176>
     2ec:	81 e0       	ldi	r24, 0x01	; 1
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	90 93 01 02 	sts	0x0201, r25
     2f4:	80 93 00 02 	sts	0x0200, r24
     2f8:	10 92 19 0a 	sts	0x0A19, r1
     2fc:	10 92 18 0a 	sts	0x0A18, r1
     300:	df 91       	pop	r29
     302:	cf 91       	pop	r28
     304:	1f 91       	pop	r17
     306:	0f 91       	pop	r16
     308:	08 95       	ret

0000030a <dxl_tx_packet>:
     30a:	1f 93       	push	r17
     30c:	80 91 18 0a 	lds	r24, 0x0A18
     310:	90 91 19 0a 	lds	r25, 0x0A19
     314:	01 97       	sbiw	r24, 0x01	; 1
     316:	09 f4       	brne	.+2      	; 0x31a <dxl_tx_packet+0x10>
     318:	5d c0       	rjmp	.+186    	; 0x3d4 <dxl_tx_packet+0xca>
     31a:	81 e0       	ldi	r24, 0x01	; 1
     31c:	90 e0       	ldi	r25, 0x00	; 0
     31e:	90 93 19 0a 	sts	0x0A19, r25
     322:	80 93 18 0a 	sts	0x0A18, r24
     326:	80 91 33 09 	lds	r24, 0x0933
     32a:	89 39       	cpi	r24, 0x99	; 153
     32c:	40 f4       	brcc	.+16     	; 0x33e <dxl_tx_packet+0x34>
     32e:	90 91 34 09 	lds	r25, 0x0934
     332:	89 2f       	mov	r24, r25
     334:	81 50       	subi	r24, 0x01	; 1
     336:	86 30       	cpi	r24, 0x06	; 6
     338:	28 f0       	brcs	.+10     	; 0x344 <dxl_tx_packet+0x3a>
     33a:	93 38       	cpi	r25, 0x83	; 131
     33c:	19 f0       	breq	.+6      	; 0x344 <dxl_tx_packet+0x3a>
     33e:	84 e0       	ldi	r24, 0x04	; 4
     340:	90 e0       	ldi	r25, 0x00	; 0
     342:	2f c0       	rjmp	.+94     	; 0x3a2 <dxl_tx_packet+0x98>
     344:	8f ef       	ldi	r24, 0xFF	; 255
     346:	80 93 30 09 	sts	0x0930, r24
     34a:	80 93 31 09 	sts	0x0931, r24
     34e:	80 91 33 09 	lds	r24, 0x0933
     352:	a8 2f       	mov	r26, r24
     354:	b0 e0       	ldi	r27, 0x00	; 0
     356:	20 e0       	ldi	r18, 0x00	; 0
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	05 c0       	rjmp	.+10     	; 0x366 <dxl_tx_packet+0x5c>
     35c:	e0 5d       	subi	r30, 0xD0	; 208
     35e:	f6 4f       	sbci	r31, 0xF6	; 246
     360:	82 81       	ldd	r24, Z+2	; 0x02
     362:	98 0f       	add	r25, r24
     364:	2f 5f       	subi	r18, 0xFF	; 255
     366:	e2 2f       	mov	r30, r18
     368:	f0 e0       	ldi	r31, 0x00	; 0
     36a:	ae 17       	cp	r26, r30
     36c:	bf 07       	cpc	r27, r31
     36e:	b4 f7       	brge	.-20     	; 0x35c <dxl_tx_packet+0x52>
     370:	a0 5d       	subi	r26, 0xD0	; 208
     372:	b6 4f       	sbci	r27, 0xF6	; 246
     374:	90 95       	com	r25
     376:	13 96       	adiw	r26, 0x03	; 3
     378:	9c 93       	st	X, r25
     37a:	80 91 00 02 	lds	r24, 0x0200
     37e:	90 91 01 02 	lds	r25, 0x0201
     382:	06 97       	sbiw	r24, 0x06	; 6
     384:	02 97       	sbiw	r24, 0x02	; 2
     386:	08 f4       	brcc	.+2      	; 0x38a <dxl_tx_packet+0x80>
     388:	38 d1       	rcall	.+624    	; 0x5fa <dxl_hal_clear>
     38a:	10 91 33 09 	lds	r17, 0x0933
     38e:	1c 5f       	subi	r17, 0xFC	; 252
     390:	80 e3       	ldi	r24, 0x30	; 48
     392:	99 e0       	ldi	r25, 0x09	; 9
     394:	61 2f       	mov	r22, r17
     396:	70 e0       	ldi	r23, 0x00	; 0
     398:	35 d1       	rcall	.+618    	; 0x604 <dxl_hal_tx>
     39a:	18 17       	cp	r17, r24
     39c:	59 f0       	breq	.+22     	; 0x3b4 <dxl_tx_packet+0xaa>
     39e:	82 e0       	ldi	r24, 0x02	; 2
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	90 93 01 02 	sts	0x0201, r25
     3a6:	80 93 00 02 	sts	0x0200, r24
     3aa:	10 92 19 0a 	sts	0x0A19, r1
     3ae:	10 92 18 0a 	sts	0x0A18, r1
     3b2:	10 c0       	rjmp	.+32     	; 0x3d4 <dxl_tx_packet+0xca>
     3b4:	80 91 34 09 	lds	r24, 0x0934
     3b8:	82 30       	cpi	r24, 0x02	; 2
     3ba:	29 f4       	brne	.+10     	; 0x3c6 <dxl_tx_packet+0xbc>
     3bc:	80 91 36 09 	lds	r24, 0x0936
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	06 96       	adiw	r24, 0x06	; 6
     3c4:	02 c0       	rjmp	.+4      	; 0x3ca <dxl_tx_packet+0xc0>
     3c6:	86 e0       	ldi	r24, 0x06	; 6
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	40 d1       	rcall	.+640    	; 0x64c <dxl_hal_set_timeout>
     3cc:	10 92 01 02 	sts	0x0201, r1
     3d0:	10 92 00 02 	sts	0x0200, r1
     3d4:	1f 91       	pop	r17
     3d6:	08 95       	ret

000003d8 <dxl_txrx_packet>:
     3d8:	98 df       	rcall	.-208    	; 0x30a <dxl_tx_packet>
     3da:	80 91 00 02 	lds	r24, 0x0200
     3de:	90 91 01 02 	lds	r25, 0x0201
     3e2:	89 2b       	or	r24, r25
     3e4:	39 f4       	brne	.+14     	; 0x3f4 <dxl_txrx_packet+0x1c>
     3e6:	c9 de       	rcall	.-622    	; 0x17a <dxl_rx_packet>
     3e8:	80 91 00 02 	lds	r24, 0x0200
     3ec:	90 91 01 02 	lds	r25, 0x0201
     3f0:	05 97       	sbiw	r24, 0x05	; 5
     3f2:	c9 f3       	breq	.-14     	; 0x3e6 <dxl_txrx_packet+0xe>
     3f4:	08 95       	ret

000003f6 <dxl_write_word>:
     3f6:	28 2f       	mov	r18, r24
     3f8:	80 91 18 0a 	lds	r24, 0x0A18
     3fc:	90 91 19 0a 	lds	r25, 0x0A19
     400:	89 2b       	or	r24, r25
     402:	91 f4       	brne	.+36     	; 0x428 <dxl_write_word+0x32>
     404:	20 93 32 09 	sts	0x0932, r18
     408:	83 e0       	ldi	r24, 0x03	; 3
     40a:	80 93 34 09 	sts	0x0934, r24
     40e:	60 93 35 09 	sts	0x0935, r22
     412:	ca 01       	movw	r24, r20
     414:	40 93 36 09 	sts	0x0936, r20
     418:	80 70       	andi	r24, 0x00	; 0
     41a:	90 93 37 09 	sts	0x0937, r25
     41e:	85 e0       	ldi	r24, 0x05	; 5
     420:	80 93 33 09 	sts	0x0933, r24
     424:	d9 cf       	rjmp	.-78     	; 0x3d8 <dxl_txrx_packet>
     426:	08 95       	ret
     428:	ff cf       	rjmp	.-2      	; 0x428 <dxl_write_word+0x32>

0000042a <dxl_read_word>:
     42a:	28 2f       	mov	r18, r24
     42c:	80 91 18 0a 	lds	r24, 0x0A18
     430:	90 91 19 0a 	lds	r25, 0x0A19
     434:	89 2b       	or	r24, r25
     436:	b1 f4       	brne	.+44     	; 0x464 <dxl_read_word+0x3a>
     438:	20 93 32 09 	sts	0x0932, r18
     43c:	82 e0       	ldi	r24, 0x02	; 2
     43e:	80 93 34 09 	sts	0x0934, r24
     442:	60 93 35 09 	sts	0x0935, r22
     446:	80 93 36 09 	sts	0x0936, r24
     44a:	84 e0       	ldi	r24, 0x04	; 4
     44c:	80 93 33 09 	sts	0x0933, r24
     450:	c3 df       	rcall	.-122    	; 0x3d8 <dxl_txrx_packet>
     452:	30 91 d6 09 	lds	r19, 0x09D6
     456:	20 e0       	ldi	r18, 0x00	; 0
     458:	80 91 d5 09 	lds	r24, 0x09D5
     45c:	28 0f       	add	r18, r24
     45e:	31 1d       	adc	r19, r1
     460:	c9 01       	movw	r24, r18
     462:	08 95       	ret
     464:	ff cf       	rjmp	.-2      	; 0x464 <dxl_read_word+0x3a>

00000466 <dxl_write_byte>:
     466:	28 2f       	mov	r18, r24
     468:	80 91 18 0a 	lds	r24, 0x0A18
     46c:	90 91 19 0a 	lds	r25, 0x0A19
     470:	89 2b       	or	r24, r25
     472:	71 f4       	brne	.+28     	; 0x490 <dxl_write_byte+0x2a>
     474:	20 93 32 09 	sts	0x0932, r18
     478:	83 e0       	ldi	r24, 0x03	; 3
     47a:	80 93 34 09 	sts	0x0934, r24
     47e:	60 93 35 09 	sts	0x0935, r22
     482:	40 93 36 09 	sts	0x0936, r20
     486:	84 e0       	ldi	r24, 0x04	; 4
     488:	80 93 33 09 	sts	0x0933, r24
     48c:	a5 cf       	rjmp	.-182    	; 0x3d8 <dxl_txrx_packet>
     48e:	08 95       	ret
     490:	ff cf       	rjmp	.-2      	; 0x490 <dxl_write_byte+0x2a>

00000492 <dxl_read_byte>:
     492:	28 2f       	mov	r18, r24
     494:	80 91 18 0a 	lds	r24, 0x0A18
     498:	90 91 19 0a 	lds	r25, 0x0A19
     49c:	89 2b       	or	r24, r25
     49e:	91 f4       	brne	.+36     	; 0x4c4 <dxl_read_byte+0x32>
     4a0:	20 93 32 09 	sts	0x0932, r18
     4a4:	82 e0       	ldi	r24, 0x02	; 2
     4a6:	80 93 34 09 	sts	0x0934, r24
     4aa:	60 93 35 09 	sts	0x0935, r22
     4ae:	81 e0       	ldi	r24, 0x01	; 1
     4b0:	80 93 36 09 	sts	0x0936, r24
     4b4:	84 e0       	ldi	r24, 0x04	; 4
     4b6:	80 93 33 09 	sts	0x0933, r24
     4ba:	8e df       	rcall	.-228    	; 0x3d8 <dxl_txrx_packet>
     4bc:	80 91 d5 09 	lds	r24, 0x09D5
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	08 95       	ret
     4c4:	ff cf       	rjmp	.-2      	; 0x4c4 <dxl_read_byte+0x32>

000004c6 <dxl_ping>:
     4c6:	28 2f       	mov	r18, r24
     4c8:	80 91 18 0a 	lds	r24, 0x0A18
     4cc:	90 91 19 0a 	lds	r25, 0x0A19
     4d0:	89 2b       	or	r24, r25
     4d2:	51 f4       	brne	.+20     	; 0x4e8 <dxl_ping+0x22>
     4d4:	20 93 32 09 	sts	0x0932, r18
     4d8:	81 e0       	ldi	r24, 0x01	; 1
     4da:	80 93 34 09 	sts	0x0934, r24
     4de:	82 e0       	ldi	r24, 0x02	; 2
     4e0:	80 93 33 09 	sts	0x0933, r24
     4e4:	79 cf       	rjmp	.-270    	; 0x3d8 <dxl_txrx_packet>
     4e6:	08 95       	ret
     4e8:	ff cf       	rjmp	.-2      	; 0x4e8 <dxl_ping+0x22>

000004ea <dxl_terminate>:
     4ea:	86 c0       	rjmp	.+268    	; 0x5f8 <dxl_hal_close>
     4ec:	08 95       	ret

000004ee <dxl_initialize>:
     4ee:	0f 93       	push	r16
     4f0:	1f 93       	push	r17
     4f2:	8c 01       	movw	r16, r24
     4f4:	6f 5f       	subi	r22, 0xFF	; 255
     4f6:	7f 4f       	sbci	r23, 0xFF	; 255
     4f8:	88 27       	eor	r24, r24
     4fa:	77 fd       	sbrc	r23, 7
     4fc:	80 95       	com	r24
     4fe:	98 2f       	mov	r25, r24
     500:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <__floatsisf>
     504:	9b 01       	movw	r18, r22
     506:	ac 01       	movw	r20, r24
     508:	60 e0       	ldi	r22, 0x00	; 0
     50a:	74 e2       	ldi	r23, 0x24	; 36
     50c:	84 ef       	ldi	r24, 0xF4	; 244
     50e:	99 e4       	ldi	r25, 0x49	; 73
     510:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <__divsf3>
     514:	ab 01       	movw	r20, r22
     516:	bc 01       	movw	r22, r24
     518:	c8 01       	movw	r24, r16
     51a:	15 d0       	rcall	.+42     	; 0x546 <dxl_hal_open>
     51c:	89 2b       	or	r24, r25
     51e:	19 f4       	brne	.+6      	; 0x526 <dxl_initialize+0x38>
     520:	20 e0       	ldi	r18, 0x00	; 0
     522:	30 e0       	ldi	r19, 0x00	; 0
     524:	0c c0       	rjmp	.+24     	; 0x53e <dxl_initialize+0x50>
     526:	81 e0       	ldi	r24, 0x01	; 1
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	90 93 01 02 	sts	0x0201, r25
     52e:	80 93 00 02 	sts	0x0200, r24
     532:	10 92 19 0a 	sts	0x0A19, r1
     536:	10 92 18 0a 	sts	0x0A18, r1
     53a:	21 e0       	ldi	r18, 0x01	; 1
     53c:	30 e0       	ldi	r19, 0x00	; 0
     53e:	c9 01       	movw	r24, r18
     540:	1f 91       	pop	r17
     542:	0f 91       	pop	r16
     544:	08 95       	ret

00000546 <dxl_hal_open>:
     546:	ef 92       	push	r14
     548:	ff 92       	push	r15
     54a:	0f 93       	push	r16
     54c:	1f 93       	push	r17
     54e:	7a 01       	movw	r14, r20
     550:	8b 01       	movw	r16, r22
     552:	82 e4       	ldi	r24, 0x42	; 66
     554:	80 93 c0 00 	sts	0x00C0, r24
     558:	88 e9       	ldi	r24, 0x98	; 152
     55a:	80 93 c1 00 	sts	0x00C1, r24
     55e:	86 e0       	ldi	r24, 0x06	; 6
     560:	80 93 c2 00 	sts	0x00C2, r24
     564:	60 e0       	ldi	r22, 0x00	; 0
     566:	74 e2       	ldi	r23, 0x24	; 36
     568:	84 ef       	ldi	r24, 0xF4	; 244
     56a:	99 e4       	ldi	r25, 0x49	; 73
     56c:	a8 01       	movw	r20, r16
     56e:	97 01       	movw	r18, r14
     570:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <__divsf3>
     574:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <__fixunssfsi>
     578:	61 50       	subi	r22, 0x01	; 1
     57a:	70 40       	sbci	r23, 0x00	; 0
     57c:	70 93 c5 00 	sts	0x00C5, r23
     580:	60 93 c4 00 	sts	0x00C4, r22
     584:	60 e0       	ldi	r22, 0x00	; 0
     586:	74 e2       	ldi	r23, 0x24	; 36
     588:	84 e7       	ldi	r24, 0x74	; 116
     58a:	99 e4       	ldi	r25, 0x49	; 73
     58c:	a8 01       	movw	r20, r16
     58e:	97 01       	movw	r18, r14
     590:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <__divsf3>
     594:	20 e0       	ldi	r18, 0x00	; 0
     596:	30 e0       	ldi	r19, 0x00	; 0
     598:	40 e4       	ldi	r20, 0x40	; 64
     59a:	51 e4       	ldi	r21, 0x41	; 65
     59c:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <__mulsf3>
     5a0:	60 93 b2 0c 	sts	0x0CB2, r22
     5a4:	70 93 b3 0c 	sts	0x0CB3, r23
     5a8:	80 93 b4 0c 	sts	0x0CB4, r24
     5ac:	90 93 b5 0c 	sts	0x0CB5, r25
     5b0:	20 91 b2 0c 	lds	r18, 0x0CB2
     5b4:	30 91 b3 0c 	lds	r19, 0x0CB3
     5b8:	40 91 b4 0c 	lds	r20, 0x0CB4
     5bc:	50 91 b5 0c 	lds	r21, 0x0CB5
     5c0:	60 e0       	ldi	r22, 0x00	; 0
     5c2:	70 e0       	ldi	r23, 0x00	; 0
     5c4:	8a e7       	ldi	r24, 0x7A	; 122
     5c6:	93 e4       	ldi	r25, 0x43	; 67
     5c8:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <__divsf3>
     5cc:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <__fixunssfsi>
     5d0:	70 93 b1 0c 	sts	0x0CB1, r23
     5d4:	60 93 b0 0c 	sts	0x0CB0, r22
     5d8:	72 98       	cbi	0x0e, 2	; 14
     5da:	73 9a       	sbi	0x0e, 3	; 14
     5dc:	8f ef       	ldi	r24, 0xFF	; 255
     5de:	80 93 c6 00 	sts	0x00C6, r24
     5e2:	10 92 1a 0b 	sts	0x0B1A, r1
     5e6:	10 92 1b 0b 	sts	0x0B1B, r1
     5ea:	81 e0       	ldi	r24, 0x01	; 1
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	1f 91       	pop	r17
     5f0:	0f 91       	pop	r16
     5f2:	ff 90       	pop	r15
     5f4:	ef 90       	pop	r14
     5f6:	08 95       	ret

000005f8 <dxl_hal_close>:
     5f8:	08 95       	ret

000005fa <dxl_hal_clear>:
     5fa:	80 91 1b 0b 	lds	r24, 0x0B1B
     5fe:	80 93 1a 0b 	sts	0x0B1A, r24
     602:	08 95       	ret

00000604 <dxl_hal_tx>:
     604:	ac 01       	movw	r20, r24
     606:	f8 94       	cli
     608:	73 98       	cbi	0x0e, 3	; 14
     60a:	72 9a       	sbi	0x0e, 2	; 14
     60c:	20 e0       	ldi	r18, 0x00	; 0
     60e:	30 e0       	ldi	r19, 0x00	; 0
     610:	11 c0       	rjmp	.+34     	; 0x634 <dxl_hal_tx+0x30>
     612:	80 91 c0 00 	lds	r24, 0x00C0
     616:	85 ff       	sbrs	r24, 5
     618:	fc cf       	rjmp	.-8      	; 0x612 <dxl_hal_tx+0xe>
     61a:	80 91 c0 00 	lds	r24, 0x00C0
     61e:	80 64       	ori	r24, 0x40	; 64
     620:	80 93 c0 00 	sts	0x00C0, r24
     624:	fa 01       	movw	r30, r20
     626:	e2 0f       	add	r30, r18
     628:	f3 1f       	adc	r31, r19
     62a:	80 81       	ld	r24, Z
     62c:	80 93 c6 00 	sts	0x00C6, r24
     630:	2f 5f       	subi	r18, 0xFF	; 255
     632:	3f 4f       	sbci	r19, 0xFF	; 255
     634:	26 17       	cp	r18, r22
     636:	37 07       	cpc	r19, r23
     638:	64 f3       	brlt	.-40     	; 0x612 <dxl_hal_tx+0xe>
     63a:	80 91 c0 00 	lds	r24, 0x00C0
     63e:	86 ff       	sbrs	r24, 6
     640:	fc cf       	rjmp	.-8      	; 0x63a <dxl_hal_tx+0x36>
     642:	72 98       	cbi	0x0e, 2	; 14
     644:	73 9a       	sbi	0x0e, 3	; 14
     646:	78 94       	sei
     648:	c9 01       	movw	r24, r18
     64a:	08 95       	ret

0000064c <dxl_hal_set_timeout>:
     64c:	10 92 b9 0c 	sts	0x0CB9, r1
     650:	10 92 b8 0c 	sts	0x0CB8, r1
     654:	20 91 b0 0c 	lds	r18, 0x0CB0
     658:	30 91 b1 0c 	lds	r19, 0x0CB1
     65c:	26 5f       	subi	r18, 0xF6	; 246
     65e:	3f 4f       	sbci	r19, 0xFF	; 255
     660:	28 0f       	add	r18, r24
     662:	39 1f       	adc	r19, r25
     664:	30 93 b7 0c 	sts	0x0CB7, r19
     668:	20 93 b6 0c 	sts	0x0CB6, r18
     66c:	08 95       	ret

0000066e <dxl_hal_timeout>:
     66e:	af 92       	push	r10
     670:	bf 92       	push	r11
     672:	cf 92       	push	r12
     674:	df 92       	push	r13
     676:	ef 92       	push	r14
     678:	ff 92       	push	r15
     67a:	0f 93       	push	r16
     67c:	1f 93       	push	r17
     67e:	80 91 b8 0c 	lds	r24, 0x0CB8
     682:	90 91 b9 0c 	lds	r25, 0x0CB9
     686:	01 96       	adiw	r24, 0x01	; 1
     688:	90 93 b9 0c 	sts	0x0CB9, r25
     68c:	80 93 b8 0c 	sts	0x0CB8, r24
     690:	20 91 b8 0c 	lds	r18, 0x0CB8
     694:	30 91 b9 0c 	lds	r19, 0x0CB9
     698:	80 91 b6 0c 	lds	r24, 0x0CB6
     69c:	90 91 b7 0c 	lds	r25, 0x0CB7
     6a0:	82 17       	cp	r24, r18
     6a2:	93 07       	cpc	r25, r19
     6a4:	18 f4       	brcc	.+6      	; 0x6ac <dxl_hal_timeout+0x3e>
     6a6:	21 e0       	ldi	r18, 0x01	; 1
     6a8:	30 e0       	ldi	r19, 0x00	; 0
     6aa:	74 c0       	rjmp	.+232    	; 0x794 <dxl_hal_timeout+0x126>
     6ac:	a0 90 b2 0c 	lds	r10, 0x0CB2
     6b0:	b0 90 b3 0c 	lds	r11, 0x0CB3
     6b4:	c0 90 b4 0c 	lds	r12, 0x0CB4
     6b8:	d0 90 b5 0c 	lds	r13, 0x0CB5
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     6bc:	c6 01       	movw	r24, r12
     6be:	b5 01       	movw	r22, r10
     6c0:	2b ea       	ldi	r18, 0xAB	; 171
     6c2:	3a ea       	ldi	r19, 0xAA	; 170
     6c4:	4a ea       	ldi	r20, 0xAA	; 170
     6c6:	50 e4       	ldi	r21, 0x40	; 64
     6c8:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <__mulsf3>
     6cc:	7b 01       	movw	r14, r22
     6ce:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     6d0:	20 e0       	ldi	r18, 0x00	; 0
     6d2:	30 e0       	ldi	r19, 0x00	; 0
     6d4:	40 e8       	ldi	r20, 0x80	; 128
     6d6:	5f e3       	ldi	r21, 0x3F	; 63
     6d8:	0e 94 18 10 	call	0x2030	; 0x2030 <__cmpsf2>
     6dc:	88 23       	and	r24, r24
     6de:	14 f4       	brge	.+4      	; 0x6e4 <dxl_hal_timeout+0x76>
     6e0:	61 e0       	ldi	r22, 0x01	; 1
     6e2:	54 c0       	rjmp	.+168    	; 0x78c <dxl_hal_timeout+0x11e>
		__ticks = 1;
	else if (__tmp > 255)
     6e4:	c8 01       	movw	r24, r16
     6e6:	b7 01       	movw	r22, r14
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	4f e7       	ldi	r20, 0x7F	; 127
     6ee:	53 e4       	ldi	r21, 0x43	; 67
     6f0:	0e 94 40 10 	call	0x2080	; 0x2080 <__gesf2>
     6f4:	18 16       	cp	r1, r24
     6f6:	0c f0       	brlt	.+2      	; 0x6fa <dxl_hal_timeout+0x8c>
     6f8:	45 c0       	rjmp	.+138    	; 0x784 <dxl_hal_timeout+0x116>
	{
		_delay_ms(__us / 1000.0);
     6fa:	c6 01       	movw	r24, r12
     6fc:	b5 01       	movw	r22, r10
     6fe:	20 e0       	ldi	r18, 0x00	; 0
     700:	30 e0       	ldi	r19, 0x00	; 0
     702:	4a e7       	ldi	r20, 0x7A	; 122
     704:	54 e4       	ldi	r21, 0x44	; 68
     706:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <__divsf3>
     70a:	5b 01       	movw	r10, r22
     70c:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     70e:	20 e0       	ldi	r18, 0x00	; 0
     710:	30 e0       	ldi	r19, 0x00	; 0
     712:	4a e7       	ldi	r20, 0x7A	; 122
     714:	55 e4       	ldi	r21, 0x45	; 69
     716:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <__mulsf3>
     71a:	7b 01       	movw	r14, r22
     71c:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     71e:	20 e0       	ldi	r18, 0x00	; 0
     720:	30 e0       	ldi	r19, 0x00	; 0
     722:	40 e8       	ldi	r20, 0x80	; 128
     724:	5f e3       	ldi	r21, 0x3F	; 63
     726:	0e 94 18 10 	call	0x2030	; 0x2030 <__cmpsf2>
     72a:	88 23       	and	r24, r24
     72c:	1c f4       	brge	.+6      	; 0x734 <dxl_hal_timeout+0xc6>
     72e:	61 e0       	ldi	r22, 0x01	; 1
     730:	70 e0       	ldi	r23, 0x00	; 0
     732:	24 c0       	rjmp	.+72     	; 0x77c <dxl_hal_timeout+0x10e>
		__ticks = 1;
	else if (__tmp > 65535)
     734:	c8 01       	movw	r24, r16
     736:	b7 01       	movw	r22, r14
     738:	20 e0       	ldi	r18, 0x00	; 0
     73a:	3f ef       	ldi	r19, 0xFF	; 255
     73c:	4f e7       	ldi	r20, 0x7F	; 127
     73e:	57 e4       	ldi	r21, 0x47	; 71
     740:	0e 94 40 10 	call	0x2080	; 0x2080 <__gesf2>
     744:	18 16       	cp	r1, r24
     746:	b4 f4       	brge	.+44     	; 0x774 <dxl_hal_timeout+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     748:	c6 01       	movw	r24, r12
     74a:	b5 01       	movw	r22, r10
     74c:	20 e0       	ldi	r18, 0x00	; 0
     74e:	30 e0       	ldi	r19, 0x00	; 0
     750:	40 e2       	ldi	r20, 0x20	; 32
     752:	51 e4       	ldi	r21, 0x41	; 65
     754:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <__mulsf3>
     758:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <__fixunssfsi>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     75c:	80 e9       	ldi	r24, 0x90	; 144
     75e:	91 e0       	ldi	r25, 0x01	; 1
     760:	05 c0       	rjmp	.+10     	; 0x76c <dxl_hal_timeout+0xfe>
     762:	fc 01       	movw	r30, r24
     764:	31 97       	sbiw	r30, 0x01	; 1
     766:	f1 f7       	brne	.-4      	; 0x764 <dxl_hal_timeout+0xf6>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     768:	61 50       	subi	r22, 0x01	; 1
     76a:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     76c:	61 15       	cp	r22, r1
     76e:	71 05       	cpc	r23, r1
     770:	c1 f7       	brne	.-16     	; 0x762 <dxl_hal_timeout+0xf4>
     772:	0e c0       	rjmp	.+28     	; 0x790 <dxl_hal_timeout+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     774:	c8 01       	movw	r24, r16
     776:	b7 01       	movw	r22, r14
     778:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <__fixunssfsi>
     77c:	cb 01       	movw	r24, r22
     77e:	01 97       	sbiw	r24, 0x01	; 1
     780:	f1 f7       	brne	.-4      	; 0x77e <dxl_hal_timeout+0x110>
     782:	06 c0       	rjmp	.+12     	; 0x790 <dxl_hal_timeout+0x122>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     784:	c8 01       	movw	r24, r16
     786:	b7 01       	movw	r22, r14
     788:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <__fixunssfsi>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     78c:	6a 95       	dec	r22
     78e:	f1 f7       	brne	.-4      	; 0x78c <dxl_hal_timeout+0x11e>
     790:	20 e0       	ldi	r18, 0x00	; 0
     792:	30 e0       	ldi	r19, 0x00	; 0
     794:	c9 01       	movw	r24, r18
     796:	1f 91       	pop	r17
     798:	0f 91       	pop	r16
     79a:	ff 90       	pop	r15
     79c:	ef 90       	pop	r14
     79e:	df 90       	pop	r13
     7a0:	cf 90       	pop	r12
     7a2:	bf 90       	pop	r11
     7a4:	af 90       	pop	r10
     7a6:	08 95       	ret

000007a8 <dxl_hal_get_qstate>:
     7a8:	90 91 1a 0b 	lds	r25, 0x0B1A
     7ac:	80 91 1b 0b 	lds	r24, 0x0B1B
     7b0:	98 17       	cp	r25, r24
     7b2:	19 f4       	brne	.+6      	; 0x7ba <dxl_hal_get_qstate+0x12>
     7b4:	20 e0       	ldi	r18, 0x00	; 0
     7b6:	30 e0       	ldi	r19, 0x00	; 0
     7b8:	17 c0       	rjmp	.+46     	; 0x7e8 <dxl_hal_get_qstate+0x40>
     7ba:	90 91 1a 0b 	lds	r25, 0x0B1A
     7be:	80 91 1b 0b 	lds	r24, 0x0B1B
     7c2:	98 17       	cp	r25, r24
     7c4:	38 f4       	brcc	.+14     	; 0x7d4 <dxl_hal_get_qstate+0x2c>
     7c6:	80 91 1b 0b 	lds	r24, 0x0B1B
     7ca:	90 91 1a 0b 	lds	r25, 0x0B1A
     7ce:	28 2f       	mov	r18, r24
     7d0:	30 e0       	ldi	r19, 0x00	; 0
     7d2:	08 c0       	rjmp	.+16     	; 0x7e4 <dxl_hal_get_qstate+0x3c>
     7d4:	80 91 1b 0b 	lds	r24, 0x0B1B
     7d8:	90 91 1a 0b 	lds	r25, 0x0B1A
     7dc:	28 2f       	mov	r18, r24
     7de:	30 e0       	ldi	r19, 0x00	; 0
     7e0:	20 50       	subi	r18, 0x00	; 0
     7e2:	3f 4f       	sbci	r19, 0xFF	; 255
     7e4:	29 1b       	sub	r18, r25
     7e6:	31 09       	sbc	r19, r1
     7e8:	c9 01       	movw	r24, r18
     7ea:	08 95       	ret

000007ec <dxl_hal_put_queue>:
     7ec:	1f 93       	push	r17
     7ee:	18 2f       	mov	r17, r24
     7f0:	db df       	rcall	.-74     	; 0x7a8 <dxl_hal_get_qstate>
     7f2:	8f 3f       	cpi	r24, 0xFF	; 255
     7f4:	91 05       	cpc	r25, r1
     7f6:	91 f0       	breq	.+36     	; 0x81c <dxl_hal_put_queue+0x30>
     7f8:	e0 91 1b 0b 	lds	r30, 0x0B1B
     7fc:	f0 e0       	ldi	r31, 0x00	; 0
     7fe:	e6 5e       	subi	r30, 0xE6	; 230
     800:	f5 4f       	sbci	r31, 0xF5	; 245
     802:	10 83       	st	Z, r17
     804:	80 91 1b 0b 	lds	r24, 0x0B1B
     808:	8f 3f       	cpi	r24, 0xFF	; 255
     80a:	19 f4       	brne	.+6      	; 0x812 <dxl_hal_put_queue+0x26>
     80c:	10 92 1b 0b 	sts	0x0B1B, r1
     810:	05 c0       	rjmp	.+10     	; 0x81c <dxl_hal_put_queue+0x30>
     812:	80 91 1b 0b 	lds	r24, 0x0B1B
     816:	8f 5f       	subi	r24, 0xFF	; 255
     818:	80 93 1b 0b 	sts	0x0B1B, r24
     81c:	1f 91       	pop	r17
     81e:	08 95       	ret

00000820 <dxl_hal_get_queue>:
     820:	90 91 1a 0b 	lds	r25, 0x0B1A
     824:	80 91 1b 0b 	lds	r24, 0x0B1B
     828:	98 17       	cp	r25, r24
     82a:	11 f4       	brne	.+4      	; 0x830 <dxl_hal_get_queue+0x10>
     82c:	ef ef       	ldi	r30, 0xFF	; 255
     82e:	12 c0       	rjmp	.+36     	; 0x854 <dxl_hal_get_queue+0x34>
     830:	e0 91 1a 0b 	lds	r30, 0x0B1A
     834:	f0 e0       	ldi	r31, 0x00	; 0
     836:	e6 5e       	subi	r30, 0xE6	; 230
     838:	f5 4f       	sbci	r31, 0xF5	; 245
     83a:	e0 81       	ld	r30, Z
     83c:	80 91 1a 0b 	lds	r24, 0x0B1A
     840:	8f 3f       	cpi	r24, 0xFF	; 255
     842:	19 f4       	brne	.+6      	; 0x84a <dxl_hal_get_queue+0x2a>
     844:	10 92 1a 0b 	sts	0x0B1A, r1
     848:	05 c0       	rjmp	.+10     	; 0x854 <dxl_hal_get_queue+0x34>
     84a:	80 91 1a 0b 	lds	r24, 0x0B1A
     84e:	8f 5f       	subi	r24, 0xFF	; 255
     850:	80 93 1a 0b 	sts	0x0B1A, r24
     854:	8e 2f       	mov	r24, r30
     856:	08 95       	ret

00000858 <dxl_hal_rx>:
     858:	ef 92       	push	r14
     85a:	ff 92       	push	r15
     85c:	0f 93       	push	r16
     85e:	1f 93       	push	r17
     860:	cf 93       	push	r28
     862:	df 93       	push	r29
     864:	7c 01       	movw	r14, r24
     866:	eb 01       	movw	r28, r22
     868:	90 91 1a 0b 	lds	r25, 0x0B1A
     86c:	80 91 1b 0b 	lds	r24, 0x0B1B
     870:	98 17       	cp	r25, r24
     872:	19 f4       	brne	.+6      	; 0x87a <dxl_hal_rx+0x22>
     874:	00 e0       	ldi	r16, 0x00	; 0
     876:	10 e0       	ldi	r17, 0x00	; 0
     878:	12 c0       	rjmp	.+36     	; 0x89e <dxl_hal_rx+0x46>
     87a:	96 df       	rcall	.-212    	; 0x7a8 <dxl_hal_get_qstate>
     87c:	8c 01       	movw	r16, r24
     87e:	c8 17       	cp	r28, r24
     880:	d9 07       	cpc	r29, r25
     882:	0c f4       	brge	.+2      	; 0x886 <dxl_hal_rx+0x2e>
     884:	8e 01       	movw	r16, r28
     886:	c0 e0       	ldi	r28, 0x00	; 0
     888:	d0 e0       	ldi	r29, 0x00	; 0
     88a:	06 c0       	rjmp	.+12     	; 0x898 <dxl_hal_rx+0x40>
     88c:	c9 df       	rcall	.-110    	; 0x820 <dxl_hal_get_queue>
     88e:	f7 01       	movw	r30, r14
     890:	ec 0f       	add	r30, r28
     892:	fd 1f       	adc	r31, r29
     894:	80 83       	st	Z, r24
     896:	21 96       	adiw	r28, 0x01	; 1
     898:	c0 17       	cp	r28, r16
     89a:	d1 07       	cpc	r29, r17
     89c:	bc f3       	brlt	.-18     	; 0x88c <dxl_hal_rx+0x34>
     89e:	c8 01       	movw	r24, r16
     8a0:	df 91       	pop	r29
     8a2:	cf 91       	pop	r28
     8a4:	1f 91       	pop	r17
     8a6:	0f 91       	pop	r16
     8a8:	ff 90       	pop	r15
     8aa:	ef 90       	pop	r14
     8ac:	08 95       	ret

000008ae <__vector_25>:
     8ae:	1f 92       	push	r1
     8b0:	0f 92       	push	r0
     8b2:	0f b6       	in	r0, 0x3f	; 63
     8b4:	0f 92       	push	r0
     8b6:	0b b6       	in	r0, 0x3b	; 59
     8b8:	0f 92       	push	r0
     8ba:	11 24       	eor	r1, r1
     8bc:	2f 93       	push	r18
     8be:	3f 93       	push	r19
     8c0:	4f 93       	push	r20
     8c2:	5f 93       	push	r21
     8c4:	6f 93       	push	r22
     8c6:	7f 93       	push	r23
     8c8:	8f 93       	push	r24
     8ca:	9f 93       	push	r25
     8cc:	af 93       	push	r26
     8ce:	bf 93       	push	r27
     8d0:	ef 93       	push	r30
     8d2:	ff 93       	push	r31
     8d4:	80 91 c6 00 	lds	r24, 0x00C6
     8d8:	89 df       	rcall	.-238    	; 0x7ec <dxl_hal_put_queue>
     8da:	ff 91       	pop	r31
     8dc:	ef 91       	pop	r30
     8de:	bf 91       	pop	r27
     8e0:	af 91       	pop	r26
     8e2:	9f 91       	pop	r25
     8e4:	8f 91       	pop	r24
     8e6:	7f 91       	pop	r23
     8e8:	6f 91       	pop	r22
     8ea:	5f 91       	pop	r21
     8ec:	4f 91       	pop	r20
     8ee:	3f 91       	pop	r19
     8f0:	2f 91       	pop	r18
     8f2:	0f 90       	pop	r0
     8f4:	0b be       	out	0x3b, r0	; 59
     8f6:	0f 90       	pop	r0
     8f8:	0f be       	out	0x3f, r0	; 63
     8fa:	0f 90       	pop	r0
     8fc:	1f 90       	pop	r1
     8fe:	18 95       	reti

00000900 <serial_write>:
     900:	ac 01       	movw	r20, r24
     902:	20 e0       	ldi	r18, 0x00	; 0
     904:	30 e0       	ldi	r19, 0x00	; 0
     906:	0c c0       	rjmp	.+24     	; 0x920 <serial_write+0x20>
     908:	80 91 c8 00 	lds	r24, 0x00C8
     90c:	85 ff       	sbrs	r24, 5
     90e:	fc cf       	rjmp	.-8      	; 0x908 <serial_write+0x8>
     910:	fa 01       	movw	r30, r20
     912:	e2 0f       	add	r30, r18
     914:	f3 1f       	adc	r31, r19
     916:	80 81       	ld	r24, Z
     918:	80 93 ce 00 	sts	0x00CE, r24
     91c:	2f 5f       	subi	r18, 0xFF	; 255
     91e:	3f 4f       	sbci	r19, 0xFF	; 255
     920:	26 17       	cp	r18, r22
     922:	37 07       	cpc	r19, r23
     924:	8c f3       	brlt	.-30     	; 0x908 <serial_write+0x8>
     926:	08 95       	ret

00000928 <serial_read>:
     928:	dc 01       	movw	r26, r24
     92a:	90 91 9c 0b 	lds	r25, 0x0B9C
     92e:	80 91 9d 0b 	lds	r24, 0x0B9D
     932:	98 17       	cp	r25, r24
     934:	11 f4       	brne	.+4      	; 0x93a <serial_read+0x12>
     936:	80 e0       	ldi	r24, 0x00	; 0
     938:	08 95       	ret
     93a:	90 91 9c 0b 	lds	r25, 0x0B9C
     93e:	80 91 9d 0b 	lds	r24, 0x0B9D
     942:	98 17       	cp	r25, r24
     944:	19 f4       	brne	.+6      	; 0x94c <serial_read+0x24>
     946:	20 e0       	ldi	r18, 0x00	; 0
     948:	30 e0       	ldi	r19, 0x00	; 0
     94a:	17 c0       	rjmp	.+46     	; 0x97a <serial_read+0x52>
     94c:	90 91 9c 0b 	lds	r25, 0x0B9C
     950:	80 91 9d 0b 	lds	r24, 0x0B9D
     954:	98 17       	cp	r25, r24
     956:	38 f4       	brcc	.+14     	; 0x966 <serial_read+0x3e>
     958:	80 91 9d 0b 	lds	r24, 0x0B9D
     95c:	90 91 9c 0b 	lds	r25, 0x0B9C
     960:	28 2f       	mov	r18, r24
     962:	30 e0       	ldi	r19, 0x00	; 0
     964:	08 c0       	rjmp	.+16     	; 0x976 <serial_read+0x4e>
     966:	80 91 9d 0b 	lds	r24, 0x0B9D
     96a:	90 91 9c 0b 	lds	r25, 0x0B9C
     96e:	28 2f       	mov	r18, r24
     970:	30 e0       	ldi	r19, 0x00	; 0
     972:	20 58       	subi	r18, 0x80	; 128
     974:	3f 4f       	sbci	r19, 0xFF	; 255
     976:	29 1b       	sub	r18, r25
     978:	31 09       	sbc	r19, r1
     97a:	a9 01       	movw	r20, r18
     97c:	62 17       	cp	r22, r18
     97e:	73 07       	cpc	r23, r19
     980:	0c f4       	brge	.+2      	; 0x984 <serial_read+0x5c>
     982:	ab 01       	movw	r20, r22
     984:	20 e0       	ldi	r18, 0x00	; 0
     986:	30 e0       	ldi	r19, 0x00	; 0
     988:	20 c0       	rjmp	.+64     	; 0x9ca <serial_read+0xa2>
     98a:	90 91 9c 0b 	lds	r25, 0x0B9C
     98e:	80 91 9d 0b 	lds	r24, 0x0B9D
     992:	98 17       	cp	r25, r24
     994:	11 f4       	brne	.+4      	; 0x99a <serial_read+0x72>
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	12 c0       	rjmp	.+36     	; 0x9be <serial_read+0x96>
     99a:	e0 91 9c 0b 	lds	r30, 0x0B9C
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	e4 5e       	subi	r30, 0xE4	; 228
     9a2:	f4 4f       	sbci	r31, 0xF4	; 244
     9a4:	90 81       	ld	r25, Z
     9a6:	80 91 9c 0b 	lds	r24, 0x0B9C
     9aa:	8f 37       	cpi	r24, 0x7F	; 127
     9ac:	19 f4       	brne	.+6      	; 0x9b4 <serial_read+0x8c>
     9ae:	10 92 9c 0b 	sts	0x0B9C, r1
     9b2:	05 c0       	rjmp	.+10     	; 0x9be <serial_read+0x96>
     9b4:	80 91 9c 0b 	lds	r24, 0x0B9C
     9b8:	8f 5f       	subi	r24, 0xFF	; 255
     9ba:	80 93 9c 0b 	sts	0x0B9C, r24
     9be:	fd 01       	movw	r30, r26
     9c0:	e2 0f       	add	r30, r18
     9c2:	f3 1f       	adc	r31, r19
     9c4:	90 83       	st	Z, r25
     9c6:	2f 5f       	subi	r18, 0xFF	; 255
     9c8:	3f 4f       	sbci	r19, 0xFF	; 255
     9ca:	24 17       	cp	r18, r20
     9cc:	35 07       	cpc	r19, r21
     9ce:	ec f2       	brlt	.-70     	; 0x98a <serial_read+0x62>
     9d0:	84 2f       	mov	r24, r20
     9d2:	08 95       	ret

000009d4 <serial_get_qstate>:
     9d4:	90 91 9c 0b 	lds	r25, 0x0B9C
     9d8:	80 91 9d 0b 	lds	r24, 0x0B9D
     9dc:	98 17       	cp	r25, r24
     9de:	19 f4       	brne	.+6      	; 0x9e6 <serial_get_qstate+0x12>
     9e0:	20 e0       	ldi	r18, 0x00	; 0
     9e2:	30 e0       	ldi	r19, 0x00	; 0
     9e4:	17 c0       	rjmp	.+46     	; 0xa14 <serial_get_qstate+0x40>
     9e6:	90 91 9c 0b 	lds	r25, 0x0B9C
     9ea:	80 91 9d 0b 	lds	r24, 0x0B9D
     9ee:	98 17       	cp	r25, r24
     9f0:	38 f4       	brcc	.+14     	; 0xa00 <serial_get_qstate+0x2c>
     9f2:	80 91 9d 0b 	lds	r24, 0x0B9D
     9f6:	90 91 9c 0b 	lds	r25, 0x0B9C
     9fa:	28 2f       	mov	r18, r24
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	08 c0       	rjmp	.+16     	; 0xa10 <serial_get_qstate+0x3c>
     a00:	80 91 9d 0b 	lds	r24, 0x0B9D
     a04:	90 91 9c 0b 	lds	r25, 0x0B9C
     a08:	28 2f       	mov	r18, r24
     a0a:	30 e0       	ldi	r19, 0x00	; 0
     a0c:	20 58       	subi	r18, 0x80	; 128
     a0e:	3f 4f       	sbci	r19, 0xFF	; 255
     a10:	29 1b       	sub	r18, r25
     a12:	31 09       	sbc	r19, r1
     a14:	c9 01       	movw	r24, r18
     a16:	08 95       	ret

00000a18 <serial_put_queue>:
     a18:	48 2f       	mov	r20, r24
     a1a:	90 91 9c 0b 	lds	r25, 0x0B9C
     a1e:	80 91 9d 0b 	lds	r24, 0x0B9D
     a22:	98 17       	cp	r25, r24
     a24:	d1 f0       	breq	.+52     	; 0xa5a <serial_put_queue+0x42>
     a26:	90 91 9c 0b 	lds	r25, 0x0B9C
     a2a:	80 91 9d 0b 	lds	r24, 0x0B9D
     a2e:	98 17       	cp	r25, r24
     a30:	38 f4       	brcc	.+14     	; 0xa40 <serial_put_queue+0x28>
     a32:	80 91 9d 0b 	lds	r24, 0x0B9D
     a36:	90 91 9c 0b 	lds	r25, 0x0B9C
     a3a:	28 2f       	mov	r18, r24
     a3c:	30 e0       	ldi	r19, 0x00	; 0
     a3e:	08 c0       	rjmp	.+16     	; 0xa50 <serial_put_queue+0x38>
     a40:	80 91 9d 0b 	lds	r24, 0x0B9D
     a44:	90 91 9c 0b 	lds	r25, 0x0B9C
     a48:	28 2f       	mov	r18, r24
     a4a:	30 e0       	ldi	r19, 0x00	; 0
     a4c:	20 58       	subi	r18, 0x80	; 128
     a4e:	3f 4f       	sbci	r19, 0xFF	; 255
     a50:	29 1b       	sub	r18, r25
     a52:	31 09       	sbc	r19, r1
     a54:	2f 37       	cpi	r18, 0x7F	; 127
     a56:	31 05       	cpc	r19, r1
     a58:	91 f0       	breq	.+36     	; 0xa7e <serial_put_queue+0x66>
     a5a:	e0 91 9d 0b 	lds	r30, 0x0B9D
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	e4 5e       	subi	r30, 0xE4	; 228
     a62:	f4 4f       	sbci	r31, 0xF4	; 244
     a64:	40 83       	st	Z, r20
     a66:	80 91 9d 0b 	lds	r24, 0x0B9D
     a6a:	8f 37       	cpi	r24, 0x7F	; 127
     a6c:	19 f4       	brne	.+6      	; 0xa74 <serial_put_queue+0x5c>
     a6e:	10 92 9d 0b 	sts	0x0B9D, r1
     a72:	08 95       	ret
     a74:	80 91 9d 0b 	lds	r24, 0x0B9D
     a78:	8f 5f       	subi	r24, 0xFF	; 255
     a7a:	80 93 9d 0b 	sts	0x0B9D, r24
     a7e:	08 95       	ret

00000a80 <serial_get_queue>:
     a80:	90 91 9c 0b 	lds	r25, 0x0B9C
     a84:	80 91 9d 0b 	lds	r24, 0x0B9D
     a88:	98 17       	cp	r25, r24
     a8a:	11 f4       	brne	.+4      	; 0xa90 <serial_get_queue+0x10>
     a8c:	ef ef       	ldi	r30, 0xFF	; 255
     a8e:	12 c0       	rjmp	.+36     	; 0xab4 <serial_get_queue+0x34>
     a90:	e0 91 9c 0b 	lds	r30, 0x0B9C
     a94:	f0 e0       	ldi	r31, 0x00	; 0
     a96:	e4 5e       	subi	r30, 0xE4	; 228
     a98:	f4 4f       	sbci	r31, 0xF4	; 244
     a9a:	e0 81       	ld	r30, Z
     a9c:	80 91 9c 0b 	lds	r24, 0x0B9C
     aa0:	8f 37       	cpi	r24, 0x7F	; 127
     aa2:	19 f4       	brne	.+6      	; 0xaaa <serial_get_queue+0x2a>
     aa4:	10 92 9c 0b 	sts	0x0B9C, r1
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <serial_get_queue+0x34>
     aaa:	80 91 9c 0b 	lds	r24, 0x0B9C
     aae:	8f 5f       	subi	r24, 0xFF	; 255
     ab0:	80 93 9c 0b 	sts	0x0B9C, r24
     ab4:	8e 2f       	mov	r24, r30
     ab6:	08 95       	ret

00000ab8 <__vector_36>:
     ab8:	1f 92       	push	r1
     aba:	0f 92       	push	r0
     abc:	0f b6       	in	r0, 0x3f	; 63
     abe:	0f 92       	push	r0
     ac0:	0b b6       	in	r0, 0x3b	; 59
     ac2:	0f 92       	push	r0
     ac4:	11 24       	eor	r1, r1
     ac6:	2f 93       	push	r18
     ac8:	3f 93       	push	r19
     aca:	4f 93       	push	r20
     acc:	5f 93       	push	r21
     ace:	6f 93       	push	r22
     ad0:	7f 93       	push	r23
     ad2:	8f 93       	push	r24
     ad4:	9f 93       	push	r25
     ad6:	af 93       	push	r26
     ad8:	bf 93       	push	r27
     ada:	ef 93       	push	r30
     adc:	ff 93       	push	r31
     ade:	80 91 ce 00 	lds	r24, 0x00CE
     ae2:	9a df       	rcall	.-204    	; 0xa18 <serial_put_queue>
     ae4:	ff 91       	pop	r31
     ae6:	ef 91       	pop	r30
     ae8:	bf 91       	pop	r27
     aea:	af 91       	pop	r26
     aec:	9f 91       	pop	r25
     aee:	8f 91       	pop	r24
     af0:	7f 91       	pop	r23
     af2:	6f 91       	pop	r22
     af4:	5f 91       	pop	r21
     af6:	4f 91       	pop	r20
     af8:	3f 91       	pop	r19
     afa:	2f 91       	pop	r18
     afc:	0f 90       	pop	r0
     afe:	0b be       	out	0x3b, r0	; 59
     b00:	0f 90       	pop	r0
     b02:	0f be       	out	0x3f, r0	; 63
     b04:	0f 90       	pop	r0
     b06:	1f 90       	pop	r1
     b08:	18 95       	reti

00000b0a <std_putchar>:
     b0a:	df 93       	push	r29
     b0c:	cf 93       	push	r28
     b0e:	0f 92       	push	r0
     b10:	0f 92       	push	r0
     b12:	cd b7       	in	r28, 0x3d	; 61
     b14:	de b7       	in	r29, 0x3e	; 62
     b16:	98 2f       	mov	r25, r24
     b18:	8a 30       	cpi	r24, 0x0A	; 10
     b1a:	99 f4       	brne	.+38     	; 0xb42 <std_putchar+0x38>
     b1c:	8d e0       	ldi	r24, 0x0D	; 13
     b1e:	89 83       	std	Y+1, r24	; 0x01
     b20:	9a 83       	std	Y+2, r25	; 0x02
     b22:	fe 01       	movw	r30, r28
     b24:	31 96       	adiw	r30, 0x01	; 1
     b26:	9e 01       	movw	r18, r28
     b28:	2d 5f       	subi	r18, 0xFD	; 253
     b2a:	3f 4f       	sbci	r19, 0xFF	; 255
     b2c:	80 91 c8 00 	lds	r24, 0x00C8
     b30:	85 ff       	sbrs	r24, 5
     b32:	fc cf       	rjmp	.-8      	; 0xb2c <std_putchar+0x22>
     b34:	81 91       	ld	r24, Z+
     b36:	80 93 ce 00 	sts	0x00CE, r24
     b3a:	e2 17       	cp	r30, r18
     b3c:	f3 07       	cpc	r31, r19
     b3e:	b1 f7       	brne	.-20     	; 0xb2c <std_putchar+0x22>
     b40:	06 c0       	rjmp	.+12     	; 0xb4e <std_putchar+0x44>
     b42:	80 91 c8 00 	lds	r24, 0x00C8
     b46:	85 ff       	sbrs	r24, 5
     b48:	fc cf       	rjmp	.-8      	; 0xb42 <std_putchar+0x38>
     b4a:	90 93 ce 00 	sts	0x00CE, r25
     b4e:	80 e0       	ldi	r24, 0x00	; 0
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	0f 90       	pop	r0
     b54:	0f 90       	pop	r0
     b56:	cf 91       	pop	r28
     b58:	df 91       	pop	r29
     b5a:	08 95       	ret

00000b5c <std_getchar>:
     b5c:	90 91 9c 0b 	lds	r25, 0x0B9C
     b60:	80 91 9d 0b 	lds	r24, 0x0B9D
     b64:	98 17       	cp	r25, r24
     b66:	d1 f3       	breq	.-12     	; 0xb5c <std_getchar>
     b68:	90 91 9c 0b 	lds	r25, 0x0B9C
     b6c:	80 91 9d 0b 	lds	r24, 0x0B9D
     b70:	98 17       	cp	r25, r24
     b72:	38 f4       	brcc	.+14     	; 0xb82 <std_getchar+0x26>
     b74:	80 91 9d 0b 	lds	r24, 0x0B9D
     b78:	90 91 9c 0b 	lds	r25, 0x0B9C
     b7c:	28 2f       	mov	r18, r24
     b7e:	30 e0       	ldi	r19, 0x00	; 0
     b80:	08 c0       	rjmp	.+16     	; 0xb92 <std_getchar+0x36>
     b82:	80 91 9d 0b 	lds	r24, 0x0B9D
     b86:	90 91 9c 0b 	lds	r25, 0x0B9C
     b8a:	28 2f       	mov	r18, r24
     b8c:	30 e0       	ldi	r19, 0x00	; 0
     b8e:	20 58       	subi	r18, 0x80	; 128
     b90:	3f 4f       	sbci	r19, 0xFF	; 255
     b92:	29 1b       	sub	r18, r25
     b94:	31 09       	sbc	r19, r1
     b96:	23 2b       	or	r18, r19
     b98:	09 f3       	breq	.-62     	; 0xb5c <std_getchar>
     b9a:	90 91 9c 0b 	lds	r25, 0x0B9C
     b9e:	80 91 9d 0b 	lds	r24, 0x0B9D
     ba2:	98 17       	cp	r25, r24
     ba4:	11 f4       	brne	.+4      	; 0xbaa <std_getchar+0x4e>
     ba6:	ef ef       	ldi	r30, 0xFF	; 255
     ba8:	15 c0       	rjmp	.+42     	; 0xbd4 <std_getchar+0x78>
     baa:	e0 91 9c 0b 	lds	r30, 0x0B9C
     bae:	f0 e0       	ldi	r31, 0x00	; 0
     bb0:	e4 5e       	subi	r30, 0xE4	; 228
     bb2:	f4 4f       	sbci	r31, 0xF4	; 244
     bb4:	e0 81       	ld	r30, Z
     bb6:	80 91 9c 0b 	lds	r24, 0x0B9C
     bba:	8f 37       	cpi	r24, 0x7F	; 127
     bbc:	19 f4       	brne	.+6      	; 0xbc4 <std_getchar+0x68>
     bbe:	10 92 9c 0b 	sts	0x0B9C, r1
     bc2:	05 c0       	rjmp	.+10     	; 0xbce <std_getchar+0x72>
     bc4:	80 91 9c 0b 	lds	r24, 0x0B9C
     bc8:	8f 5f       	subi	r24, 0xFF	; 255
     bca:	80 93 9c 0b 	sts	0x0B9C, r24
     bce:	ed 30       	cpi	r30, 0x0D	; 13
     bd0:	09 f4       	brne	.+2      	; 0xbd4 <std_getchar+0x78>
     bd2:	ea e0       	ldi	r30, 0x0A	; 10
     bd4:	8e 2f       	mov	r24, r30
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	08 95       	ret

00000bda <serial_initialize>:
     bda:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <__floatsisf>
     bde:	9b 01       	movw	r18, r22
     be0:	ac 01       	movw	r20, r24
     be2:	60 e0       	ldi	r22, 0x00	; 0
     be4:	74 e2       	ldi	r23, 0x24	; 36
     be6:	84 ef       	ldi	r24, 0xF4	; 244
     be8:	99 e4       	ldi	r25, 0x49	; 73
     bea:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <__divsf3>
     bee:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <__fixunssfsi>
     bf2:	61 50       	subi	r22, 0x01	; 1
     bf4:	70 40       	sbci	r23, 0x00	; 0
     bf6:	22 e4       	ldi	r18, 0x42	; 66
     bf8:	20 93 c8 00 	sts	0x00C8, r18
     bfc:	28 e9       	ldi	r18, 0x98	; 152
     bfe:	20 93 c9 00 	sts	0x00C9, r18
     c02:	26 e0       	ldi	r18, 0x06	; 6
     c04:	20 93 ca 00 	sts	0x00CA, r18
     c08:	2f ef       	ldi	r18, 0xFF	; 255
     c0a:	20 93 ce 00 	sts	0x00CE, r18
     c0e:	10 92 9c 0b 	sts	0x0B9C, r1
     c12:	10 92 9d 0b 	sts	0x0B9D, r1
     c16:	27 2f       	mov	r18, r23
     c18:	33 27       	eor	r19, r19
     c1a:	27 fd       	sbrc	r18, 7
     c1c:	3a 95       	dec	r19
     c1e:	20 93 cd 00 	sts	0x00CD, r18
     c22:	60 93 cc 00 	sts	0x00CC, r22
     c26:	72 98       	cbi	0x0e, 2	; 14
     c28:	73 9a       	sbi	0x0e, 3	; 14
     c2a:	85 e8       	ldi	r24, 0x85	; 133
     c2c:	95 e0       	ldi	r25, 0x05	; 5
     c2e:	6e ea       	ldi	r22, 0xAE	; 174
     c30:	75 e0       	ldi	r23, 0x05	; 5
     c32:	0e 94 ba 10 	call	0x2174	; 0x2174 <fdevopen>
     c36:	90 93 9f 0b 	sts	0x0B9F, r25
     c3a:	80 93 9e 0b 	sts	0x0B9E, r24
     c3e:	08 95       	ret

00000c40 <initSerial>:
}

void clearSerialBuffer(){
//	printf( "clearSerialBuffer\n" );
	isRead = 0;
	memset( &readBuffer[0], 0x00, SERIAL_BUFFER_SIZE );
     c40:	60 e0       	ldi	r22, 0x00	; 0
     c42:	71 ee       	ldi	r23, 0xE1	; 225
     c44:	80 e0       	ldi	r24, 0x00	; 0
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	c8 df       	rcall	.-112    	; 0xbda <serial_initialize>
     c4a:	78 94       	sei
     c4c:	08 95       	ret

00000c4e <checkSerialRead>:
}

int checkSerialRead(void){
	int ret = 0;
	if( serial_get_qstate() > 0 ){
     c4e:	c2 de       	rcall	.-636    	; 0x9d4 <serial_get_qstate>
     c50:	18 16       	cp	r1, r24
     c52:	19 06       	cpc	r1, r25
     c54:	0c f0       	brlt	.+2      	; 0xc58 <checkSerialRead+0xa>
     c56:	3f c0       	rjmp	.+126    	; 0xcd6 <checkSerialRead+0x88>
		unsigned char ReceivedData = getchar();
     c58:	80 91 ba 0c 	lds	r24, 0x0CBA
     c5c:	90 91 bb 0c 	lds	r25, 0x0CBB
     c60:	0e 94 04 11 	call	0x2208	; 0x2208 <fgetc>
//		printf( "checkSerialRead %d\n", ReceivedData );
		if( ReceivedData == 10 || ReceivedData == 13 ){
     c64:	8a 30       	cpi	r24, 0x0A	; 10
     c66:	11 f0       	breq	.+4      	; 0xc6c <checkSerialRead+0x1e>
     c68:	8d 30       	cpi	r24, 0x0D	; 13
     c6a:	91 f4       	brne	.+36     	; 0xc90 <checkSerialRead+0x42>
			if( buffCnt > 0 ){
     c6c:	80 91 f2 0b 	lds	r24, 0x0BF2
     c70:	90 91 f3 0b 	lds	r25, 0x0BF3
     c74:	18 16       	cp	r1, r24
     c76:	19 06       	cpc	r1, r25
     c78:	8c f5       	brge	.+98     	; 0xcdc <checkSerialRead+0x8e>
				buffCnt = 0;
     c7a:	10 92 f3 0b 	sts	0x0BF3, r1
     c7e:	10 92 f2 0b 	sts	0x0BF2, r1
				isRead = 1;
     c82:	81 e0       	ldi	r24, 0x01	; 1
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	90 93 f5 0b 	sts	0x0BF5, r25
     c8a:	80 93 f4 0b 	sts	0x0BF4, r24
     c8e:	08 95       	ret
				ret = 1;
			}
		}else if( ReceivedData > 0 ){
     c90:	88 23       	and	r24, r24
     c92:	39 f1       	breq	.+78     	; 0xce2 <checkSerialRead+0x94>
			readBuffer[buffCnt++] = ReceivedData;
     c94:	20 91 f2 0b 	lds	r18, 0x0BF2
     c98:	30 91 f3 0b 	lds	r19, 0x0BF3
     c9c:	a9 01       	movw	r20, r18
     c9e:	4f 5f       	subi	r20, 0xFF	; 255
     ca0:	5f 4f       	sbci	r21, 0xFF	; 255
     ca2:	50 93 f3 0b 	sts	0x0BF3, r21
     ca6:	40 93 f2 0b 	sts	0x0BF2, r20
     caa:	f9 01       	movw	r30, r18
     cac:	ee 55       	subi	r30, 0x5E	; 94
     cae:	f4 4f       	sbci	r31, 0xF4	; 244
     cb0:	80 83       	st	Z, r24
			if( buffCnt >= SERIAL_BUFFER_SIZE-1 ){
     cb2:	80 91 f2 0b 	lds	r24, 0x0BF2
     cb6:	90 91 f3 0b 	lds	r25, 0x0BF3
     cba:	8f 34       	cpi	r24, 0x4F	; 79
     cbc:	91 05       	cpc	r25, r1
     cbe:	a4 f0       	brlt	.+40     	; 0xce8 <checkSerialRead+0x9a>
				buffCnt = 0;
     cc0:	10 92 f3 0b 	sts	0x0BF3, r1
     cc4:	10 92 f2 0b 	sts	0x0BF2, r1
				isRead = 1;
     cc8:	81 e0       	ldi	r24, 0x01	; 1
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	90 93 f5 0b 	sts	0x0BF5, r25
     cd0:	80 93 f4 0b 	sts	0x0BF4, r24
     cd4:	08 95       	ret
	isRead = 0;
	memset( &readBuffer[0], 0x00, SERIAL_BUFFER_SIZE );
}

int checkSerialRead(void){
	int ret = 0;
     cd6:	80 e0       	ldi	r24, 0x00	; 0
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	08 95       	ret
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	08 95       	ret
     ce2:	80 e0       	ldi	r24, 0x00	; 0
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	08 95       	ret
     ce8:	80 e0       	ldi	r24, 0x00	; 0
     cea:	90 e0       	ldi	r25, 0x00	; 0
			}
		}
//		printf( "readBuffer %s\n", &readBuffer[0] );
	}
	return ret;
}
     cec:	08 95       	ret

00000cee <getReadBuffer>:

char * getReadBuffer(){
//	printf( "getReadBuffer %d\n", isRead );
	char * ret = NULL;
	if( isRead > 0 ){
     cee:	80 91 f4 0b 	lds	r24, 0x0BF4
     cf2:	90 91 f5 0b 	lds	r25, 0x0BF5
     cf6:	18 16       	cp	r1, r24
     cf8:	19 06       	cpc	r1, r25
     cfa:	3c f4       	brge	.+14     	; 0xd0a <getReadBuffer+0x1c>
			//memset( &readBuffer[0], 0x00, BUFFER_SIZE );
			//isRead = 0;
			//printf( "ret=%s\n", ret );
		//}
		ret = &readBuffer[0];
		isRead = 0;
     cfc:	10 92 f5 0b 	sts	0x0BF5, r1
     d00:	10 92 f4 0b 	sts	0x0BF4, r1
			//memcpy( &ret, &readBuffer, sizeof(unsigned char) * BUFFER_SIZE );
			//memset( &readBuffer[0], 0x00, BUFFER_SIZE );
			//isRead = 0;
			//printf( "ret=%s\n", ret );
		//}
		ret = &readBuffer[0];
     d04:	82 ea       	ldi	r24, 0xA2	; 162
     d06:	9b e0       	ldi	r25, 0x0B	; 11
     d08:	08 95       	ret
	return ret;
}

char * getReadBuffer(){
//	printf( "getReadBuffer %d\n", isRead );
	char * ret = NULL;
     d0a:	80 e0       	ldi	r24, 0x00	; 0
     d0c:	90 e0       	ldi	r25, 0x00	; 0
		//}
		ret = &readBuffer[0];
		isRead = 0;
	}
	return ret;	
}
     d0e:	08 95       	ret

00000d10 <sensorInit>:
	}else{
		PrintCommStatus(CommStatus);
	}
}

void ServoReadState(){
     d10:	8a e2       	ldi	r24, 0x2A	; 42
     d12:	96 e0       	ldi	r25, 0x06	; 6
     d14:	0e 94 53 11 	call	0x22a6	; 0x22a6 <puts>
     d18:	61 e0       	ldi	r22, 0x01	; 1
     d1a:	70 e0       	ldi	r23, 0x00	; 0
     d1c:	80 e0       	ldi	r24, 0x00	; 0
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	e6 db       	rcall	.-2100   	; 0x4ee <dxl_initialize>
     d22:	78 94       	sei
     d24:	86 e8       	ldi	r24, 0x86	; 134
     d26:	80 93 7a 00 	sts	0x007A, r24
     d2a:	81 e0       	ldi	r24, 0x01	; 1
     d2c:	80 93 7c 00 	sts	0x007C, r24
     d30:	08 95       	ret

00000d32 <sensorTest>:
     d32:	17 98       	cbi	0x02, 7	; 2
     d34:	ea e7       	ldi	r30, 0x7A	; 122
     d36:	f0 e0       	ldi	r31, 0x00	; 0
     d38:	80 81       	ld	r24, Z
     d3a:	80 61       	ori	r24, 0x10	; 16
     d3c:	80 83       	st	Z, r24
     d3e:	80 81       	ld	r24, Z
     d40:	80 64       	ori	r24, 0x40	; 64
     d42:	80 83       	st	Z, r24
     d44:	80 81       	ld	r24, Z
     d46:	84 ff       	sbrs	r24, 4
     d48:	fd cf       	rjmp	.-6      	; 0xd44 <sensorTest+0x12>
     d4a:	8c ef       	ldi	r24, 0xFC	; 252
     d4c:	82 b9       	out	0x02, r24	; 2
     d4e:	80 91 78 00 	lds	r24, 0x0078
     d52:	90 91 79 00 	lds	r25, 0x0079
     d56:	9f 93       	push	r25
     d58:	8f 93       	push	r24
     d5a:	89 e3       	ldi	r24, 0x39	; 57
     d5c:	96 e0       	ldi	r25, 0x06	; 6
     d5e:	9f 93       	push	r25
     d60:	8f 93       	push	r24
     d62:	0e 94 42 11 	call	0x2284	; 0x2284 <printf>
     d66:	0f 90       	pop	r0
     d68:	0f 90       	pop	r0
     d6a:	0f 90       	pop	r0
     d6c:	0f 90       	pop	r0
     d6e:	08 95       	ret

00000d70 <sendAck>:
     d70:	9f 93       	push	r25
     d72:	8f 93       	push	r24
     d74:	84 e5       	ldi	r24, 0x54	; 84
     d76:	96 e0       	ldi	r25, 0x06	; 6
     d78:	9f 93       	push	r25
     d7a:	8f 93       	push	r24
     d7c:	0e 94 42 11 	call	0x2284	; 0x2284 <printf>
     d80:	0f 90       	pop	r0
     d82:	0f 90       	pop	r0
     d84:	0f 90       	pop	r0
     d86:	0f 90       	pop	r0
     d88:	08 95       	ret

00000d8a <MotorInit>:
     d8a:	61 e0       	ldi	r22, 0x01	; 1
     d8c:	70 e0       	ldi	r23, 0x00	; 0
     d8e:	80 e0       	ldi	r24, 0x00	; 0
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	ad db       	rcall	.-2214   	; 0x4ee <dxl_initialize>
     d94:	41 e0       	ldi	r20, 0x01	; 1
     d96:	50 e0       	ldi	r21, 0x00	; 0
     d98:	6f e2       	ldi	r22, 0x2F	; 47
     d9a:	70 e0       	ldi	r23, 0x00	; 0
     d9c:	8f e1       	ldi	r24, 0x1F	; 31
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	2a db       	rcall	.-2476   	; 0x3f6 <dxl_write_word>
     da2:	40 e0       	ldi	r20, 0x00	; 0
     da4:	50 e0       	ldi	r21, 0x00	; 0
     da6:	60 e2       	ldi	r22, 0x20	; 32
     da8:	70 e0       	ldi	r23, 0x00	; 0
     daa:	8e ef       	ldi	r24, 0xFE	; 254
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	23 db       	rcall	.-2490   	; 0x3f6 <dxl_write_word>
     db0:	40 e0       	ldi	r20, 0x00	; 0
     db2:	50 e0       	ldi	r21, 0x00	; 0
     db4:	68 e1       	ldi	r22, 0x18	; 24
     db6:	70 e0       	ldi	r23, 0x00	; 0
     db8:	8e ef       	ldi	r24, 0xFE	; 254
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	54 db       	rcall	.-2392   	; 0x466 <dxl_write_byte>
     dbe:	2f e3       	ldi	r18, 0x3F	; 63
     dc0:	8d e0       	ldi	r24, 0x0D	; 13
     dc2:	93 e0       	ldi	r25, 0x03	; 3
     dc4:	21 50       	subi	r18, 0x01	; 1
     dc6:	80 40       	sbci	r24, 0x00	; 0
     dc8:	90 40       	sbci	r25, 0x00	; 0
     dca:	e1 f7       	brne	.-8      	; 0xdc4 <MotorInit+0x3a>
     dcc:	00 c0       	rjmp	.+0      	; 0xdce <MotorInit+0x44>
     dce:	00 00       	nop
     dd0:	08 95       	ret

00000dd2 <split>:
     dd2:	0f 93       	push	r16
     dd4:	1f 93       	push	r17
     dd6:	cf 93       	push	r28
     dd8:	df 93       	push	r29
     dda:	00 d0       	rcall	.+0      	; 0xddc <split+0xa>
     ddc:	cd b7       	in	r28, 0x3d	; 61
     dde:	de b7       	in	r29, 0x3e	; 62
     de0:	20 e2       	ldi	r18, 0x20	; 32
     de2:	3c e2       	ldi	r19, 0x2C	; 44
     de4:	40 e0       	ldi	r20, 0x00	; 0
     de6:	29 83       	std	Y+1, r18	; 0x01
     de8:	3a 83       	std	Y+2, r19	; 0x02
     dea:	4b 83       	std	Y+3, r20	; 0x03
     dec:	be 01       	movw	r22, r28
     dee:	6f 5f       	subi	r22, 0xFF	; 255
     df0:	7f 4f       	sbci	r23, 0xFF	; 255
     df2:	0e 94 88 10 	call	0x2110	; 0x2110 <strtok>
     df6:	00 97       	sbiw	r24, 0x00	; 0
     df8:	89 f0       	breq	.+34     	; 0xe1c <split+0x4a>
     dfa:	00 e1       	ldi	r16, 0x10	; 16
     dfc:	1c e0       	ldi	r17, 0x0C	; 12
     dfe:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <atoi>
     e02:	f8 01       	movw	r30, r16
     e04:	81 93       	st	Z+, r24
     e06:	91 93       	st	Z+, r25
     e08:	8f 01       	movw	r16, r30
     e0a:	be 01       	movw	r22, r28
     e0c:	6f 5f       	subi	r22, 0xFF	; 255
     e0e:	7f 4f       	sbci	r23, 0xFF	; 255
     e10:	80 e0       	ldi	r24, 0x00	; 0
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	0e 94 88 10 	call	0x2110	; 0x2110 <strtok>
     e18:	00 97       	sbiw	r24, 0x00	; 0
     e1a:	89 f7       	brne	.-30     	; 0xdfe <split+0x2c>
     e1c:	0f 90       	pop	r0
     e1e:	0f 90       	pop	r0
     e20:	0f 90       	pop	r0
     e22:	df 91       	pop	r29
     e24:	cf 91       	pop	r28
     e26:	1f 91       	pop	r17
     e28:	0f 91       	pop	r16
     e2a:	08 95       	ret

00000e2c <isMoving>:
     e2c:	80 91 02 0c 	lds	r24, 0x0C02
     e30:	90 91 03 0c 	lds	r25, 0x0C03
     e34:	0a 96       	adiw	r24, 0x0a	; 10
     e36:	90 93 03 0c 	sts	0x0C03, r25
     e3a:	80 93 02 0c 	sts	0x0C02, r24
     e3e:	20 91 00 0c 	lds	r18, 0x0C00
     e42:	30 91 01 0c 	lds	r19, 0x0C01
     e46:	82 17       	cp	r24, r18
     e48:	93 07       	cpc	r25, r19
     e4a:	3c f0       	brlt	.+14     	; 0xe5a <isMoving+0x2e>
     e4c:	10 92 03 0c 	sts	0x0C03, r1
     e50:	10 92 02 0c 	sts	0x0C02, r1
     e54:	80 e0       	ldi	r24, 0x00	; 0
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	08 95       	ret
     e5a:	81 e0       	ldi	r24, 0x01	; 1
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	08 95       	ret

00000e60 <setAngle>:
     e60:	a0 91 12 0c 	lds	r26, 0x0C12
     e64:	b0 91 13 0c 	lds	r27, 0x0C13
     e68:	a2 33       	cpi	r26, 0x32	; 50
     e6a:	b1 05       	cpc	r27, r1
     e6c:	c4 f4       	brge	.+48     	; 0xe9e <setAngle+0x3e>
     e6e:	e4 e1       	ldi	r30, 0x14	; 20
     e70:	fc e0       	ldi	r31, 0x0C	; 12
     e72:	aa 0f       	add	r26, r26
     e74:	bb 1f       	adc	r27, r27
     e76:	cd 01       	movw	r24, r26
     e78:	88 0f       	add	r24, r24
     e7a:	99 1f       	adc	r25, r25
     e7c:	88 0f       	add	r24, r24
     e7e:	99 1f       	adc	r25, r25
     e80:	88 0f       	add	r24, r24
     e82:	99 1f       	adc	r25, r25
     e84:	a8 0f       	add	r26, r24
     e86:	b9 1f       	adc	r27, r25
     e88:	aa 56       	subi	r26, 0x6A	; 106
     e8a:	bd 4f       	sbci	r27, 0xFD	; 253
     e8c:	26 e2       	ldi	r18, 0x26	; 38
     e8e:	3c e0       	ldi	r19, 0x0C	; 12
     e90:	81 91       	ld	r24, Z+
     e92:	91 91       	ld	r25, Z+
     e94:	8d 93       	st	X+, r24
     e96:	9d 93       	st	X+, r25
     e98:	e2 17       	cp	r30, r18
     e9a:	f3 07       	cpc	r31, r19
     e9c:	c9 f7       	brne	.-14     	; 0xe90 <setAngle+0x30>
     e9e:	08 95       	ret

00000ea0 <getAngle>:
     ea0:	cf 92       	push	r12
     ea2:	df 92       	push	r13
     ea4:	ef 92       	push	r14
     ea6:	ff 92       	push	r15
     ea8:	0f 93       	push	r16
     eaa:	1f 93       	push	r17
     eac:	cf 93       	push	r28
     eae:	df 93       	push	r29
     eb0:	cd b7       	in	r28, 0x3d	; 61
     eb2:	de b7       	in	r29, 0x3e	; 62
     eb4:	60 97       	sbiw	r28, 0x10	; 16
     eb6:	0f b6       	in	r0, 0x3f	; 63
     eb8:	f8 94       	cli
     eba:	de bf       	out	0x3e, r29	; 62
     ebc:	0f be       	out	0x3f, r0	; 63
     ebe:	cd bf       	out	0x3d, r28	; 61
     ec0:	fe 01       	movw	r30, r28
     ec2:	31 96       	adiw	r30, 0x01	; 1
     ec4:	80 e1       	ldi	r24, 0x10	; 16
     ec6:	df 01       	movw	r26, r30
     ec8:	1d 92       	st	X+, r1
     eca:	8a 95       	dec	r24
     ecc:	e9 f7       	brne	.-6      	; 0xec8 <getAngle+0x28>
     ece:	0a e1       	ldi	r16, 0x1A	; 26
     ed0:	16 e0       	ldi	r17, 0x06	; 6
     ed2:	7f 01       	movw	r14, r30
     ed4:	0f 2e       	mov	r0, r31
     ed6:	fa e2       	ldi	r31, 0x2A	; 42
     ed8:	cf 2e       	mov	r12, r31
     eda:	f6 e0       	ldi	r31, 0x06	; 6
     edc:	df 2e       	mov	r13, r31
     ede:	f0 2d       	mov	r31, r0
     ee0:	64 e2       	ldi	r22, 0x24	; 36
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	f8 01       	movw	r30, r16
     ee6:	81 91       	ld	r24, Z+
     ee8:	91 91       	ld	r25, Z+
     eea:	8f 01       	movw	r16, r30
     eec:	9e da       	rcall	.-2756   	; 0x42a <dxl_read_word>
     eee:	d7 01       	movw	r26, r14
     ef0:	8d 93       	st	X+, r24
     ef2:	9d 93       	st	X+, r25
     ef4:	7d 01       	movw	r14, r26
     ef6:	0c 15       	cp	r16, r12
     ef8:	1d 05       	cpc	r17, r13
     efa:	91 f7       	brne	.-28     	; 0xee0 <getAngle+0x40>
     efc:	88 8d       	ldd	r24, Y+24	; 0x18
     efe:	8f 93       	push	r24
     f00:	8f 89       	ldd	r24, Y+23	; 0x17
     f02:	8f 93       	push	r24
     f04:	8e 89       	ldd	r24, Y+22	; 0x16
     f06:	8f 93       	push	r24
     f08:	8d 89       	ldd	r24, Y+21	; 0x15
     f0a:	8f 93       	push	r24
     f0c:	8c 89       	ldd	r24, Y+20	; 0x14
     f0e:	8f 93       	push	r24
     f10:	8b 89       	ldd	r24, Y+19	; 0x13
     f12:	8f 93       	push	r24
     f14:	8a 89       	ldd	r24, Y+18	; 0x12
     f16:	8f 93       	push	r24
     f18:	89 89       	ldd	r24, Y+17	; 0x11
     f1a:	8f 93       	push	r24
     f1c:	88 89       	ldd	r24, Y+16	; 0x10
     f1e:	8f 93       	push	r24
     f20:	8f 85       	ldd	r24, Y+15	; 0x0f
     f22:	8f 93       	push	r24
     f24:	8e 85       	ldd	r24, Y+14	; 0x0e
     f26:	8f 93       	push	r24
     f28:	8d 85       	ldd	r24, Y+13	; 0x0d
     f2a:	8f 93       	push	r24
     f2c:	8c 85       	ldd	r24, Y+12	; 0x0c
     f2e:	8f 93       	push	r24
     f30:	8b 85       	ldd	r24, Y+11	; 0x0b
     f32:	8f 93       	push	r24
     f34:	8a 85       	ldd	r24, Y+10	; 0x0a
     f36:	8f 93       	push	r24
     f38:	89 85       	ldd	r24, Y+9	; 0x09
     f3a:	8f 93       	push	r24
     f3c:	88 85       	ldd	r24, Y+8	; 0x08
     f3e:	8f 93       	push	r24
     f40:	8f 81       	ldd	r24, Y+7	; 0x07
     f42:	8f 93       	push	r24
     f44:	8e 81       	ldd	r24, Y+6	; 0x06
     f46:	8f 93       	push	r24
     f48:	8d 81       	ldd	r24, Y+5	; 0x05
     f4a:	8f 93       	push	r24
     f4c:	8c 81       	ldd	r24, Y+4	; 0x04
     f4e:	8f 93       	push	r24
     f50:	8b 81       	ldd	r24, Y+3	; 0x03
     f52:	8f 93       	push	r24
     f54:	8a 81       	ldd	r24, Y+2	; 0x02
     f56:	8f 93       	push	r24
     f58:	89 81       	ldd	r24, Y+1	; 0x01
     f5a:	8f 93       	push	r24
     f5c:	1f 92       	push	r1
     f5e:	82 e0       	ldi	r24, 0x02	; 2
     f60:	8f 93       	push	r24
     f62:	89 e5       	ldi	r24, 0x59	; 89
     f64:	96 e0       	ldi	r25, 0x06	; 6
     f66:	9f 93       	push	r25
     f68:	8f 93       	push	r24
     f6a:	0e 94 42 11 	call	0x2284	; 0x2284 <printf>
     f6e:	0f b6       	in	r0, 0x3f	; 63
     f70:	f8 94       	cli
     f72:	de bf       	out	0x3e, r29	; 62
     f74:	0f be       	out	0x3f, r0	; 63
     f76:	cd bf       	out	0x3d, r28	; 61
     f78:	60 96       	adiw	r28, 0x10	; 16
     f7a:	0f b6       	in	r0, 0x3f	; 63
     f7c:	f8 94       	cli
     f7e:	de bf       	out	0x3e, r29	; 62
     f80:	0f be       	out	0x3f, r0	; 63
     f82:	cd bf       	out	0x3d, r28	; 61
     f84:	df 91       	pop	r29
     f86:	cf 91       	pop	r28
     f88:	1f 91       	pop	r17
     f8a:	0f 91       	pop	r16
     f8c:	ff 90       	pop	r15
     f8e:	ef 90       	pop	r14
     f90:	df 90       	pop	r13
     f92:	cf 90       	pop	r12
     f94:	08 95       	ret

00000f96 <sendActAngle>:
     f96:	9c 01       	movw	r18, r24
     f98:	22 0f       	add	r18, r18
     f9a:	33 1f       	adc	r19, r19
     f9c:	f9 01       	movw	r30, r18
     f9e:	ee 0f       	add	r30, r30
     fa0:	ff 1f       	adc	r31, r31
     fa2:	ee 0f       	add	r30, r30
     fa4:	ff 1f       	adc	r31, r31
     fa6:	ee 0f       	add	r30, r30
     fa8:	ff 1f       	adc	r31, r31
     faa:	e2 0f       	add	r30, r18
     fac:	f3 1f       	adc	r31, r19
     fae:	ea 56       	subi	r30, 0x6A	; 106
     fb0:	fd 4f       	sbci	r31, 0xFD	; 253
     fb2:	21 8d       	ldd	r18, Z+25	; 0x19
     fb4:	2f 93       	push	r18
     fb6:	20 8d       	ldd	r18, Z+24	; 0x18
     fb8:	2f 93       	push	r18
     fba:	27 89       	ldd	r18, Z+23	; 0x17
     fbc:	2f 93       	push	r18
     fbe:	26 89       	ldd	r18, Z+22	; 0x16
     fc0:	2f 93       	push	r18
     fc2:	25 89       	ldd	r18, Z+21	; 0x15
     fc4:	2f 93       	push	r18
     fc6:	24 89       	ldd	r18, Z+20	; 0x14
     fc8:	2f 93       	push	r18
     fca:	01 96       	adiw	r24, 0x01	; 1
     fcc:	dc 01       	movw	r26, r24
     fce:	aa 0f       	add	r26, r26
     fd0:	bb 1f       	adc	r27, r27
     fd2:	cd 01       	movw	r24, r26
     fd4:	88 0f       	add	r24, r24
     fd6:	99 1f       	adc	r25, r25
     fd8:	88 0f       	add	r24, r24
     fda:	99 1f       	adc	r25, r25
     fdc:	88 0f       	add	r24, r24
     fde:	99 1f       	adc	r25, r25
     fe0:	a8 0f       	add	r26, r24
     fe2:	b9 1f       	adc	r27, r25
     fe4:	aa 56       	subi	r26, 0x6A	; 106
     fe6:	bd 4f       	sbci	r27, 0xFD	; 253
     fe8:	11 96       	adiw	r26, 0x01	; 1
     fea:	8c 91       	ld	r24, X
     fec:	11 97       	sbiw	r26, 0x01	; 1
     fee:	8f 93       	push	r24
     ff0:	8c 91       	ld	r24, X
     ff2:	8f 93       	push	r24
     ff4:	81 89       	ldd	r24, Z+17	; 0x11
     ff6:	8f 93       	push	r24
     ff8:	80 89       	ldd	r24, Z+16	; 0x10
     ffa:	8f 93       	push	r24
     ffc:	87 85       	ldd	r24, Z+15	; 0x0f
     ffe:	8f 93       	push	r24
    1000:	86 85       	ldd	r24, Z+14	; 0x0e
    1002:	8f 93       	push	r24
    1004:	85 85       	ldd	r24, Z+13	; 0x0d
    1006:	8f 93       	push	r24
    1008:	84 85       	ldd	r24, Z+12	; 0x0c
    100a:	8f 93       	push	r24
    100c:	83 85       	ldd	r24, Z+11	; 0x0b
    100e:	8f 93       	push	r24
    1010:	82 85       	ldd	r24, Z+10	; 0x0a
    1012:	8f 93       	push	r24
    1014:	81 85       	ldd	r24, Z+9	; 0x09
    1016:	8f 93       	push	r24
    1018:	80 85       	ldd	r24, Z+8	; 0x08
    101a:	8f 93       	push	r24
    101c:	87 81       	ldd	r24, Z+7	; 0x07
    101e:	8f 93       	push	r24
    1020:	86 81       	ldd	r24, Z+6	; 0x06
    1022:	8f 93       	push	r24
    1024:	85 81       	ldd	r24, Z+5	; 0x05
    1026:	8f 93       	push	r24
    1028:	84 81       	ldd	r24, Z+4	; 0x04
    102a:	8f 93       	push	r24
    102c:	83 81       	ldd	r24, Z+3	; 0x03
    102e:	8f 93       	push	r24
    1030:	82 81       	ldd	r24, Z+2	; 0x02
    1032:	8f 93       	push	r24
    1034:	81 81       	ldd	r24, Z+1	; 0x01
    1036:	8f 93       	push	r24
    1038:	80 81       	ld	r24, Z
    103a:	8f 93       	push	r24
    103c:	1f 92       	push	r1
    103e:	83 e0       	ldi	r24, 0x03	; 3
    1040:	8f 93       	push	r24
    1042:	8c e8       	ldi	r24, 0x8C	; 140
    1044:	96 e0       	ldi	r25, 0x06	; 6
    1046:	9f 93       	push	r25
    1048:	8f 93       	push	r24
    104a:	0e 94 42 11 	call	0x2284	; 0x2284 <printf>
    104e:	8d b7       	in	r24, 0x3d	; 61
    1050:	9e b7       	in	r25, 0x3e	; 62
    1052:	4e 96       	adiw	r24, 0x1e	; 30
    1054:	0f b6       	in	r0, 0x3f	; 63
    1056:	f8 94       	cli
    1058:	9e bf       	out	0x3e, r25	; 62
    105a:	0f be       	out	0x3f, r0	; 63
    105c:	8d bf       	out	0x3d, r24	; 61
    105e:	08 95       	ret

00001060 <getLoad>:
    1060:	cf 92       	push	r12
    1062:	df 92       	push	r13
    1064:	ef 92       	push	r14
    1066:	ff 92       	push	r15
    1068:	0f 93       	push	r16
    106a:	1f 93       	push	r17
    106c:	cf 93       	push	r28
    106e:	df 93       	push	r29
    1070:	cd b7       	in	r28, 0x3d	; 61
    1072:	de b7       	in	r29, 0x3e	; 62
    1074:	60 97       	sbiw	r28, 0x10	; 16
    1076:	0f b6       	in	r0, 0x3f	; 63
    1078:	f8 94       	cli
    107a:	de bf       	out	0x3e, r29	; 62
    107c:	0f be       	out	0x3f, r0	; 63
    107e:	cd bf       	out	0x3d, r28	; 61
    1080:	fe 01       	movw	r30, r28
    1082:	31 96       	adiw	r30, 0x01	; 1
    1084:	80 e1       	ldi	r24, 0x10	; 16
    1086:	df 01       	movw	r26, r30
    1088:	1d 92       	st	X+, r1
    108a:	8a 95       	dec	r24
    108c:	e9 f7       	brne	.-6      	; 0x1088 <getLoad+0x28>
    108e:	0a e1       	ldi	r16, 0x1A	; 26
    1090:	16 e0       	ldi	r17, 0x06	; 6
    1092:	7f 01       	movw	r14, r30
    1094:	0f 2e       	mov	r0, r31
    1096:	fa e2       	ldi	r31, 0x2A	; 42
    1098:	cf 2e       	mov	r12, r31
    109a:	f6 e0       	ldi	r31, 0x06	; 6
    109c:	df 2e       	mov	r13, r31
    109e:	f0 2d       	mov	r31, r0
    10a0:	68 e2       	ldi	r22, 0x28	; 40
    10a2:	70 e0       	ldi	r23, 0x00	; 0
    10a4:	f8 01       	movw	r30, r16
    10a6:	81 91       	ld	r24, Z+
    10a8:	91 91       	ld	r25, Z+
    10aa:	8f 01       	movw	r16, r30
    10ac:	be d9       	rcall	.-3204   	; 0x42a <dxl_read_word>
    10ae:	d7 01       	movw	r26, r14
    10b0:	8d 93       	st	X+, r24
    10b2:	9d 93       	st	X+, r25
    10b4:	7d 01       	movw	r14, r26
    10b6:	0c 15       	cp	r16, r12
    10b8:	1d 05       	cpc	r17, r13
    10ba:	91 f7       	brne	.-28     	; 0x10a0 <getLoad+0x40>
    10bc:	88 8d       	ldd	r24, Y+24	; 0x18
    10be:	8f 93       	push	r24
    10c0:	8f 89       	ldd	r24, Y+23	; 0x17
    10c2:	8f 93       	push	r24
    10c4:	8e 89       	ldd	r24, Y+22	; 0x16
    10c6:	8f 93       	push	r24
    10c8:	8d 89       	ldd	r24, Y+21	; 0x15
    10ca:	8f 93       	push	r24
    10cc:	8c 89       	ldd	r24, Y+20	; 0x14
    10ce:	8f 93       	push	r24
    10d0:	8b 89       	ldd	r24, Y+19	; 0x13
    10d2:	8f 93       	push	r24
    10d4:	8a 89       	ldd	r24, Y+18	; 0x12
    10d6:	8f 93       	push	r24
    10d8:	89 89       	ldd	r24, Y+17	; 0x11
    10da:	8f 93       	push	r24
    10dc:	88 89       	ldd	r24, Y+16	; 0x10
    10de:	8f 93       	push	r24
    10e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    10e2:	8f 93       	push	r24
    10e4:	8e 85       	ldd	r24, Y+14	; 0x0e
    10e6:	8f 93       	push	r24
    10e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    10ea:	8f 93       	push	r24
    10ec:	8c 85       	ldd	r24, Y+12	; 0x0c
    10ee:	8f 93       	push	r24
    10f0:	8b 85       	ldd	r24, Y+11	; 0x0b
    10f2:	8f 93       	push	r24
    10f4:	8a 85       	ldd	r24, Y+10	; 0x0a
    10f6:	8f 93       	push	r24
    10f8:	89 85       	ldd	r24, Y+9	; 0x09
    10fa:	8f 93       	push	r24
    10fc:	88 85       	ldd	r24, Y+8	; 0x08
    10fe:	8f 93       	push	r24
    1100:	8f 81       	ldd	r24, Y+7	; 0x07
    1102:	8f 93       	push	r24
    1104:	8e 81       	ldd	r24, Y+6	; 0x06
    1106:	8f 93       	push	r24
    1108:	8d 81       	ldd	r24, Y+5	; 0x05
    110a:	8f 93       	push	r24
    110c:	8c 81       	ldd	r24, Y+4	; 0x04
    110e:	8f 93       	push	r24
    1110:	8b 81       	ldd	r24, Y+3	; 0x03
    1112:	8f 93       	push	r24
    1114:	8a 81       	ldd	r24, Y+2	; 0x02
    1116:	8f 93       	push	r24
    1118:	89 81       	ldd	r24, Y+1	; 0x01
    111a:	8f 93       	push	r24
    111c:	1f 92       	push	r1
    111e:	84 e0       	ldi	r24, 0x04	; 4
    1120:	8f 93       	push	r24
    1122:	87 eb       	ldi	r24, 0xB7	; 183
    1124:	96 e0       	ldi	r25, 0x06	; 6
    1126:	9f 93       	push	r25
    1128:	8f 93       	push	r24
    112a:	0e 94 42 11 	call	0x2284	; 0x2284 <printf>
    112e:	0f b6       	in	r0, 0x3f	; 63
    1130:	f8 94       	cli
    1132:	de bf       	out	0x3e, r29	; 62
    1134:	0f be       	out	0x3f, r0	; 63
    1136:	cd bf       	out	0x3d, r28	; 61
    1138:	60 96       	adiw	r28, 0x10	; 16
    113a:	0f b6       	in	r0, 0x3f	; 63
    113c:	f8 94       	cli
    113e:	de bf       	out	0x3e, r29	; 62
    1140:	0f be       	out	0x3f, r0	; 63
    1142:	cd bf       	out	0x3d, r28	; 61
    1144:	df 91       	pop	r29
    1146:	cf 91       	pop	r28
    1148:	1f 91       	pop	r17
    114a:	0f 91       	pop	r16
    114c:	ff 90       	pop	r15
    114e:	ef 90       	pop	r14
    1150:	df 90       	pop	r13
    1152:	cf 90       	pop	r12
    1154:	08 95       	ret

00001156 <getVoltage>:
    1156:	cf 92       	push	r12
    1158:	df 92       	push	r13
    115a:	ef 92       	push	r14
    115c:	ff 92       	push	r15
    115e:	0f 93       	push	r16
    1160:	1f 93       	push	r17
    1162:	cf 93       	push	r28
    1164:	df 93       	push	r29
    1166:	cd b7       	in	r28, 0x3d	; 61
    1168:	de b7       	in	r29, 0x3e	; 62
    116a:	60 97       	sbiw	r28, 0x10	; 16
    116c:	0f b6       	in	r0, 0x3f	; 63
    116e:	f8 94       	cli
    1170:	de bf       	out	0x3e, r29	; 62
    1172:	0f be       	out	0x3f, r0	; 63
    1174:	cd bf       	out	0x3d, r28	; 61
    1176:	fe 01       	movw	r30, r28
    1178:	31 96       	adiw	r30, 0x01	; 1
    117a:	80 e1       	ldi	r24, 0x10	; 16
    117c:	df 01       	movw	r26, r30
    117e:	1d 92       	st	X+, r1
    1180:	8a 95       	dec	r24
    1182:	e9 f7       	brne	.-6      	; 0x117e <getVoltage+0x28>
    1184:	0a e1       	ldi	r16, 0x1A	; 26
    1186:	16 e0       	ldi	r17, 0x06	; 6
    1188:	7f 01       	movw	r14, r30
    118a:	0f 2e       	mov	r0, r31
    118c:	fa e2       	ldi	r31, 0x2A	; 42
    118e:	cf 2e       	mov	r12, r31
    1190:	f6 e0       	ldi	r31, 0x06	; 6
    1192:	df 2e       	mov	r13, r31
    1194:	f0 2d       	mov	r31, r0
    1196:	6a e2       	ldi	r22, 0x2A	; 42
    1198:	70 e0       	ldi	r23, 0x00	; 0
    119a:	f8 01       	movw	r30, r16
    119c:	81 91       	ld	r24, Z+
    119e:	91 91       	ld	r25, Z+
    11a0:	8f 01       	movw	r16, r30
    11a2:	43 d9       	rcall	.-3450   	; 0x42a <dxl_read_word>
    11a4:	0e 94 b5 00 	call	0x16a	; 0x16a <dxl_get_lowbyte>
    11a8:	d7 01       	movw	r26, r14
    11aa:	8d 93       	st	X+, r24
    11ac:	9d 93       	st	X+, r25
    11ae:	7d 01       	movw	r14, r26
    11b0:	0c 15       	cp	r16, r12
    11b2:	1d 05       	cpc	r17, r13
    11b4:	81 f7       	brne	.-32     	; 0x1196 <getVoltage+0x40>
    11b6:	88 8d       	ldd	r24, Y+24	; 0x18
    11b8:	8f 93       	push	r24
    11ba:	8f 89       	ldd	r24, Y+23	; 0x17
    11bc:	8f 93       	push	r24
    11be:	8e 89       	ldd	r24, Y+22	; 0x16
    11c0:	8f 93       	push	r24
    11c2:	8d 89       	ldd	r24, Y+21	; 0x15
    11c4:	8f 93       	push	r24
    11c6:	8c 89       	ldd	r24, Y+20	; 0x14
    11c8:	8f 93       	push	r24
    11ca:	8b 89       	ldd	r24, Y+19	; 0x13
    11cc:	8f 93       	push	r24
    11ce:	8a 89       	ldd	r24, Y+18	; 0x12
    11d0:	8f 93       	push	r24
    11d2:	89 89       	ldd	r24, Y+17	; 0x11
    11d4:	8f 93       	push	r24
    11d6:	88 89       	ldd	r24, Y+16	; 0x10
    11d8:	8f 93       	push	r24
    11da:	8f 85       	ldd	r24, Y+15	; 0x0f
    11dc:	8f 93       	push	r24
    11de:	8e 85       	ldd	r24, Y+14	; 0x0e
    11e0:	8f 93       	push	r24
    11e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    11e4:	8f 93       	push	r24
    11e6:	8c 85       	ldd	r24, Y+12	; 0x0c
    11e8:	8f 93       	push	r24
    11ea:	8b 85       	ldd	r24, Y+11	; 0x0b
    11ec:	8f 93       	push	r24
    11ee:	8a 85       	ldd	r24, Y+10	; 0x0a
    11f0:	8f 93       	push	r24
    11f2:	89 85       	ldd	r24, Y+9	; 0x09
    11f4:	8f 93       	push	r24
    11f6:	88 85       	ldd	r24, Y+8	; 0x08
    11f8:	8f 93       	push	r24
    11fa:	8f 81       	ldd	r24, Y+7	; 0x07
    11fc:	8f 93       	push	r24
    11fe:	8e 81       	ldd	r24, Y+6	; 0x06
    1200:	8f 93       	push	r24
    1202:	8d 81       	ldd	r24, Y+5	; 0x05
    1204:	8f 93       	push	r24
    1206:	8c 81       	ldd	r24, Y+4	; 0x04
    1208:	8f 93       	push	r24
    120a:	8b 81       	ldd	r24, Y+3	; 0x03
    120c:	8f 93       	push	r24
    120e:	8a 81       	ldd	r24, Y+2	; 0x02
    1210:	8f 93       	push	r24
    1212:	89 81       	ldd	r24, Y+1	; 0x01
    1214:	8f 93       	push	r24
    1216:	1f 92       	push	r1
    1218:	85 e0       	ldi	r24, 0x05	; 5
    121a:	8f 93       	push	r24
    121c:	89 ee       	ldi	r24, 0xE9	; 233
    121e:	96 e0       	ldi	r25, 0x06	; 6
    1220:	9f 93       	push	r25
    1222:	8f 93       	push	r24
    1224:	0e 94 42 11 	call	0x2284	; 0x2284 <printf>
    1228:	0f b6       	in	r0, 0x3f	; 63
    122a:	f8 94       	cli
    122c:	de bf       	out	0x3e, r29	; 62
    122e:	0f be       	out	0x3f, r0	; 63
    1230:	cd bf       	out	0x3d, r28	; 61
    1232:	60 96       	adiw	r28, 0x10	; 16
    1234:	0f b6       	in	r0, 0x3f	; 63
    1236:	f8 94       	cli
    1238:	de bf       	out	0x3e, r29	; 62
    123a:	0f be       	out	0x3f, r0	; 63
    123c:	cd bf       	out	0x3d, r28	; 61
    123e:	df 91       	pop	r29
    1240:	cf 91       	pop	r28
    1242:	1f 91       	pop	r17
    1244:	0f 91       	pop	r16
    1246:	ff 90       	pop	r15
    1248:	ef 90       	pop	r14
    124a:	df 90       	pop	r13
    124c:	cf 90       	pop	r12
    124e:	08 95       	ret

00001250 <startMotion>:
    1250:	90 93 ff 0b 	sts	0x0BFF, r25
    1254:	80 93 fe 0b 	sts	0x0BFE, r24
    1258:	70 93 fd 0b 	sts	0x0BFD, r23
    125c:	60 93 fc 0b 	sts	0x0BFC, r22
    1260:	20 91 04 0c 	lds	r18, 0x0C04
    1264:	30 91 05 0c 	lds	r19, 0x0C05
    1268:	23 2b       	or	r18, r19
    126a:	61 f4       	brne	.+24     	; 0x1284 <startMotion+0x34>
    126c:	90 93 07 0c 	sts	0x0C07, r25
    1270:	80 93 06 0c 	sts	0x0C06, r24
    1274:	70 93 05 0c 	sts	0x0C05, r23
    1278:	60 93 04 0c 	sts	0x0C04, r22
    127c:	10 92 fd 0b 	sts	0x0BFD, r1
    1280:	10 92 fc 0b 	sts	0x0BFC, r1
    1284:	08 95       	ret

00001286 <setModeAction>:
    1286:	80 91 04 0c 	lds	r24, 0x0C04
    128a:	90 91 05 0c 	lds	r25, 0x0C05
    128e:	18 16       	cp	r1, r24
    1290:	19 06       	cpc	r1, r25
    1292:	0c f4       	brge	.+2      	; 0x1296 <setModeAction+0x10>
    1294:	50 c0       	rjmp	.+160    	; 0x1336 <setModeAction+0xb0>
    1296:	80 91 0e 0c 	lds	r24, 0x0C0E
    129a:	90 91 0f 0c 	lds	r25, 0x0C0F
    129e:	01 97       	sbiw	r24, 0x01	; 1
    12a0:	09 f0       	breq	.+2      	; 0x12a4 <setModeAction+0x1e>
    12a2:	49 c0       	rjmp	.+146    	; 0x1336 <setModeAction+0xb0>
    12a4:	80 91 f6 0b 	lds	r24, 0x0BF6
    12a8:	90 91 f7 0b 	lds	r25, 0x0BF7
    12ac:	89 2b       	or	r24, r25
    12ae:	d1 f4       	brne	.+52     	; 0x12e4 <setModeAction+0x5e>
    12b0:	e0 91 08 0c 	lds	r30, 0x0C08
    12b4:	f0 91 09 0c 	lds	r31, 0x0C09
    12b8:	ee 0f       	add	r30, r30
    12ba:	ff 1f       	adc	r31, r31
    12bc:	ee 0f       	add	r30, r30
    12be:	ff 1f       	adc	r31, r31
    12c0:	e2 5f       	subi	r30, 0xF2	; 242
    12c2:	fd 4f       	sbci	r31, 0xFD	; 253
    12c4:	80 81       	ld	r24, Z
    12c6:	91 81       	ldd	r25, Z+1	; 0x01
    12c8:	02 97       	sbiw	r24, 0x02	; 2
    12ca:	61 f4       	brne	.+24     	; 0x12e4 <setModeAction+0x5e>
    12cc:	61 e0       	ldi	r22, 0x01	; 1
    12ce:	70 e0       	ldi	r23, 0x00	; 0
    12d0:	81 e0       	ldi	r24, 0x01	; 1
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	bd df       	rcall	.-134    	; 0x1250 <startMotion>
    12d6:	81 e0       	ldi	r24, 0x01	; 1
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	90 93 f7 0b 	sts	0x0BF7, r25
    12de:	80 93 f6 0b 	sts	0x0BF6, r24
    12e2:	08 95       	ret
    12e4:	10 92 f7 0b 	sts	0x0BF7, r1
    12e8:	10 92 f6 0b 	sts	0x0BF6, r1
    12ec:	e0 91 08 0c 	lds	r30, 0x0C08
    12f0:	f0 91 09 0c 	lds	r31, 0x0C09
    12f4:	ee 0f       	add	r30, r30
    12f6:	ff 1f       	adc	r31, r31
    12f8:	ee 0f       	add	r30, r30
    12fa:	ff 1f       	adc	r31, r31
    12fc:	e2 5f       	subi	r30, 0xF2	; 242
    12fe:	fd 4f       	sbci	r31, 0xFD	; 253
    1300:	62 81       	ldd	r22, Z+2	; 0x02
    1302:	73 81       	ldd	r23, Z+3	; 0x03
    1304:	80 81       	ld	r24, Z
    1306:	91 81       	ldd	r25, Z+1	; 0x01
    1308:	a3 df       	rcall	.-186    	; 0x1250 <startMotion>
    130a:	80 91 08 0c 	lds	r24, 0x0C08
    130e:	90 91 09 0c 	lds	r25, 0x0C09
    1312:	01 96       	adiw	r24, 0x01	; 1
    1314:	90 93 09 0c 	sts	0x0C09, r25
    1318:	80 93 08 0c 	sts	0x0C08, r24
    131c:	20 91 10 02 	lds	r18, 0x0210
    1320:	30 91 11 02 	lds	r19, 0x0211
    1324:	28 17       	cp	r18, r24
    1326:	39 07       	cpc	r19, r25
    1328:	34 f4       	brge	.+12     	; 0x1336 <setModeAction+0xb0>
    132a:	81 e0       	ldi	r24, 0x01	; 1
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	90 93 09 0c 	sts	0x0C09, r25
    1332:	80 93 08 0c 	sts	0x0C08, r24
    1336:	08 95       	ret

00001338 <forceMotion>:
    1338:	90 93 07 0c 	sts	0x0C07, r25
    133c:	80 93 06 0c 	sts	0x0C06, r24
    1340:	70 93 05 0c 	sts	0x0C05, r23
    1344:	60 93 04 0c 	sts	0x0C04, r22
    1348:	10 92 fd 0b 	sts	0x0BFD, r1
    134c:	10 92 fc 0b 	sts	0x0BFC, r1
    1350:	81 e0       	ldi	r24, 0x01	; 1
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	90 93 0d 02 	sts	0x020D, r25
    1358:	80 93 0c 02 	sts	0x020C, r24
    135c:	10 92 03 0c 	sts	0x0C03, r1
    1360:	10 92 02 0c 	sts	0x0C02, r1
    1364:	08 95       	ret

00001366 <stopMotion>:
    1366:	81 e0       	ldi	r24, 0x01	; 1
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	90 93 0d 02 	sts	0x020D, r25
    136e:	80 93 0c 02 	sts	0x020C, r24
    1372:	10 92 05 0c 	sts	0x0C05, r1
    1376:	10 92 04 0c 	sts	0x0C04, r1
    137a:	10 92 03 0c 	sts	0x0C03, r1
    137e:	10 92 02 0c 	sts	0x0C02, r1
    1382:	8f ef       	ldi	r24, 0xFF	; 255
    1384:	9f ef       	ldi	r25, 0xFF	; 255
    1386:	90 93 0b 02 	sts	0x020B, r25
    138a:	80 93 0a 02 	sts	0x020A, r24
    138e:	08 95       	ret

00001390 <PrintErrorCode>:
	
}

void PrintErrorCode()
{
	if(dxl_get_rxpacket_error(ERRBIT_VOLTAGE) == 1)
    1390:	81 e0       	ldi	r24, 0x01	; 1
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	0e 94 9b 00 	call	0x136	; 0x136 <dxl_get_rxpacket_error>
    1398:	01 97       	sbiw	r24, 0x01	; 1
    139a:	19 f4       	brne	.+6      	; 0x13a2 <PrintErrorCode+0x12>
	printf("Input voltage error!\n");
    139c:	83 e2       	ldi	r24, 0x23	; 35
    139e:	97 e0       	ldi	r25, 0x07	; 7
    13a0:	82 d7       	rcall	.+3844   	; 0x22a6 <puts>

	if(dxl_get_rxpacket_error(ERRBIT_ANGLE) == 1)
    13a2:	82 e0       	ldi	r24, 0x02	; 2
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	0e 94 9b 00 	call	0x136	; 0x136 <dxl_get_rxpacket_error>
    13aa:	01 97       	sbiw	r24, 0x01	; 1
    13ac:	19 f4       	brne	.+6      	; 0x13b4 <PrintErrorCode+0x24>
	printf("Angle limit error!\n");
    13ae:	88 e3       	ldi	r24, 0x38	; 56
    13b0:	97 e0       	ldi	r25, 0x07	; 7
    13b2:	79 d7       	rcall	.+3826   	; 0x22a6 <puts>

	if(dxl_get_rxpacket_error(ERRBIT_OVERHEAT) == 1)
    13b4:	84 e0       	ldi	r24, 0x04	; 4
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	0e 94 9b 00 	call	0x136	; 0x136 <dxl_get_rxpacket_error>
    13bc:	01 97       	sbiw	r24, 0x01	; 1
    13be:	19 f4       	brne	.+6      	; 0x13c6 <PrintErrorCode+0x36>
	printf("Overheat error!\n");
    13c0:	8b e4       	ldi	r24, 0x4B	; 75
    13c2:	97 e0       	ldi	r25, 0x07	; 7
    13c4:	70 d7       	rcall	.+3808   	; 0x22a6 <puts>

	if(dxl_get_rxpacket_error(ERRBIT_RANGE) == 1)
    13c6:	88 e0       	ldi	r24, 0x08	; 8
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	0e 94 9b 00 	call	0x136	; 0x136 <dxl_get_rxpacket_error>
    13ce:	01 97       	sbiw	r24, 0x01	; 1
    13d0:	19 f4       	brne	.+6      	; 0x13d8 <PrintErrorCode+0x48>
	printf("Out of range error!\n");
    13d2:	8b e5       	ldi	r24, 0x5B	; 91
    13d4:	97 e0       	ldi	r25, 0x07	; 7
    13d6:	67 d7       	rcall	.+3790   	; 0x22a6 <puts>

	if(dxl_get_rxpacket_error(ERRBIT_CHECKSUM) == 1)
    13d8:	80 e1       	ldi	r24, 0x10	; 16
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	0e 94 9b 00 	call	0x136	; 0x136 <dxl_get_rxpacket_error>
    13e0:	01 97       	sbiw	r24, 0x01	; 1
    13e2:	19 f4       	brne	.+6      	; 0x13ea <PrintErrorCode+0x5a>
	printf("Checksum error!\n");
    13e4:	8f e6       	ldi	r24, 0x6F	; 111
    13e6:	97 e0       	ldi	r25, 0x07	; 7
    13e8:	5e d7       	rcall	.+3772   	; 0x22a6 <puts>

	if(dxl_get_rxpacket_error(ERRBIT_OVERLOAD) == 1)
    13ea:	80 e2       	ldi	r24, 0x20	; 32
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	0e 94 9b 00 	call	0x136	; 0x136 <dxl_get_rxpacket_error>
    13f2:	01 97       	sbiw	r24, 0x01	; 1
    13f4:	19 f4       	brne	.+6      	; 0x13fc <PrintErrorCode+0x6c>
	printf("Overload error!\n");
    13f6:	8f e7       	ldi	r24, 0x7F	; 127
    13f8:	97 e0       	ldi	r25, 0x07	; 7
    13fa:	55 d7       	rcall	.+3754   	; 0x22a6 <puts>

	if(dxl_get_rxpacket_error(ERRBIT_INSTRUCTION) == 1)
    13fc:	80 e4       	ldi	r24, 0x40	; 64
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	0e 94 9b 00 	call	0x136	; 0x136 <dxl_get_rxpacket_error>
    1404:	01 97       	sbiw	r24, 0x01	; 1
    1406:	19 f4       	brne	.+6      	; 0x140e <PrintErrorCode+0x7e>
	printf("Instruction code error!\n");
    1408:	8f e8       	ldi	r24, 0x8F	; 143
    140a:	97 e0       	ldi	r25, 0x07	; 7
    140c:	4c c7       	rjmp	.+3736   	; 0x22a6 <puts>
    140e:	08 95       	ret

00001410 <PrintCommStatus>:
}

// Print communication result
void PrintCommStatus(int CommStatus)
{
	switch(CommStatus)
    1410:	84 30       	cpi	r24, 0x04	; 4
    1412:	91 05       	cpc	r25, r1
    1414:	91 f0       	breq	.+36     	; 0x143a <PrintCommStatus+0x2a>
    1416:	34 f4       	brge	.+12     	; 0x1424 <PrintCommStatus+0x14>
    1418:	82 30       	cpi	r24, 0x02	; 2
    141a:	91 05       	cpc	r25, r1
    141c:	51 f0       	breq	.+20     	; 0x1432 <PrintCommStatus+0x22>
    141e:	03 97       	sbiw	r24, 0x03	; 3
    1420:	81 f0       	breq	.+32     	; 0x1442 <PrintCommStatus+0x32>
    1422:	1f c0       	rjmp	.+62     	; 0x1462 <PrintCommStatus+0x52>
    1424:	86 30       	cpi	r24, 0x06	; 6
    1426:	91 05       	cpc	r25, r1
    1428:	a1 f0       	breq	.+40     	; 0x1452 <PrintCommStatus+0x42>
    142a:	7c f0       	brlt	.+30     	; 0x144a <PrintCommStatus+0x3a>
    142c:	07 97       	sbiw	r24, 0x07	; 7
    142e:	a9 f0       	breq	.+42     	; 0x145a <PrintCommStatus+0x4a>
    1430:	18 c0       	rjmp	.+48     	; 0x1462 <PrintCommStatus+0x52>
	{
		case COMM_TXFAIL:
		printf("COMM_TXFAIL: Failed transmit instruction packet!\n");
    1432:	87 ea       	ldi	r24, 0xA7	; 167
    1434:	97 e0       	ldi	r25, 0x07	; 7
    1436:	37 c7       	rjmp	.+3694   	; 0x22a6 <puts>
		break;
    1438:	08 95       	ret

		case COMM_TXERROR:
		printf("COMM_TXERROR: Incorrect instruction packet!\n");
    143a:	88 ed       	ldi	r24, 0xD8	; 216
    143c:	97 e0       	ldi	r25, 0x07	; 7
    143e:	33 c7       	rjmp	.+3686   	; 0x22a6 <puts>
		break;
    1440:	08 95       	ret

		case COMM_RXFAIL:
		printf("COMM_RXFAIL: Failed get status packet from device!\n");
    1442:	84 e0       	ldi	r24, 0x04	; 4
    1444:	98 e0       	ldi	r25, 0x08	; 8
    1446:	2f c7       	rjmp	.+3678   	; 0x22a6 <puts>
		break;
    1448:	08 95       	ret

		case COMM_RXWAITING:
		printf("COMM_RXWAITING: Now recieving status packet!\n");
    144a:	87 e3       	ldi	r24, 0x37	; 55
    144c:	98 e0       	ldi	r25, 0x08	; 8
    144e:	2b c7       	rjmp	.+3670   	; 0x22a6 <puts>
		break;
    1450:	08 95       	ret

		case COMM_RXTIMEOUT:
		printf("COMM_RXTIMEOUT: There is no status packet!\n");
    1452:	84 e6       	ldi	r24, 0x64	; 100
    1454:	98 e0       	ldi	r25, 0x08	; 8
    1456:	27 c7       	rjmp	.+3662   	; 0x22a6 <puts>
		break;
    1458:	08 95       	ret

		case COMM_RXCORRUPT:
		printf("COMM_RXCORRUPT: Incorrect status packet!\n");
    145a:	8f e8       	ldi	r24, 0x8F	; 143
    145c:	98 e0       	ldi	r25, 0x08	; 8
    145e:	23 c7       	rjmp	.+3654   	; 0x22a6 <puts>
		break;
    1460:	08 95       	ret

		default:
		printf("This is unknown error code!\n");
    1462:	88 eb       	ldi	r24, 0xB8	; 184
    1464:	98 e0       	ldi	r25, 0x08	; 8
    1466:	1f c7       	rjmp	.+3646   	; 0x22a6 <puts>
    1468:	08 95       	ret

0000146a <MotorControl>:
	
	printf( "getVoltage() %d:%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d\n",
	EVT_GET_VOLTAGE, tmp[0],tmp[1],tmp[2],tmp[3],tmp[4],tmp[5],tmp[6],tmp[7],tmp[8],tmp[9],tmp[10],tmp[11] );
}

void MotorControl( int id, int power ){
    146a:	0f 93       	push	r16
    146c:	1f 93       	push	r17
    146e:	cf 93       	push	r28
    1470:	df 93       	push	r29
    1472:	8c 01       	movw	r16, r24
    1474:	eb 01       	movw	r28, r22
	int CommStatus;
//	printf( "%d %d\n", id, power );
//	dxl_write_word( id, P_GOAL_SPEED_L, power );
	if(1){
		dxl_set_txpacket_id(BROADCAST_ID);
    1476:	8e ef       	ldi	r24, 0xFE	; 254
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	0e 94 8d 00 	call	0x11a	; 0x11a <dxl_set_txpacket_id>
		dxl_set_txpacket_instruction(INST_SYNC_WRITE);
    147e:	83 e8       	ldi	r24, 0x83	; 131
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	0e 94 90 00 	call	0x120	; 0x120 <dxl_set_txpacket_instruction>
		dxl_set_txpacket_parameter(0, P_GOAL_SPEED_L);
    1486:	60 e2       	ldi	r22, 0x20	; 32
    1488:	70 e0       	ldi	r23, 0x00	; 0
    148a:	80 e0       	ldi	r24, 0x00	; 0
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	0e 94 93 00 	call	0x126	; 0x126 <dxl_set_txpacket_parameter>
		dxl_set_txpacket_parameter(1, 2);
    1492:	62 e0       	ldi	r22, 0x02	; 2
    1494:	70 e0       	ldi	r23, 0x00	; 0
    1496:	81 e0       	ldi	r24, 0x01	; 1
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	0e 94 93 00 	call	0x126	; 0x126 <dxl_set_txpacket_parameter>
		dxl_set_txpacket_parameter(2, id);
    149e:	b8 01       	movw	r22, r16
    14a0:	82 e0       	ldi	r24, 0x02	; 2
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	0e 94 93 00 	call	0x126	; 0x126 <dxl_set_txpacket_parameter>
		dxl_set_txpacket_parameter(3, dxl_get_lowbyte(power));
    14a8:	ce 01       	movw	r24, r28
    14aa:	0e 94 b5 00 	call	0x16a	; 0x16a <dxl_get_lowbyte>
    14ae:	bc 01       	movw	r22, r24
    14b0:	83 e0       	ldi	r24, 0x03	; 3
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	0e 94 93 00 	call	0x126	; 0x126 <dxl_set_txpacket_parameter>
		dxl_set_txpacket_parameter(4, dxl_get_highbyte(power));
    14b8:	ce 01       	movw	r24, r28
    14ba:	0e 94 b9 00 	call	0x172	; 0x172 <dxl_get_highbyte>
    14be:	bc 01       	movw	r22, r24
    14c0:	84 e0       	ldi	r24, 0x04	; 4
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	0e 94 93 00 	call	0x126	; 0x126 <dxl_set_txpacket_parameter>
		dxl_set_txpacket_length(4+3*1);
    14c8:	87 e0       	ldi	r24, 0x07	; 7
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	0e 94 98 00 	call	0x130	; 0x130 <dxl_set_txpacket_length>
		dxl_txrx_packet();
    14d0:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <dxl_txrx_packet>
		CommStatus = dxl_get_result();
    14d4:	0e 94 88 00 	call	0x110	; 0x110 <dxl_get_result>
		if( CommStatus == COMM_RXSUCCESS )
    14d8:	81 30       	cpi	r24, 0x01	; 1
    14da:	91 05       	cpc	r25, r1
    14dc:	11 f4       	brne	.+4      	; 0x14e2 <MotorControl+0x78>
			PrintErrorCode();
    14de:	58 df       	rcall	.-336    	; 0x1390 <PrintErrorCode>
    14e0:	01 c0       	rjmp	.+2      	; 0x14e4 <MotorControl+0x7a>
		else
			PrintCommStatus(CommStatus);
    14e2:	96 df       	rcall	.-212    	; 0x1410 <PrintCommStatus>
	}
}
    14e4:	df 91       	pop	r29
    14e6:	cf 91       	pop	r28
    14e8:	1f 91       	pop	r17
    14ea:	0f 91       	pop	r16
    14ec:	08 95       	ret

000014ee <ServoControl>:
//	printf( "%d:%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d: %d:\n",
//	EVT_ACTION, speed[0],speed[1],speed[2],speed[3],speed[4],
//	speed[5],speed[6],speed[7],speed[8],speed[9],speed[10],speed[11], movingTime );
}

void ServoControl( int act ){
    14ee:	2f 92       	push	r2
    14f0:	3f 92       	push	r3
    14f2:	4f 92       	push	r4
    14f4:	5f 92       	push	r5
    14f6:	6f 92       	push	r6
    14f8:	7f 92       	push	r7
    14fa:	8f 92       	push	r8
    14fc:	9f 92       	push	r9
    14fe:	af 92       	push	r10
    1500:	bf 92       	push	r11
    1502:	cf 92       	push	r12
    1504:	df 92       	push	r13
    1506:	ef 92       	push	r14
    1508:	ff 92       	push	r15
    150a:	0f 93       	push	r16
    150c:	1f 93       	push	r17
    150e:	cf 93       	push	r28
    1510:	df 93       	push	r29
    1512:	cd b7       	in	r28, 0x3d	; 61
    1514:	de b7       	in	r29, 0x3e	; 62
    1516:	aa 97       	sbiw	r28, 0x2a	; 42
    1518:	0f b6       	in	r0, 0x3f	; 63
    151a:	f8 94       	cli
    151c:	de bf       	out	0x3e, r29	; 62
    151e:	0f be       	out	0x3f, r0	; 63
    1520:	cd bf       	out	0x3d, r28	; 61
    1522:	9e a3       	std	Y+38, r25	; 0x26
    1524:	8d a3       	std	Y+37, r24	; 0x25
//	printf( "###### ServoControl() START act:%d\n #######\n", act );
	int i;
	int CommStatus = 0;
	if( act >= ACT_MAX ){
    1526:	82 33       	cpi	r24, 0x32	; 50
    1528:	91 05       	cpc	r25, r1
    152a:	94 f0       	brlt	.+36     	; 0x1550 <ServoControl+0x62>
		printf( "act error: %d / %d\n", act, SERVO_MAX );
    152c:	1f 92       	push	r1
    152e:	88 e0       	ldi	r24, 0x08	; 8
    1530:	8f 93       	push	r24
    1532:	9f 93       	push	r25
    1534:	2d a1       	ldd	r18, Y+37	; 0x25
    1536:	2f 93       	push	r18
    1538:	84 ed       	ldi	r24, 0xD4	; 212
    153a:	98 e0       	ldi	r25, 0x08	; 8
    153c:	9f 93       	push	r25
    153e:	8f 93       	push	r24
    1540:	a1 d6       	rcall	.+3394   	; 0x2284 <printf>
		return;
    1542:	0f 90       	pop	r0
    1544:	0f 90       	pop	r0
    1546:	0f 90       	pop	r0
    1548:	0f 90       	pop	r0
    154a:	0f 90       	pop	r0
    154c:	0f 90       	pop	r0
    154e:	78 c1       	rjmp	.+752    	; 0x1840 <ServoControl+0x352>
	}
	
	//GetAngle
	int angle = 0;
	int diffMax = 0;
	int angleDiff[SERVO_MAX] = {0};
    1550:	fe 01       	movw	r30, r28
    1552:	31 96       	adiw	r30, 0x01	; 1
    1554:	80 e1       	ldi	r24, 0x10	; 16
    1556:	df 01       	movw	r26, r30
    1558:	1d 92       	st	X+, r1
    155a:	8a 95       	dec	r24
    155c:	e9 f7       	brne	.-6      	; 0x1558 <ServoControl+0x6a>
    155e:	8d a1       	ldd	r24, Y+37	; 0x25
    1560:	9e a1       	ldd	r25, Y+38	; 0x26
    1562:	88 0f       	add	r24, r24
    1564:	99 1f       	adc	r25, r25
    1566:	9c 01       	movw	r18, r24
    1568:	22 0f       	add	r18, r18
    156a:	33 1f       	adc	r19, r19
    156c:	22 0f       	add	r18, r18
    156e:	33 1f       	adc	r19, r19
    1570:	22 0f       	add	r18, r18
    1572:	33 1f       	adc	r19, r19
    1574:	82 0f       	add	r24, r18
    1576:	93 1f       	adc	r25, r19
    1578:	9c 01       	movw	r18, r24
    157a:	2a 56       	subi	r18, 0x6A	; 106
    157c:	3d 4f       	sbci	r19, 0xFD	; 253
    157e:	38 a7       	std	Y+40, r19	; 0x28
    1580:	2f a3       	std	Y+39, r18	; 0x27
    1582:	6e 2e       	mov	r6, r30
    1584:	7f 2e       	mov	r7, r31
    1586:	0f 2e       	mov	r0, r31
    1588:	fa e2       	ldi	r31, 0x2A	; 42
    158a:	8f 2e       	mov	r8, r31
    158c:	f6 e0       	ldi	r31, 0x06	; 6
    158e:	9f 2e       	mov	r9, r31
    1590:	f0 2d       	mov	r31, r0
    1592:	7f 01       	movw	r14, r30
    1594:	69 01       	movw	r12, r18
    1596:	0a e1       	ldi	r16, 0x1A	; 26
    1598:	16 e0       	ldi	r17, 0x06	; 6
		return;
	}
	
	//GetAngle
	int angle = 0;
	int diffMax = 0;
    159a:	a1 2c       	mov	r10, r1
    159c:	b1 2c       	mov	r11, r1
	int angleDiff[SERVO_MAX] = {0};
	for(int i=0; i<SERVO_MAX; i++ ){
//		if( motionFirst < 0 ){
			angle = dxl_read_word( servoId[i], P_PRESENT_POSITION_L );
    159e:	64 e2       	ldi	r22, 0x24	; 36
    15a0:	70 e0       	ldi	r23, 0x00	; 0
    15a2:	d8 01       	movw	r26, r16
    15a4:	8d 91       	ld	r24, X+
    15a6:	9d 91       	ld	r25, X+
    15a8:	8d 01       	movw	r16, r26
    15aa:	0e 94 15 02 	call	0x42a	; 0x42a <dxl_read_word>
//printf( "### ServoControl() servoId[%d]:%d\n", i, servoId[i] );
//		}else{
//			angle = angleList[motionFirst][i];
//		}
//printf( "### ServoControl() angle:%d\n", angle );
		angleDiff[i] = angleList[act][i] - angle;
    15ae:	f6 01       	movw	r30, r12
    15b0:	21 91       	ld	r18, Z+
    15b2:	31 91       	ld	r19, Z+
    15b4:	6f 01       	movw	r12, r30
    15b6:	a9 01       	movw	r20, r18
    15b8:	48 1b       	sub	r20, r24
    15ba:	59 0b       	sbc	r21, r25
    15bc:	ca 01       	movw	r24, r20
//printf( "### ServoControl() angleDiff[%d]:%d\n", i, angleDiff[i]);
		if( angleDiff[i] < 0 ){
    15be:	99 23       	and	r25, r25
    15c0:	24 f0       	brlt	.+8      	; 0x15ca <ServoControl+0xdc>
//printf( "### ServoControl() servoId[%d]:%d\n", i, servoId[i] );
//		}else{
//			angle = angleList[motionFirst][i];
//		}
//printf( "### ServoControl() angle:%d\n", angle );
		angleDiff[i] = angleList[act][i] - angle;
    15c2:	d7 01       	movw	r26, r14
    15c4:	4d 93       	st	X+, r20
    15c6:	5c 93       	st	X, r21
    15c8:	06 c0       	rjmp	.+12     	; 0x15d6 <ServoControl+0xe8>
//printf( "### ServoControl() angleDiff[%d]:%d\n", i, angleDiff[i]);
		if( angleDiff[i] < 0 ){
			angleDiff[i] = angleDiff[i] * -1;
    15ca:	91 95       	neg	r25
    15cc:	81 95       	neg	r24
    15ce:	91 09       	sbc	r25, r1
    15d0:	f7 01       	movw	r30, r14
    15d2:	91 83       	std	Z+1, r25	; 0x01
    15d4:	80 83       	st	Z, r24
		}
		if( diffMax < angleDiff[i] ){
    15d6:	d7 01       	movw	r26, r14
    15d8:	8d 91       	ld	r24, X+
    15da:	9d 91       	ld	r25, X+
    15dc:	7d 01       	movw	r14, r26
    15de:	a8 16       	cp	r10, r24
    15e0:	b9 06       	cpc	r11, r25
    15e2:	0c f4       	brge	.+2      	; 0x15e6 <ServoControl+0xf8>
    15e4:	5c 01       	movw	r10, r24
	
	//GetAngle
	int angle = 0;
	int diffMax = 0;
	int angleDiff[SERVO_MAX] = {0};
	for(int i=0; i<SERVO_MAX; i++ ){
    15e6:	08 15       	cp	r16, r8
    15e8:	19 05       	cpc	r17, r9
    15ea:	c9 f6       	brne	.-78     	; 0x159e <ServoControl+0xb0>
		}
//		printf( "### ServoControl() diffMax:%d\n", diffMax);
	}
//	motionFirst = act;
	
	int speed[SERVO_MAX] = {100};
    15ec:	8e 01       	movw	r16, r28
    15ee:	0f 5e       	subi	r16, 0xEF	; 239
    15f0:	1f 4f       	sbci	r17, 0xFF	; 255
    15f2:	80 e1       	ldi	r24, 0x10	; 16
    15f4:	f8 01       	movw	r30, r16
    15f6:	11 92       	st	Z+, r1
    15f8:	8a 95       	dec	r24
    15fa:	e9 f7       	brne	.-6      	; 0x15f6 <ServoControl+0x108>
    15fc:	84 e6       	ldi	r24, 0x64	; 100
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	9a 8b       	std	Y+18, r25	; 0x12
    1602:	89 8b       	std	Y+17, r24	; 0x11
	for(int i=0; i<SERVO_MAX; i++ ){
		speed[i] = (int)((float)(angleList[act][SERVO_MAX]) * ((float)angleDiff[i] / diffMax));
    1604:	8d a1       	ldd	r24, Y+37	; 0x25
    1606:	9e a1       	ldd	r25, Y+38	; 0x26
    1608:	88 0f       	add	r24, r24
    160a:	99 1f       	adc	r25, r25
    160c:	fc 01       	movw	r30, r24
    160e:	ee 0f       	add	r30, r30
    1610:	ff 1f       	adc	r31, r31
    1612:	ee 0f       	add	r30, r30
    1614:	ff 1f       	adc	r31, r31
    1616:	ee 0f       	add	r30, r30
    1618:	ff 1f       	adc	r31, r31
    161a:	8e 0f       	add	r24, r30
    161c:	9f 1f       	adc	r25, r31
    161e:	fc 01       	movw	r30, r24
    1620:	ea 56       	subi	r30, 0x6A	; 106
    1622:	fd 4f       	sbci	r31, 0xFD	; 253
    1624:	60 89       	ldd	r22, Z+16	; 0x10
    1626:	71 89       	ldd	r23, Z+17	; 0x11
    1628:	88 27       	eor	r24, r24
    162a:	77 fd       	sbrc	r23, 7
    162c:	80 95       	com	r24
    162e:	98 2f       	mov	r25, r24
    1630:	10 d4       	rcall	.+2080   	; 0x1e52 <__floatsisf>
    1632:	6b 01       	movw	r12, r22
    1634:	7c 01       	movw	r14, r24
    1636:	09 a7       	std	Y+41, r16	; 0x29
    1638:	1a a7       	std	Y+42, r17	; 0x2a
    163a:	1a a3       	std	Y+34, r17	; 0x22
    163c:	09 a3       	std	Y+33, r16	; 0x21
    163e:	18 01       	movw	r2, r16
    1640:	06 2d       	mov	r16, r6
    1642:	17 2d       	mov	r17, r7
    1644:	45 01       	movw	r8, r10
    1646:	aa 24       	eor	r10, r10
    1648:	97 fc       	sbrc	r9, 7
    164a:	a0 94       	com	r10
    164c:	ba 2c       	mov	r11, r10
    164e:	d8 01       	movw	r26, r16
    1650:	ed 91       	ld	r30, X+
    1652:	fd 91       	ld	r31, X+
    1654:	8d 01       	movw	r16, r26
    1656:	fc a3       	std	Y+36, r31	; 0x24
    1658:	eb a3       	std	Y+35, r30	; 0x23
    165a:	c5 01       	movw	r24, r10
    165c:	b4 01       	movw	r22, r8
    165e:	f9 d3       	rcall	.+2034   	; 0x1e52 <__floatsisf>
    1660:	2b 01       	movw	r4, r22
    1662:	3c 01       	movw	r6, r24
    1664:	2b a1       	ldd	r18, Y+35	; 0x23
    1666:	3c a1       	ldd	r19, Y+36	; 0x24
    1668:	b9 01       	movw	r22, r18
    166a:	88 27       	eor	r24, r24
    166c:	77 fd       	sbrc	r23, 7
    166e:	80 95       	com	r24
    1670:	98 2f       	mov	r25, r24
    1672:	ef d3       	rcall	.+2014   	; 0x1e52 <__floatsisf>
    1674:	a3 01       	movw	r20, r6
    1676:	92 01       	movw	r18, r4
    1678:	51 d3       	rcall	.+1698   	; 0x1d1c <__divsf3>
    167a:	9b 01       	movw	r18, r22
    167c:	ac 01       	movw	r20, r24
    167e:	c7 01       	movw	r24, r14
    1680:	b6 01       	movw	r22, r12
    1682:	73 d4       	rcall	.+2278   	; 0x1f6a <__mulsf3>
    1684:	b3 d3       	rcall	.+1894   	; 0x1dec <__fixsfsi>
		if( speed[i] == 0 ){
    1686:	61 15       	cp	r22, r1
    1688:	71 05       	cpc	r23, r1
    168a:	21 f0       	breq	.+8      	; 0x1694 <ServoControl+0x1a6>
	}
//	motionFirst = act;
	
	int speed[SERVO_MAX] = {100};
	for(int i=0; i<SERVO_MAX; i++ ){
		speed[i] = (int)((float)(angleList[act][SERVO_MAX]) * ((float)angleDiff[i] / diffMax));
    168c:	d1 01       	movw	r26, r2
    168e:	6d 93       	st	X+, r22
    1690:	7c 93       	st	X, r23
    1692:	05 c0       	rjmp	.+10     	; 0x169e <ServoControl+0x1b0>
		if( speed[i] == 0 ){
			speed[i] = 1;
    1694:	21 e0       	ldi	r18, 0x01	; 1
    1696:	30 e0       	ldi	r19, 0x00	; 0
    1698:	f1 01       	movw	r30, r2
    169a:	31 83       	std	Z+1, r19	; 0x01
    169c:	20 83       	st	Z, r18
    169e:	32 e0       	ldi	r19, 0x02	; 2
    16a0:	23 0e       	add	r2, r19
    16a2:	31 1c       	adc	r3, r1
//		printf( "### ServoControl() diffMax:%d\n", diffMax);
	}
//	motionFirst = act;
	
	int speed[SERVO_MAX] = {100};
	for(int i=0; i<SERVO_MAX; i++ ){
    16a4:	49 a1       	ldd	r20, Y+33	; 0x21
    16a6:	5a a1       	ldd	r21, Y+34	; 0x22
    16a8:	04 17       	cp	r16, r20
    16aa:	15 07       	cpc	r17, r21
    16ac:	81 f6       	brne	.-96     	; 0x164e <ServoControl+0x160>
		}
	}

//    diffmaxTest[motionCount-1] = diffMax;
//	movingTime = ((float)CYCLE_TIME/VALUE_MAX) * ((float)VALUE_MAX / angleList[act][SERVO_MAX]) * diffMax;
    movingTime = diffMax * (float)(((VALUE_MAX*10)/angleList[act][SERVO_MAX])/2);
    16ae:	8d a1       	ldd	r24, Y+37	; 0x25
    16b0:	9e a1       	ldd	r25, Y+38	; 0x26
    16b2:	88 0f       	add	r24, r24
    16b4:	99 1f       	adc	r25, r25
    16b6:	fc 01       	movw	r30, r24
    16b8:	ee 0f       	add	r30, r30
    16ba:	ff 1f       	adc	r31, r31
    16bc:	ee 0f       	add	r30, r30
    16be:	ff 1f       	adc	r31, r31
    16c0:	ee 0f       	add	r30, r30
    16c2:	ff 1f       	adc	r31, r31
    16c4:	8e 0f       	add	r24, r30
    16c6:	9f 1f       	adc	r25, r31
    16c8:	fc 01       	movw	r30, r24
    16ca:	ea 56       	subi	r30, 0x6A	; 106
    16cc:	fd 4f       	sbci	r31, 0xFD	; 253
    16ce:	60 89       	ldd	r22, Z+16	; 0x10
    16d0:	71 89       	ldd	r23, Z+17	; 0x11
    16d2:	8b ef       	ldi	r24, 0xFB	; 251
    16d4:	93 e1       	ldi	r25, 0x13	; 19
    16d6:	d8 d4       	rcall	.+2480   	; 0x2088 <__divmodhi4>
    16d8:	88 27       	eor	r24, r24
    16da:	77 fd       	sbrc	r23, 7
    16dc:	80 95       	com	r24
    16de:	98 2f       	mov	r25, r24
    16e0:	b8 d3       	rcall	.+1904   	; 0x1e52 <__floatsisf>
    16e2:	9b 01       	movw	r18, r22
    16e4:	ac 01       	movw	r20, r24
    16e6:	c3 01       	movw	r24, r6
    16e8:	b2 01       	movw	r22, r4
    16ea:	3f d4       	rcall	.+2174   	; 0x1f6a <__mulsf3>
    16ec:	7f d3       	rcall	.+1790   	; 0x1dec <__fixsfsi>
	if( movingTime < MAIN_DELAY ){
    16ee:	6a 30       	cpi	r22, 0x0A	; 10
    16f0:	71 05       	cpc	r23, r1
    16f2:	2c f0       	brlt	.+10     	; 0x16fe <ServoControl+0x210>
		}
	}

//    diffmaxTest[motionCount-1] = diffMax;
//	movingTime = ((float)CYCLE_TIME/VALUE_MAX) * ((float)VALUE_MAX / angleList[act][SERVO_MAX]) * diffMax;
    movingTime = diffMax * (float)(((VALUE_MAX*10)/angleList[act][SERVO_MAX])/2);
    16f4:	70 93 01 0c 	sts	0x0C01, r23
    16f8:	60 93 00 0c 	sts	0x0C00, r22
    16fc:	06 c0       	rjmp	.+12     	; 0x170a <ServoControl+0x21c>
	if( movingTime < MAIN_DELAY ){
		movingTime = MAIN_DELAY;
    16fe:	8a e0       	ldi	r24, 0x0A	; 10
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	90 93 01 0c 	sts	0x0C01, r25
    1706:	80 93 00 0c 	sts	0x0C00, r24
	}
	
	//Speed
	dxl_set_txpacket_id(BROADCAST_ID);
    170a:	8e ef       	ldi	r24, 0xFE	; 254
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	0e 94 8d 00 	call	0x11a	; 0x11a <dxl_set_txpacket_id>
	dxl_set_txpacket_instruction(INST_SYNC_WRITE);
    1712:	83 e8       	ldi	r24, 0x83	; 131
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	0e 94 90 00 	call	0x120	; 0x120 <dxl_set_txpacket_instruction>
	dxl_set_txpacket_parameter(0, P_GOAL_SPEED_L);
    171a:	60 e2       	ldi	r22, 0x20	; 32
    171c:	70 e0       	ldi	r23, 0x00	; 0
    171e:	80 e0       	ldi	r24, 0x00	; 0
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	0e 94 93 00 	call	0x126	; 0x126 <dxl_set_txpacket_parameter>
	dxl_set_txpacket_parameter(1, 2);
    1726:	62 e0       	ldi	r22, 0x02	; 2
    1728:	70 e0       	ldi	r23, 0x00	; 0
    172a:	81 e0       	ldi	r24, 0x01	; 1
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	0e 94 93 00 	call	0x126	; 0x126 <dxl_set_txpacket_parameter>
    1732:	c9 a4       	ldd	r12, Y+41	; 0x29
    1734:	da a4       	ldd	r13, Y+42	; 0x2a
    1736:	0f 2e       	mov	r0, r31
    1738:	fa e1       	ldi	r31, 0x1A	; 26
    173a:	af 2e       	mov	r10, r31
    173c:	f6 e0       	ldi	r31, 0x06	; 6
    173e:	bf 2e       	mov	r11, r31
    1740:	f0 2d       	mov	r31, r0
    1742:	02 e0       	ldi	r16, 0x02	; 2
    1744:	10 e0       	ldi	r17, 0x00	; 0
	for( i=0; i<SERVO_MAX; i++ ){
		dxl_set_txpacket_parameter(2+(3*i), servoId[i]);
    1746:	d5 01       	movw	r26, r10
    1748:	6d 91       	ld	r22, X+
    174a:	7d 91       	ld	r23, X+
    174c:	5d 01       	movw	r10, r26
    174e:	c8 01       	movw	r24, r16
    1750:	0e 94 93 00 	call	0x126	; 0x126 <dxl_set_txpacket_parameter>
		dxl_set_txpacket_parameter(3+(3*i), dxl_get_lowbyte(speed[i]));
    1754:	f6 01       	movw	r30, r12
    1756:	e1 90       	ld	r14, Z+
    1758:	f1 90       	ld	r15, Z+
    175a:	6f 01       	movw	r12, r30
    175c:	c7 01       	movw	r24, r14
    175e:	0e 94 b5 00 	call	0x16a	; 0x16a <dxl_get_lowbyte>
    1762:	bc 01       	movw	r22, r24
    1764:	c8 01       	movw	r24, r16
    1766:	01 96       	adiw	r24, 0x01	; 1
    1768:	0e 94 93 00 	call	0x126	; 0x126 <dxl_set_txpacket_parameter>
		dxl_set_txpacket_parameter(4+(3*i), dxl_get_highbyte(speed[i]));
    176c:	c7 01       	movw	r24, r14
    176e:	0e 94 b9 00 	call	0x172	; 0x172 <dxl_get_highbyte>
    1772:	bc 01       	movw	r22, r24
    1774:	c8 01       	movw	r24, r16
    1776:	02 96       	adiw	r24, 0x02	; 2
    1778:	0e 94 93 00 	call	0x126	; 0x126 <dxl_set_txpacket_parameter>
    177c:	0d 5f       	subi	r16, 0xFD	; 253
    177e:	1f 4f       	sbci	r17, 0xFF	; 255
	//Speed
	dxl_set_txpacket_id(BROADCAST_ID);
	dxl_set_txpacket_instruction(INST_SYNC_WRITE);
	dxl_set_txpacket_parameter(0, P_GOAL_SPEED_L);
	dxl_set_txpacket_parameter(1, 2);
	for( i=0; i<SERVO_MAX; i++ ){
    1780:	0a 31       	cpi	r16, 0x1A	; 26
    1782:	11 05       	cpc	r17, r1
    1784:	01 f7       	brne	.-64     	; 0x1746 <ServoControl+0x258>
		dxl_set_txpacket_parameter(2+(3*i), servoId[i]);
		dxl_set_txpacket_parameter(3+(3*i), dxl_get_lowbyte(speed[i]));
		dxl_set_txpacket_parameter(4+(3*i), dxl_get_highbyte(speed[i]));
	}
	dxl_set_txpacket_length(4+3*SERVO_MAX);
    1786:	8c e1       	ldi	r24, 0x1C	; 28
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	0e 94 98 00 	call	0x130	; 0x130 <dxl_set_txpacket_length>
	dxl_txrx_packet();
    178e:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <dxl_txrx_packet>
	CommStatus = dxl_get_result();
    1792:	0e 94 88 00 	call	0x110	; 0x110 <dxl_get_result>
	if( CommStatus == COMM_RXSUCCESS ){
    1796:	81 30       	cpi	r24, 0x01	; 1
    1798:	91 05       	cpc	r25, r1
    179a:	09 f0       	breq	.+2      	; 0x179e <ServoControl+0x2b0>
    179c:	50 c0       	rjmp	.+160    	; 0x183e <ServoControl+0x350>
		PrintErrorCode();
    179e:	f8 dd       	rcall	.-1040   	; 0x1390 <PrintErrorCode>
		
		//Angle
		dxl_set_txpacket_id(BROADCAST_ID);
    17a0:	8e ef       	ldi	r24, 0xFE	; 254
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	0e 94 8d 00 	call	0x11a	; 0x11a <dxl_set_txpacket_id>
		dxl_set_txpacket_instruction(INST_SYNC_WRITE);
    17a8:	83 e8       	ldi	r24, 0x83	; 131
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	0e 94 90 00 	call	0x120	; 0x120 <dxl_set_txpacket_instruction>
		dxl_set_txpacket_parameter(0, P_GOAL_POSITION_L);
    17b0:	6e e1       	ldi	r22, 0x1E	; 30
    17b2:	70 e0       	ldi	r23, 0x00	; 0
    17b4:	80 e0       	ldi	r24, 0x00	; 0
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	0e 94 93 00 	call	0x126	; 0x126 <dxl_set_txpacket_parameter>
		dxl_set_txpacket_parameter(1, 2);
    17bc:	62 e0       	ldi	r22, 0x02	; 2
    17be:	70 e0       	ldi	r23, 0x00	; 0
    17c0:	81 e0       	ldi	r24, 0x01	; 1
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	0e 94 93 00 	call	0x126	; 0x126 <dxl_set_txpacket_parameter>
    17c8:	ef a0       	ldd	r14, Y+39	; 0x27
    17ca:	f8 a4       	ldd	r15, Y+40	; 0x28
    17cc:	0f 2e       	mov	r0, r31
    17ce:	fa e1       	ldi	r31, 0x1A	; 26
    17d0:	cf 2e       	mov	r12, r31
    17d2:	f6 e0       	ldi	r31, 0x06	; 6
    17d4:	df 2e       	mov	r13, r31
    17d6:	f0 2d       	mov	r31, r0
    17d8:	02 e0       	ldi	r16, 0x02	; 2
    17da:	10 e0       	ldi	r17, 0x00	; 0
		for( i=0; i<SERVO_MAX; i++ ){
			dxl_set_txpacket_parameter(2+(3*i), servoId[i]);
    17dc:	d6 01       	movw	r26, r12
    17de:	6d 91       	ld	r22, X+
    17e0:	7d 91       	ld	r23, X+
    17e2:	6d 01       	movw	r12, r26
    17e4:	c8 01       	movw	r24, r16
    17e6:	0e 94 93 00 	call	0x126	; 0x126 <dxl_set_txpacket_parameter>
    17ea:	57 01       	movw	r10, r14
			dxl_set_txpacket_parameter(3+(3*i), dxl_get_lowbyte(angleList[act][i]));
    17ec:	f7 01       	movw	r30, r14
    17ee:	81 91       	ld	r24, Z+
    17f0:	91 91       	ld	r25, Z+
    17f2:	7f 01       	movw	r14, r30
    17f4:	0e 94 b5 00 	call	0x16a	; 0x16a <dxl_get_lowbyte>
    17f8:	bc 01       	movw	r22, r24
    17fa:	c8 01       	movw	r24, r16
    17fc:	01 96       	adiw	r24, 0x01	; 1
    17fe:	0e 94 93 00 	call	0x126	; 0x126 <dxl_set_txpacket_parameter>
			dxl_set_txpacket_parameter(4+(3*i), dxl_get_highbyte(angleList[act][i]));
    1802:	d5 01       	movw	r26, r10
    1804:	8d 91       	ld	r24, X+
    1806:	9c 91       	ld	r25, X
    1808:	0e 94 b9 00 	call	0x172	; 0x172 <dxl_get_highbyte>
    180c:	bc 01       	movw	r22, r24
    180e:	c8 01       	movw	r24, r16
    1810:	02 96       	adiw	r24, 0x02	; 2
    1812:	0e 94 93 00 	call	0x126	; 0x126 <dxl_set_txpacket_parameter>
    1816:	0d 5f       	subi	r16, 0xFD	; 253
    1818:	1f 4f       	sbci	r17, 0xFF	; 255
		//Angle
		dxl_set_txpacket_id(BROADCAST_ID);
		dxl_set_txpacket_instruction(INST_SYNC_WRITE);
		dxl_set_txpacket_parameter(0, P_GOAL_POSITION_L);
		dxl_set_txpacket_parameter(1, 2);
		for( i=0; i<SERVO_MAX; i++ ){
    181a:	0a 31       	cpi	r16, 0x1A	; 26
    181c:	11 05       	cpc	r17, r1
    181e:	f1 f6       	brne	.-68     	; 0x17dc <ServoControl+0x2ee>
			dxl_set_txpacket_parameter(2+(3*i), servoId[i]);
			dxl_set_txpacket_parameter(3+(3*i), dxl_get_lowbyte(angleList[act][i]));
			dxl_set_txpacket_parameter(4+(3*i), dxl_get_highbyte(angleList[act][i]));
		}
		dxl_set_txpacket_length(4+3*SERVO_MAX);
    1820:	8c e1       	ldi	r24, 0x1C	; 28
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	0e 94 98 00 	call	0x130	; 0x130 <dxl_set_txpacket_length>
		dxl_txrx_packet();
    1828:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <dxl_txrx_packet>
		CommStatus = dxl_get_result();
    182c:	0e 94 88 00 	call	0x110	; 0x110 <dxl_get_result>
		if( CommStatus == COMM_RXSUCCESS ){
    1830:	81 30       	cpi	r24, 0x01	; 1
    1832:	91 05       	cpc	r25, r1
    1834:	11 f4       	brne	.+4      	; 0x183a <ServoControl+0x34c>
			PrintErrorCode();
    1836:	ac dd       	rcall	.-1192   	; 0x1390 <PrintErrorCode>
    1838:	03 c0       	rjmp	.+6      	; 0x1840 <ServoControl+0x352>
		}else{
			PrintCommStatus(CommStatus);
    183a:	ea dd       	rcall	.-1068   	; 0x1410 <PrintCommStatus>
    183c:	01 c0       	rjmp	.+2      	; 0x1840 <ServoControl+0x352>
		}
	}else{
		PrintCommStatus(CommStatus);
    183e:	e8 dd       	rcall	.-1072   	; 0x1410 <PrintCommStatus>
	}
}
    1840:	aa 96       	adiw	r28, 0x2a	; 42
    1842:	0f b6       	in	r0, 0x3f	; 63
    1844:	f8 94       	cli
    1846:	de bf       	out	0x3e, r29	; 62
    1848:	0f be       	out	0x3f, r0	; 63
    184a:	cd bf       	out	0x3d, r28	; 61
    184c:	df 91       	pop	r29
    184e:	cf 91       	pop	r28
    1850:	1f 91       	pop	r17
    1852:	0f 91       	pop	r16
    1854:	ff 90       	pop	r15
    1856:	ef 90       	pop	r14
    1858:	df 90       	pop	r13
    185a:	cf 90       	pop	r12
    185c:	bf 90       	pop	r11
    185e:	af 90       	pop	r10
    1860:	9f 90       	pop	r9
    1862:	8f 90       	pop	r8
    1864:	7f 90       	pop	r7
    1866:	6f 90       	pop	r6
    1868:	5f 90       	pop	r5
    186a:	4f 90       	pop	r4
    186c:	3f 90       	pop	r3
    186e:	2f 90       	pop	r2
    1870:	08 95       	ret

00001872 <setMode>:
}

void setMode(void){
	//		PORTC = ~(LED_BAT|LED_TxD|LED_RxD|LED_AUX|LED_MANAGE|LED_PROGRAM|LED_PLAY);
	//		PORTC = LED_BAT|LED_TxD|LED_RxD|LED_AUX|LED_MANAGE|LED_PROGRAM|LED_PLAY;
	if( ~PIND & SW_BUTTON ){
    1872:	48 99       	sbic	0x09, 0	; 9
    1874:	0e c0       	rjmp	.+28     	; 0x1892 <setMode+0x20>
		if( SwitchSts == 0 ){
    1876:	80 91 0c 0c 	lds	r24, 0x0C0C
    187a:	90 91 0d 0c 	lds	r25, 0x0C0D
    187e:	89 2b       	or	r24, r25
    1880:	09 f0       	breq	.+2      	; 0x1884 <setMode+0x12>
    1882:	50 c0       	rjmp	.+160    	; 0x1924 <setMode+0xb2>
			SwitchSts = 1;
    1884:	81 e0       	ldi	r24, 0x01	; 1
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	90 93 0d 0c 	sts	0x0C0D, r25
    188c:	80 93 0c 0c 	sts	0x0C0C, r24
    1890:	08 95       	ret
		}
	}else{
		if( SwitchSts == 1 ){
    1892:	80 91 0c 0c 	lds	r24, 0x0C0C
    1896:	90 91 0d 0c 	lds	r25, 0x0C0D
    189a:	01 97       	sbiw	r24, 0x01	; 1
    189c:	09 f0       	breq	.+2      	; 0x18a0 <setMode+0x2e>
    189e:	42 c0       	rjmp	.+132    	; 0x1924 <setMode+0xb2>
			SwitchSts = 0;
    18a0:	10 92 0d 0c 	sts	0x0C0D, r1
    18a4:	10 92 0c 0c 	sts	0x0C0C, r1
			mMode++;
    18a8:	80 91 0e 0c 	lds	r24, 0x0C0E
    18ac:	90 91 0f 0c 	lds	r25, 0x0C0F
    18b0:	9c 01       	movw	r18, r24
    18b2:	2f 5f       	subi	r18, 0xFF	; 255
    18b4:	3f 4f       	sbci	r19, 0xFF	; 255
    18b6:	30 93 0f 0c 	sts	0x0C0F, r19
    18ba:	20 93 0e 0c 	sts	0x0C0E, r18
			if( (LED_MAX - mMode) <= 0 ){
    18be:	26 e0       	ldi	r18, 0x06	; 6
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	a9 01       	movw	r20, r18
    18c4:	48 1b       	sub	r20, r24
    18c6:	59 0b       	sbc	r21, r25
    18c8:	ca 01       	movw	r24, r20
    18ca:	18 16       	cp	r1, r24
    18cc:	19 06       	cpc	r1, r25
    18ce:	3c f0       	brlt	.+14     	; 0x18de <setMode+0x6c>
				PORTC = LED_BAT|LED_TxD|LED_RxD|LED_AUX|LED_MANAGE|LED_PROGRAM;
    18d0:	8f e3       	ldi	r24, 0x3F	; 63
    18d2:	88 b9       	out	0x08, r24	; 8
				mMode = MODE_0;
    18d4:	10 92 0f 0c 	sts	0x0C0F, r1
    18d8:	10 92 0e 0c 	sts	0x0C0E, r1
    18dc:	0b c0       	rjmp	.+22     	; 0x18f4 <setMode+0x82>
			}else{
				PORTC = ~(1 << (LED_MAX - mMode));
    18de:	21 e0       	ldi	r18, 0x01	; 1
    18e0:	30 e0       	ldi	r19, 0x00	; 0
    18e2:	a9 01       	movw	r20, r18
    18e4:	02 c0       	rjmp	.+4      	; 0x18ea <setMode+0x78>
    18e6:	44 0f       	add	r20, r20
    18e8:	55 1f       	adc	r21, r21
    18ea:	8a 95       	dec	r24
    18ec:	e2 f7       	brpl	.-8      	; 0x18e6 <setMode+0x74>
    18ee:	ca 01       	movw	r24, r20
    18f0:	80 95       	com	r24
    18f2:	88 b9       	out	0x08, r24	; 8
			}
			stopMotion();
    18f4:	38 dd       	rcall	.-1424   	; 0x1366 <stopMotion>
			ServoControl( 0 );
    18f6:	80 e0       	ldi	r24, 0x00	; 0
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	f9 dd       	rcall	.-1038   	; 0x14ee <ServoControl>

			modeCounter = 1;
    18fc:	81 e0       	ldi	r24, 0x01	; 1
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	90 93 09 0c 	sts	0x0C09, r25
    1904:	80 93 08 0c 	sts	0x0C08, r24
			if( mMode == MODE_1 ){
    1908:	80 91 0e 0c 	lds	r24, 0x0C0E
    190c:	90 91 0f 0c 	lds	r25, 0x0C0F
    1910:	01 97       	sbiw	r24, 0x01	; 1
    1912:	41 f4       	brne	.+16     	; 0x1924 <setMode+0xb2>
				modeWait = mode1act[0][0];
    1914:	80 91 0e 02 	lds	r24, 0x020E
    1918:	90 91 0f 02 	lds	r25, 0x020F
    191c:	90 93 0b 0c 	sts	0x0C0B, r25
    1920:	80 93 0a 0c 	sts	0x0C0A, r24
    1924:	08 95       	ret

00001926 <move>:
	motionTimes = 0;
	motionTime = 0;
	motionFirst = -1;
}

void move(void){
    1926:	cf 93       	push	r28
    1928:	df 93       	push	r29
	if( motionTimes > 0 && isMoving() == 0 ){
    192a:	80 91 04 0c 	lds	r24, 0x0C04
    192e:	90 91 05 0c 	lds	r25, 0x0C05
    1932:	18 16       	cp	r1, r24
    1934:	19 06       	cpc	r1, r25
    1936:	0c f0       	brlt	.+2      	; 0x193a <move+0x14>
    1938:	ba c0       	rjmp	.+372    	; 0x1aae <move+0x188>
    193a:	78 da       	rcall	.-2832   	; 0xe2c <isMoving>
    193c:	89 2b       	or	r24, r25
    193e:	09 f0       	breq	.+2      	; 0x1942 <move+0x1c>
    1940:	b6 c0       	rjmp	.+364    	; 0x1aae <move+0x188>
		int *motion = motionList[motionNumber];
    1942:	e0 91 06 0c 	lds	r30, 0x0C06
    1946:	f0 91 07 0c 	lds	r31, 0x0C07
    194a:	ee 0f       	add	r30, r30
    194c:	ff 1f       	adc	r31, r31
    194e:	e6 5c       	subi	r30, 0xC6	; 198
    1950:	fd 4f       	sbci	r31, 0xFD	; 253
    1952:	c0 81       	ld	r28, Z
    1954:	d1 81       	ldd	r29, Z+1	; 0x01
        sensorTest();
    1956:	ed d9       	rcall	.-3110   	; 0xd32 <sensorTest>
//		getAngle();
//		getLoad();
//		getVoltage();
		printf("### move() motionNumber = %d\n", motionNumber);
    1958:	80 91 07 0c 	lds	r24, 0x0C07
    195c:	8f 93       	push	r24
    195e:	80 91 06 0c 	lds	r24, 0x0C06
    1962:	8f 93       	push	r24
    1964:	88 ee       	ldi	r24, 0xE8	; 232
    1966:	98 e0       	ldi	r25, 0x08	; 8
    1968:	9f 93       	push	r25
    196a:	8f 93       	push	r24
    196c:	8b d4       	rcall	.+2326   	; 0x2284 <printf>
		printf("### move() motionCount = %d\n", motionCount);
    196e:	80 91 0d 02 	lds	r24, 0x020D
    1972:	8f 93       	push	r24
    1974:	80 91 0c 02 	lds	r24, 0x020C
    1978:	8f 93       	push	r24
    197a:	86 e0       	ldi	r24, 0x06	; 6
    197c:	99 e0       	ldi	r25, 0x09	; 9
    197e:	9f 93       	push	r25
    1980:	8f 93       	push	r24
    1982:	80 d4       	rcall	.+2304   	; 0x2284 <printf>
		int max = motion[0];
		if( motionCount > max ){
    1984:	8d b7       	in	r24, 0x3d	; 61
    1986:	9e b7       	in	r25, 0x3e	; 62
    1988:	08 96       	adiw	r24, 0x08	; 8
    198a:	0f b6       	in	r0, 0x3f	; 63
    198c:	f8 94       	cli
    198e:	9e bf       	out	0x3e, r25	; 62
    1990:	0f be       	out	0x3f, r0	; 63
    1992:	8d bf       	out	0x3d, r24	; 61
    1994:	28 81       	ld	r18, Y
    1996:	39 81       	ldd	r19, Y+1	; 0x01
    1998:	80 91 0c 02 	lds	r24, 0x020C
    199c:	90 91 0d 02 	lds	r25, 0x020D
    19a0:	28 17       	cp	r18, r24
    19a2:	39 07       	cpc	r19, r25
    19a4:	0c f0       	brlt	.+2      	; 0x19a8 <move+0x82>
    19a6:	6f c0       	rjmp	.+222    	; 0x1a86 <move+0x160>
//			printf("### %d,%d,%d,%d,%d,%d;\n", diffmaxTest[0],diffmaxTest[1],diffmaxTest[2],diffmaxTest[3],diffmaxTest[4],diffmaxTest[5] );
			motionCount = 1;
    19a8:	81 e0       	ldi	r24, 0x01	; 1
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	90 93 0d 02 	sts	0x020D, r25
    19b0:	80 93 0c 02 	sts	0x020C, r24
			if( motionTimes < 99 && --motionTimes <= 0 ){
    19b4:	80 91 04 0c 	lds	r24, 0x0C04
    19b8:	90 91 05 0c 	lds	r25, 0x0C05
    19bc:	83 36       	cpi	r24, 0x63	; 99
    19be:	91 05       	cpc	r25, r1
    19c0:	0c f0       	brlt	.+2      	; 0x19c4 <move+0x9e>
    19c2:	61 c0       	rjmp	.+194    	; 0x1a86 <move+0x160>
    19c4:	01 97       	sbiw	r24, 0x01	; 1
    19c6:	90 93 05 0c 	sts	0x0C05, r25
    19ca:	80 93 04 0c 	sts	0x0C04, r24
    19ce:	18 16       	cp	r1, r24
    19d0:	19 06       	cpc	r1, r25
    19d2:	0c f4       	brge	.+2      	; 0x19d6 <move+0xb0>
    19d4:	58 c0       	rjmp	.+176    	; 0x1a86 <move+0x160>
				if( nextMotionTimes > 0 ){
    19d6:	20 91 fc 0b 	lds	r18, 0x0BFC
    19da:	30 91 fd 0b 	lds	r19, 0x0BFD
    19de:	12 16       	cp	r1, r18
    19e0:	13 06       	cpc	r1, r19
    19e2:	0c f0       	brlt	.+2      	; 0x19e6 <move+0xc0>
    19e4:	4e c0       	rjmp	.+156    	; 0x1a82 <move+0x15c>
					if( (nextMotionNumber == ACT_WALK1 || nextMotionNumber == ACT_WALK2) &&
    19e6:	80 91 fe 0b 	lds	r24, 0x0BFE
    19ea:	90 91 ff 0b 	lds	r25, 0x0BFF
    19ee:	ac 01       	movw	r20, r24
    19f0:	42 50       	subi	r20, 0x02	; 2
    19f2:	51 09       	sbc	r21, r1
    19f4:	42 30       	cpi	r20, 0x02	; 2
    19f6:	51 05       	cpc	r21, r1
    19f8:	90 f4       	brcc	.+36     	; 0x1a1e <move+0xf8>
    19fa:	40 91 06 0c 	lds	r20, 0x0C06
    19fe:	50 91 07 0c 	lds	r21, 0x0C07
    1a02:	41 30       	cpi	r20, 0x01	; 1
    1a04:	51 05       	cpc	r21, r1
    1a06:	39 f1       	breq	.+78     	; 0x1a56 <move+0x130>
						motionNumber != ACT_PRE_WALK ){
						motionNumber = ACT_PRE_WALK;
    1a08:	81 e0       	ldi	r24, 0x01	; 1
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	90 93 07 0c 	sts	0x0C07, r25
    1a10:	80 93 06 0c 	sts	0x0C06, r24
						motionTimes = 1;
    1a14:	90 93 05 0c 	sts	0x0C05, r25
    1a18:	80 93 04 0c 	sts	0x0C04, r24
    1a1c:	28 c0       	rjmp	.+80     	; 0x1a6e <move+0x148>
					}else if( (motionNumber == ACT_TURN_LEFT && nextMotionNumber == ACT_TURN_RIGHT) ||
    1a1e:	40 91 06 0c 	lds	r20, 0x0C06
    1a22:	50 91 07 0c 	lds	r21, 0x0C07
    1a26:	44 30       	cpi	r20, 0x04	; 4
    1a28:	51 05       	cpc	r21, r1
    1a2a:	21 f4       	brne	.+8      	; 0x1a34 <move+0x10e>
    1a2c:	85 30       	cpi	r24, 0x05	; 5
    1a2e:	91 05       	cpc	r25, r1
    1a30:	91 f4       	brne	.+36     	; 0x1a56 <move+0x130>
    1a32:	06 c0       	rjmp	.+12     	; 0x1a40 <move+0x11a>
    1a34:	84 30       	cpi	r24, 0x04	; 4
    1a36:	91 05       	cpc	r25, r1
    1a38:	71 f4       	brne	.+28     	; 0x1a56 <move+0x130>
						(nextMotionNumber == ACT_TURN_LEFT && motionNumber == ACT_TURN_RIGHT) ){
    1a3a:	45 30       	cpi	r20, 0x05	; 5
    1a3c:	51 05       	cpc	r21, r1
    1a3e:	59 f4       	brne	.+22     	; 0x1a56 <move+0x130>
						motionNumber = ACT_DEFAULT;
    1a40:	10 92 07 0c 	sts	0x0C07, r1
    1a44:	10 92 06 0c 	sts	0x0C06, r1
						motionTimes = 1;
    1a48:	81 e0       	ldi	r24, 0x01	; 1
    1a4a:	90 e0       	ldi	r25, 0x00	; 0
    1a4c:	90 93 05 0c 	sts	0x0C05, r25
    1a50:	80 93 04 0c 	sts	0x0C04, r24
    1a54:	0c c0       	rjmp	.+24     	; 0x1a6e <move+0x148>
					}else{
						motionNumber = nextMotionNumber;
    1a56:	90 93 07 0c 	sts	0x0C07, r25
    1a5a:	80 93 06 0c 	sts	0x0C06, r24
						motionTimes = nextMotionTimes;
    1a5e:	30 93 05 0c 	sts	0x0C05, r19
    1a62:	20 93 04 0c 	sts	0x0C04, r18
						nextMotionTimes = 0;
    1a66:	10 92 fd 0b 	sts	0x0BFD, r1
    1a6a:	10 92 fc 0b 	sts	0x0BFC, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1a6e:	9f e5       	ldi	r25, 0x5F	; 95
    1a70:	2a ee       	ldi	r18, 0xEA	; 234
    1a72:	80 e0       	ldi	r24, 0x00	; 0
    1a74:	91 50       	subi	r25, 0x01	; 1
    1a76:	20 40       	sbci	r18, 0x00	; 0
    1a78:	80 40       	sbci	r24, 0x00	; 0
    1a7a:	e1 f7       	brne	.-8      	; 0x1a74 <move+0x14e>
    1a7c:	00 c0       	rjmp	.+0      	; 0x1a7e <move+0x158>
    1a7e:	00 00       	nop
    1a80:	16 c0       	rjmp	.+44     	; 0x1aae <move+0x188>
					}
					_delay_ms(300);
				}else{
					stopMotion();
    1a82:	71 dc       	rcall	.-1822   	; 0x1366 <stopMotion>
    1a84:	14 c0       	rjmp	.+40     	; 0x1aae <move+0x188>
				}
				return;
			}
		}
		ServoControl( motion[motionCount] );
    1a86:	80 91 0c 02 	lds	r24, 0x020C
    1a8a:	90 91 0d 02 	lds	r25, 0x020D
    1a8e:	88 0f       	add	r24, r24
    1a90:	99 1f       	adc	r25, r25
    1a92:	c8 0f       	add	r28, r24
    1a94:	d9 1f       	adc	r29, r25
    1a96:	88 81       	ld	r24, Y
    1a98:	99 81       	ldd	r25, Y+1	; 0x01
    1a9a:	29 dd       	rcall	.-1454   	; 0x14ee <ServoControl>
		motionCount++;
    1a9c:	80 91 0c 02 	lds	r24, 0x020C
    1aa0:	90 91 0d 02 	lds	r25, 0x020D
    1aa4:	01 96       	adiw	r24, 0x01	; 1
    1aa6:	90 93 0d 02 	sts	0x020D, r25
    1aaa:	80 93 0c 02 	sts	0x020C, r24
	}
}
    1aae:	df 91       	pop	r29
    1ab0:	cf 91       	pop	r28
    1ab2:	08 95       	ret

00001ab4 <main>:
	EVT_WATCH_DOG       = 10,
	EVT_MOTION_EDIT     = 11,
	EVT_MAX
	};

int main(void){
    1ab4:	6f 92       	push	r6
    1ab6:	7f 92       	push	r7
    1ab8:	8f 92       	push	r8
    1aba:	9f 92       	push	r9
    1abc:	af 92       	push	r10
    1abe:	bf 92       	push	r11
    1ac0:	cf 92       	push	r12
    1ac2:	df 92       	push	r13
    1ac4:	ef 92       	push	r14
    1ac6:	ff 92       	push	r15
    1ac8:	0f 93       	push	r16
    1aca:	1f 93       	push	r17
    1acc:	cf 93       	push	r28
    1ace:	df 93       	push	r29
	
	//Start Switch
	DDRA  = 0x00;
    1ad0:	11 b8       	out	0x01, r1	; 1
	PORTA = 0x12;
    1ad2:	82 e1       	ldi	r24, 0x12	; 18
    1ad4:	82 b9       	out	0x02, r24	; 2
	
	//LED Initial
	DDRC  = 0x7F;
    1ad6:	8f e7       	ldi	r24, 0x7F	; 127
    1ad8:	87 b9       	out	0x07, r24	; 7
	PORTC = 0x7E;
    1ada:	8e e7       	ldi	r24, 0x7E	; 126
    1adc:	88 b9       	out	0x08, r24	; 8
	DDRD  = 0x70;
    1ade:	80 e7       	ldi	r24, 0x70	; 112
    1ae0:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x11;
    1ae2:	81 e1       	ldi	r24, 0x11	; 17
    1ae4:	8b b9       	out	0x0b, r24	; 11

	MotorInit();
    1ae6:	51 d9       	rcall	.-3422   	; 0xd8a <MotorInit>
	initSerial();
    1ae8:	ab d8       	rcall	.-3754   	; 0xc40 <initSerial>
	char * readData = NULL;	
	int isFinish = 0;

sensorInit();
    1aea:	12 d9       	rcall	.-3548   	; 0xd10 <sensorInit>
		setMode();
		
		if( checkSerialRead() > 0 ){
			readData = getReadBuffer();
			if( readData != NULL ){
				printf( "readData=%s\n", &readData[0] );
    1aec:	03 e2       	ldi	r16, 0x23	; 35
    1aee:	19 e0       	ldi	r17, 0x09	; 9
				split( &readData[0] );
				switch( serCmd[0] ){
    1af0:	c0 e1       	ldi	r28, 0x10	; 16
    1af2:	dc e0       	ldi	r29, 0x0C	; 12
				}
				if( isFinish > 0 ){
					MotorControl( 0, 0 );
					break;
				}
				memset( readData, 0x00, SERIAL_BUFFER_SIZE );
    1af4:	0f 2e       	mov	r0, r31
    1af6:	f0 e5       	ldi	r31, 0x50	; 80
    1af8:	8f 2e       	mov	r8, r31
    1afa:	f0 2d       	mov	r31, r0
				case EVT_STOP_MOTION:
					stopMotion();
					sendAck(1);
					break;
				case EVT_FORCE_MOTION:
					forceMotion( serCmd[1], serCmd[2] );
    1afc:	0f 2e       	mov	r0, r31
    1afe:	f4 e1       	ldi	r31, 0x14	; 20
    1b00:	cf 2e       	mov	r12, r31
    1b02:	fc e0       	ldi	r31, 0x0C	; 12
    1b04:	df 2e       	mov	r13, r31
    1b06:	f0 2d       	mov	r31, r0
    1b08:	0f 2e       	mov	r0, r31
    1b0a:	f2 e1       	ldi	r31, 0x12	; 18
    1b0c:	ef 2e       	mov	r14, r31
    1b0e:	fc e0       	ldi	r31, 0x0C	; 12
    1b10:	ff 2e       	mov	r15, r31
    1b12:	f0 2d       	mov	r31, r0
//                    setSpeedTest( serCmd[1] );
					sendAck(1);
					break;
				case EVT_START_MOTION:
				    startMotion( serCmd[1], serCmd[2] );
					PORTC = ~(1 << (LED_MAX - 2));
    1b14:	0f 2e       	mov	r0, r31
    1b16:	ff ed       	ldi	r31, 0xDF	; 223
    1b18:	6f 2e       	mov	r6, r31
    1b1a:	f0 2d       	mov	r31, r0
					break;
				}
				memset( readData, 0x00, SERIAL_BUFFER_SIZE );
			}
		}
		memset( &serCmd[0], 0x00, sizeof(int) * SERIAL_BUFFER_SIZE );
    1b1c:	0f 2e       	mov	r0, r31
    1b1e:	f0 ea       	ldi	r31, 0xA0	; 160
    1b20:	9f 2e       	mov	r9, r31
    1b22:	f0 2d       	mov	r31, r0
		
		if (~PINA & SW_START ) {
			if( iStart > 0 ){
				iStart = 0;
				PORTC = LED_BAT|LED_TxD|LED_RxD|LED_AUX|LED_MANAGE|LED_PROGRAM|LED_PLAY;
    1b24:	0f 2e       	mov	r0, r31
    1b26:	ff e7       	ldi	r31, 0x7F	; 127
    1b28:	7f 2e       	mov	r7, r31
    1b2a:	f0 2d       	mov	r31, r0
	int isFinish = 0;

sensorInit();
	
	while(1){
		setMode();
    1b2c:	a2 de       	rcall	.-700    	; 0x1872 <setMode>
		
		if( checkSerialRead() > 0 ){
    1b2e:	8f d8       	rcall	.-3810   	; 0xc4e <checkSerialRead>
    1b30:	18 16       	cp	r1, r24
    1b32:	19 06       	cpc	r1, r25
    1b34:	0c f0       	brlt	.+2      	; 0x1b38 <main+0x84>
    1b36:	8c c0       	rjmp	.+280    	; 0x1c50 <main+0x19c>
			readData = getReadBuffer();
    1b38:	da d8       	rcall	.-3660   	; 0xcee <getReadBuffer>
    1b3a:	5c 01       	movw	r10, r24
			if( readData != NULL ){
    1b3c:	00 97       	sbiw	r24, 0x00	; 0
    1b3e:	09 f4       	brne	.+2      	; 0x1b42 <main+0x8e>
    1b40:	87 c0       	rjmp	.+270    	; 0x1c50 <main+0x19c>
				printf( "readData=%s\n", &readData[0] );
    1b42:	bf 92       	push	r11
    1b44:	8f 93       	push	r24
    1b46:	1f 93       	push	r17
    1b48:	0f 93       	push	r16
    1b4a:	9c d3       	rcall	.+1848   	; 0x2284 <printf>
				split( &readData[0] );
    1b4c:	c5 01       	movw	r24, r10
    1b4e:	41 d9       	rcall	.-3454   	; 0xdd2 <split>
				switch( serCmd[0] ){
    1b50:	0f 90       	pop	r0
    1b52:	0f 90       	pop	r0
    1b54:	0f 90       	pop	r0
    1b56:	0f 90       	pop	r0
    1b58:	88 81       	ld	r24, Y
    1b5a:	99 81       	ldd	r25, Y+1	; 0x01
    1b5c:	86 30       	cpi	r24, 0x06	; 6
    1b5e:	91 05       	cpc	r25, r1
    1b60:	09 f4       	brne	.+2      	; 0x1b64 <main+0xb0>
    1b62:	5c c0       	rjmp	.+184    	; 0x1c1c <main+0x168>
    1b64:	94 f4       	brge	.+36     	; 0x1b8a <main+0xd6>
    1b66:	82 30       	cpi	r24, 0x02	; 2
    1b68:	91 05       	cpc	r25, r1
    1b6a:	09 f4       	brne	.+2      	; 0x1b6e <main+0xba>
    1b6c:	44 c0       	rjmp	.+136    	; 0x1bf6 <main+0x142>
    1b6e:	34 f4       	brge	.+12     	; 0x1b7c <main+0xc8>
    1b70:	00 97       	sbiw	r24, 0x00	; 0
    1b72:	01 f1       	breq	.+64     	; 0x1bb4 <main+0x100>
    1b74:	01 97       	sbiw	r24, 0x01	; 1
    1b76:	09 f4       	brne	.+2      	; 0x1b7a <main+0xc6>
    1b78:	40 c0       	rjmp	.+128    	; 0x1bfa <main+0x146>
    1b7a:	62 c0       	rjmp	.+196    	; 0x1c40 <main+0x18c>
    1b7c:	84 30       	cpi	r24, 0x04	; 4
    1b7e:	91 05       	cpc	r25, r1
    1b80:	09 f4       	brne	.+2      	; 0x1b84 <main+0xd0>
    1b82:	48 c0       	rjmp	.+144    	; 0x1c14 <main+0x160>
    1b84:	0c f4       	brge	.+2      	; 0x1b88 <main+0xd4>
    1b86:	3a c0       	rjmp	.+116    	; 0x1bfc <main+0x148>
    1b88:	47 c0       	rjmp	.+142    	; 0x1c18 <main+0x164>
    1b8a:	89 30       	cpi	r24, 0x09	; 9
    1b8c:	91 05       	cpc	r25, r1
    1b8e:	59 f1       	breq	.+86     	; 0x1be6 <main+0x132>
    1b90:	34 f4       	brge	.+12     	; 0x1b9e <main+0xea>
    1b92:	87 30       	cpi	r24, 0x07	; 7
    1b94:	91 05       	cpc	r25, r1
    1b96:	b1 f0       	breq	.+44     	; 0x1bc4 <main+0x110>
    1b98:	08 97       	sbiw	r24, 0x08	; 8
    1b9a:	01 f1       	breq	.+64     	; 0x1bdc <main+0x128>
    1b9c:	51 c0       	rjmp	.+162    	; 0x1c40 <main+0x18c>
    1b9e:	8b 30       	cpi	r24, 0x0B	; 11
    1ba0:	91 05       	cpc	r25, r1
    1ba2:	09 f4       	brne	.+2      	; 0x1ba6 <main+0xf2>
    1ba4:	50 c0       	rjmp	.+160    	; 0x1c46 <main+0x192>
    1ba6:	0c f4       	brge	.+2      	; 0x1baa <main+0xf6>
    1ba8:	42 c0       	rjmp	.+132    	; 0x1c2e <main+0x17a>
    1baa:	87 3e       	cpi	r24, 0xE7	; 231
    1bac:	93 40       	sbci	r25, 0x03	; 3
    1bae:	09 f4       	brne	.+2      	; 0x1bb2 <main+0xfe>
    1bb0:	9c c0       	rjmp	.+312    	; 0x1cea <main+0x236>
    1bb2:	46 c0       	rjmp	.+140    	; 0x1c40 <main+0x18c>
				case EVT_ACTION:
					ServoControl( serCmd[1] );
    1bb4:	f7 01       	movw	r30, r14
    1bb6:	80 81       	ld	r24, Z
    1bb8:	91 81       	ldd	r25, Z+1	; 0x01
    1bba:	99 dc       	rcall	.-1742   	; 0x14ee <ServoControl>
//                    setSpeedTest( serCmd[1] );
					sendAck(1);
    1bbc:	81 e0       	ldi	r24, 0x01	; 1
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	d7 d8       	rcall	.-3666   	; 0xd70 <sendAck>
					break;
    1bc2:	41 c0       	rjmp	.+130    	; 0x1c46 <main+0x192>
				case EVT_START_MOTION:
				    startMotion( serCmd[1], serCmd[2] );
    1bc4:	f6 01       	movw	r30, r12
    1bc6:	60 81       	ld	r22, Z
    1bc8:	71 81       	ldd	r23, Z+1	; 0x01
    1bca:	f7 01       	movw	r30, r14
    1bcc:	80 81       	ld	r24, Z
    1bce:	91 81       	ldd	r25, Z+1	; 0x01
    1bd0:	3f db       	rcall	.-2434   	; 0x1250 <startMotion>
					PORTC = ~(1 << (LED_MAX - 2));
    1bd2:	68 b8       	out	0x08, r6	; 8
					sendAck(1);
    1bd4:	81 e0       	ldi	r24, 0x01	; 1
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	cb d8       	rcall	.-3690   	; 0xd70 <sendAck>
					break;
    1bda:	35 c0       	rjmp	.+106    	; 0x1c46 <main+0x192>
				case EVT_STOP_MOTION:
					stopMotion();
    1bdc:	c4 db       	rcall	.-2168   	; 0x1366 <stopMotion>
					sendAck(1);
    1bde:	81 e0       	ldi	r24, 0x01	; 1
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	c6 d8       	rcall	.-3700   	; 0xd70 <sendAck>
					break;
    1be4:	30 c0       	rjmp	.+96     	; 0x1c46 <main+0x192>
				case EVT_FORCE_MOTION:
					forceMotion( serCmd[1], serCmd[2] );
    1be6:	f6 01       	movw	r30, r12
    1be8:	60 81       	ld	r22, Z
    1bea:	71 81       	ldd	r23, Z+1	; 0x01
    1bec:	f7 01       	movw	r30, r14
    1bee:	80 81       	ld	r24, Z
    1bf0:	91 81       	ldd	r25, Z+1	; 0x01
    1bf2:	a2 db       	rcall	.-2236   	; 0x1338 <forceMotion>
					break;
    1bf4:	28 c0       	rjmp	.+80     	; 0x1c46 <main+0x192>
				case EVT_GET_NOW_ANGLE:
					getAngle();
    1bf6:	54 d9       	rcall	.-3416   	; 0xea0 <getAngle>
					break;
    1bf8:	26 c0       	rjmp	.+76     	; 0x1c46 <main+0x192>
				case EVT_SET_ANGLE:
					setAngle();
    1bfa:	32 d9       	rcall	.-3484   	; 0xe60 <setAngle>
				case EVT_GET_ACT_ANGLE:
				    if( serCmd[1] >= ACT_MAX ){
    1bfc:	f7 01       	movw	r30, r14
    1bfe:	80 81       	ld	r24, Z
    1c00:	91 81       	ldd	r25, Z+1	; 0x01
    1c02:	82 33       	cpi	r24, 0x32	; 50
    1c04:	91 05       	cpc	r25, r1
    1c06:	24 f0       	brlt	.+8      	; 0x1c10 <main+0x15c>
					    sendAck(0);
    1c08:	80 e0       	ldi	r24, 0x00	; 0
    1c0a:	90 e0       	ldi	r25, 0x00	; 0
    1c0c:	b1 d8       	rcall	.-3742   	; 0xd70 <sendAck>
    1c0e:	1b c0       	rjmp	.+54     	; 0x1c46 <main+0x192>
					}else{
						sendActAngle(serCmd[1]);
    1c10:	c2 d9       	rcall	.-3196   	; 0xf96 <sendActAngle>
    1c12:	19 c0       	rjmp	.+50     	; 0x1c46 <main+0x192>
					}
					break;
				case EVT_GET_LOAD:
					getLoad();
    1c14:	25 da       	rcall	.-2998   	; 0x1060 <getLoad>
//					printf( "%d\n", movingTime );
					break;
    1c16:	17 c0       	rjmp	.+46     	; 0x1c46 <main+0x192>
				case EVT_GET_VOLTAGE:
					getVoltage();
    1c18:	9e da       	rcall	.-2756   	; 0x1156 <getVoltage>
					break;
    1c1a:	15 c0       	rjmp	.+42     	; 0x1c46 <main+0x192>
				case EVT_TORQUE_DISABLE:
					dxl_write_byte( BROADCAST_ID, P_TORQUE_ENABLE, 0 );
    1c1c:	40 e0       	ldi	r20, 0x00	; 0
    1c1e:	50 e0       	ldi	r21, 0x00	; 0
    1c20:	68 e1       	ldi	r22, 0x18	; 24
    1c22:	70 e0       	ldi	r23, 0x00	; 0
    1c24:	8e ef       	ldi	r24, 0xFE	; 254
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	0e 94 33 02 	call	0x466	; 0x466 <dxl_write_byte>
					break;
    1c2c:	0c c0       	rjmp	.+24     	; 0x1c46 <main+0x192>
				case EVT_WATCH_DOG:
					watchDogCnt = 0;
    1c2e:	10 92 f8 0b 	sts	0x0BF8, r1
    1c32:	10 92 f9 0b 	sts	0x0BF9, r1
    1c36:	10 92 fa 0b 	sts	0x0BFA, r1
    1c3a:	10 92 fb 0b 	sts	0x0BFB, r1
					break;
    1c3e:	03 c0       	rjmp	.+6      	; 0x1c46 <main+0x192>
//					printf( "finish\n");
					sendAck(999);
					isFinish = 1;
					break;
				default:
					sendAck(0);
    1c40:	80 e0       	ldi	r24, 0x00	; 0
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	95 d8       	rcall	.-3798   	; 0xd70 <sendAck>
				}
				if( isFinish > 0 ){
					MotorControl( 0, 0 );
					break;
				}
				memset( readData, 0x00, SERIAL_BUFFER_SIZE );
    1c46:	f5 01       	movw	r30, r10
    1c48:	28 2d       	mov	r18, r8
    1c4a:	11 92       	st	Z+, r1
    1c4c:	2a 95       	dec	r18
    1c4e:	e9 f7       	brne	.-6      	; 0x1c4a <main+0x196>
			}
		}
		memset( &serCmd[0], 0x00, sizeof(int) * SERIAL_BUFFER_SIZE );
    1c50:	fe 01       	movw	r30, r28
    1c52:	29 2d       	mov	r18, r9
    1c54:	11 92       	st	Z+, r1
    1c56:	2a 95       	dec	r18
    1c58:	e9 f7       	brne	.-6      	; 0x1c54 <main+0x1a0>
		
		if (~PINA & SW_START ) {
    1c5a:	01 99       	sbic	0x00, 1	; 0
    1c5c:	10 c0       	rjmp	.+32     	; 0x1c7e <main+0x1ca>
			if( iStart > 0 ){
    1c5e:	80 91 08 02 	lds	r24, 0x0208
    1c62:	90 91 09 02 	lds	r25, 0x0209
    1c66:	18 16       	cp	r1, r24
    1c68:	19 06       	cpc	r1, r25
    1c6a:	2c f5       	brge	.+74     	; 0x1cb6 <main+0x202>
				iStart = 0;
    1c6c:	10 92 09 02 	sts	0x0209, r1
    1c70:	10 92 08 02 	sts	0x0208, r1
				PORTC = LED_BAT|LED_TxD|LED_RxD|LED_AUX|LED_MANAGE|LED_PROGRAM|LED_PLAY;
    1c74:	78 b8       	out	0x08, r7	; 8
				ServoControl( 0 );
    1c76:	80 e0       	ldi	r24, 0x00	; 0
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	39 dc       	rcall	.-1934   	; 0x14ee <ServoControl>
    1c7c:	1c c0       	rjmp	.+56     	; 0x1cb6 <main+0x202>
			}
		}else{
			if( iStart == 0 ){
    1c7e:	80 91 08 02 	lds	r24, 0x0208
    1c82:	90 91 09 02 	lds	r25, 0x0209
    1c86:	89 2b       	or	r24, r25
    1c88:	39 f4       	brne	.+14     	; 0x1c98 <main+0x1e4>
				PORTC &= ~LED_PLAY;
    1c8a:	46 98       	cbi	0x08, 6	; 8
				iStart = 1;
    1c8c:	81 e0       	ldi	r24, 0x01	; 1
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	90 93 09 02 	sts	0x0209, r25
    1c94:	80 93 08 02 	sts	0x0208, r24
			}
			if( modeWait <= 0 ){
    1c98:	80 91 0a 0c 	lds	r24, 0x0C0A
    1c9c:	90 91 0b 0c 	lds	r25, 0x0C0B
    1ca0:	18 16       	cp	r1, r24
    1ca2:	19 06       	cpc	r1, r25
    1ca4:	1c f0       	brlt	.+6      	; 0x1cac <main+0x1f8>
				setModeAction();
    1ca6:	ef da       	rcall	.-2594   	; 0x1286 <setModeAction>
				move();
    1ca8:	3e de       	rcall	.-900    	; 0x1926 <move>
    1caa:	05 c0       	rjmp	.+10     	; 0x1cb6 <main+0x202>
			}else{
				modeWait -= MAIN_DELAY;
    1cac:	0a 97       	sbiw	r24, 0x0a	; 10
    1cae:	90 93 0b 0c 	sts	0x0C0B, r25
    1cb2:	80 93 0a 0c 	sts	0x0C0A, r24
    1cb6:	83 ec       	ldi	r24, 0xC3	; 195
    1cb8:	99 e0       	ldi	r25, 0x09	; 9
    1cba:	01 97       	sbiw	r24, 0x01	; 1
    1cbc:	f1 f7       	brne	.-4      	; 0x1cba <main+0x206>
    1cbe:	00 c0       	rjmp	.+0      	; 0x1cc0 <main+0x20c>
    1cc0:	00 00       	nop
			}
		}
		_delay_ms(MAIN_DELAY);
		watchDogCnt++;
    1cc2:	80 91 f8 0b 	lds	r24, 0x0BF8
    1cc6:	90 91 f9 0b 	lds	r25, 0x0BF9
    1cca:	a0 91 fa 0b 	lds	r26, 0x0BFA
    1cce:	b0 91 fb 0b 	lds	r27, 0x0BFB
    1cd2:	01 96       	adiw	r24, 0x01	; 1
    1cd4:	a1 1d       	adc	r26, r1
    1cd6:	b1 1d       	adc	r27, r1
    1cd8:	80 93 f8 0b 	sts	0x0BF8, r24
    1cdc:	90 93 f9 0b 	sts	0x0BF9, r25
    1ce0:	a0 93 fa 0b 	sts	0x0BFA, r26
    1ce4:	b0 93 fb 0b 	sts	0x0BFB, r27
	}
    1ce8:	21 cf       	rjmp	.-446    	; 0x1b2c <main+0x78>
					break;
				case EVT_MOTION_EDIT:
					break;
				case 999:
//					printf( "finish\n");
					sendAck(999);
    1cea:	87 ee       	ldi	r24, 0xE7	; 231
    1cec:	93 e0       	ldi	r25, 0x03	; 3
    1cee:	40 d8       	rcall	.-3968   	; 0xd70 <sendAck>
					break;
				default:
					sendAck(0);
				}
				if( isFinish > 0 ){
					MotorControl( 0, 0 );
    1cf0:	60 e0       	ldi	r22, 0x00	; 0
    1cf2:	70 e0       	ldi	r23, 0x00	; 0
    1cf4:	80 e0       	ldi	r24, 0x00	; 0
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	b8 db       	rcall	.-2192   	; 0x146a <MotorControl>
			}
		}
		_delay_ms(MAIN_DELAY);
		watchDogCnt++;
	}
}
    1cfa:	80 e0       	ldi	r24, 0x00	; 0
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	df 91       	pop	r29
    1d00:	cf 91       	pop	r28
    1d02:	1f 91       	pop	r17
    1d04:	0f 91       	pop	r16
    1d06:	ff 90       	pop	r15
    1d08:	ef 90       	pop	r14
    1d0a:	df 90       	pop	r13
    1d0c:	cf 90       	pop	r12
    1d0e:	bf 90       	pop	r11
    1d10:	af 90       	pop	r10
    1d12:	9f 90       	pop	r9
    1d14:	8f 90       	pop	r8
    1d16:	7f 90       	pop	r7
    1d18:	6f 90       	pop	r6
    1d1a:	08 95       	ret

00001d1c <__divsf3>:
    1d1c:	0c d0       	rcall	.+24     	; 0x1d36 <__divsf3x>
    1d1e:	eb c0       	rjmp	.+470    	; 0x1ef6 <__fp_round>
    1d20:	e3 d0       	rcall	.+454    	; 0x1ee8 <__fp_pscB>
    1d22:	40 f0       	brcs	.+16     	; 0x1d34 <__divsf3+0x18>
    1d24:	da d0       	rcall	.+436    	; 0x1eda <__fp_pscA>
    1d26:	30 f0       	brcs	.+12     	; 0x1d34 <__divsf3+0x18>
    1d28:	21 f4       	brne	.+8      	; 0x1d32 <__divsf3+0x16>
    1d2a:	5f 3f       	cpi	r21, 0xFF	; 255
    1d2c:	19 f0       	breq	.+6      	; 0x1d34 <__divsf3+0x18>
    1d2e:	cc c0       	rjmp	.+408    	; 0x1ec8 <__fp_inf>
    1d30:	51 11       	cpse	r21, r1
    1d32:	15 c1       	rjmp	.+554    	; 0x1f5e <__fp_szero>
    1d34:	cf c0       	rjmp	.+414    	; 0x1ed4 <__fp_nan>

00001d36 <__divsf3x>:
    1d36:	f0 d0       	rcall	.+480    	; 0x1f18 <__fp_split3>
    1d38:	98 f3       	brcs	.-26     	; 0x1d20 <__divsf3+0x4>

00001d3a <__divsf3_pse>:
    1d3a:	99 23       	and	r25, r25
    1d3c:	c9 f3       	breq	.-14     	; 0x1d30 <__divsf3+0x14>
    1d3e:	55 23       	and	r21, r21
    1d40:	b1 f3       	breq	.-20     	; 0x1d2e <__divsf3+0x12>
    1d42:	95 1b       	sub	r25, r21
    1d44:	55 0b       	sbc	r21, r21
    1d46:	bb 27       	eor	r27, r27
    1d48:	aa 27       	eor	r26, r26
    1d4a:	62 17       	cp	r22, r18
    1d4c:	73 07       	cpc	r23, r19
    1d4e:	84 07       	cpc	r24, r20
    1d50:	38 f0       	brcs	.+14     	; 0x1d60 <__divsf3_pse+0x26>
    1d52:	9f 5f       	subi	r25, 0xFF	; 255
    1d54:	5f 4f       	sbci	r21, 0xFF	; 255
    1d56:	22 0f       	add	r18, r18
    1d58:	33 1f       	adc	r19, r19
    1d5a:	44 1f       	adc	r20, r20
    1d5c:	aa 1f       	adc	r26, r26
    1d5e:	a9 f3       	breq	.-22     	; 0x1d4a <__divsf3_pse+0x10>
    1d60:	33 d0       	rcall	.+102    	; 0x1dc8 <__divsf3_pse+0x8e>
    1d62:	0e 2e       	mov	r0, r30
    1d64:	3a f0       	brmi	.+14     	; 0x1d74 <__divsf3_pse+0x3a>
    1d66:	e0 e8       	ldi	r30, 0x80	; 128
    1d68:	30 d0       	rcall	.+96     	; 0x1dca <__divsf3_pse+0x90>
    1d6a:	91 50       	subi	r25, 0x01	; 1
    1d6c:	50 40       	sbci	r21, 0x00	; 0
    1d6e:	e6 95       	lsr	r30
    1d70:	00 1c       	adc	r0, r0
    1d72:	ca f7       	brpl	.-14     	; 0x1d66 <__divsf3_pse+0x2c>
    1d74:	29 d0       	rcall	.+82     	; 0x1dc8 <__divsf3_pse+0x8e>
    1d76:	fe 2f       	mov	r31, r30
    1d78:	27 d0       	rcall	.+78     	; 0x1dc8 <__divsf3_pse+0x8e>
    1d7a:	66 0f       	add	r22, r22
    1d7c:	77 1f       	adc	r23, r23
    1d7e:	88 1f       	adc	r24, r24
    1d80:	bb 1f       	adc	r27, r27
    1d82:	26 17       	cp	r18, r22
    1d84:	37 07       	cpc	r19, r23
    1d86:	48 07       	cpc	r20, r24
    1d88:	ab 07       	cpc	r26, r27
    1d8a:	b0 e8       	ldi	r27, 0x80	; 128
    1d8c:	09 f0       	breq	.+2      	; 0x1d90 <__divsf3_pse+0x56>
    1d8e:	bb 0b       	sbc	r27, r27
    1d90:	80 2d       	mov	r24, r0
    1d92:	bf 01       	movw	r22, r30
    1d94:	ff 27       	eor	r31, r31
    1d96:	93 58       	subi	r25, 0x83	; 131
    1d98:	5f 4f       	sbci	r21, 0xFF	; 255
    1d9a:	2a f0       	brmi	.+10     	; 0x1da6 <__divsf3_pse+0x6c>
    1d9c:	9e 3f       	cpi	r25, 0xFE	; 254
    1d9e:	51 05       	cpc	r21, r1
    1da0:	68 f0       	brcs	.+26     	; 0x1dbc <__divsf3_pse+0x82>
    1da2:	92 c0       	rjmp	.+292    	; 0x1ec8 <__fp_inf>
    1da4:	dc c0       	rjmp	.+440    	; 0x1f5e <__fp_szero>
    1da6:	5f 3f       	cpi	r21, 0xFF	; 255
    1da8:	ec f3       	brlt	.-6      	; 0x1da4 <__divsf3_pse+0x6a>
    1daa:	98 3e       	cpi	r25, 0xE8	; 232
    1dac:	dc f3       	brlt	.-10     	; 0x1da4 <__divsf3_pse+0x6a>
    1dae:	86 95       	lsr	r24
    1db0:	77 95       	ror	r23
    1db2:	67 95       	ror	r22
    1db4:	b7 95       	ror	r27
    1db6:	f7 95       	ror	r31
    1db8:	9f 5f       	subi	r25, 0xFF	; 255
    1dba:	c9 f7       	brne	.-14     	; 0x1dae <__divsf3_pse+0x74>
    1dbc:	88 0f       	add	r24, r24
    1dbe:	91 1d       	adc	r25, r1
    1dc0:	96 95       	lsr	r25
    1dc2:	87 95       	ror	r24
    1dc4:	97 f9       	bld	r25, 7
    1dc6:	08 95       	ret
    1dc8:	e1 e0       	ldi	r30, 0x01	; 1
    1dca:	66 0f       	add	r22, r22
    1dcc:	77 1f       	adc	r23, r23
    1dce:	88 1f       	adc	r24, r24
    1dd0:	bb 1f       	adc	r27, r27
    1dd2:	62 17       	cp	r22, r18
    1dd4:	73 07       	cpc	r23, r19
    1dd6:	84 07       	cpc	r24, r20
    1dd8:	ba 07       	cpc	r27, r26
    1dda:	20 f0       	brcs	.+8      	; 0x1de4 <__divsf3_pse+0xaa>
    1ddc:	62 1b       	sub	r22, r18
    1dde:	73 0b       	sbc	r23, r19
    1de0:	84 0b       	sbc	r24, r20
    1de2:	ba 0b       	sbc	r27, r26
    1de4:	ee 1f       	adc	r30, r30
    1de6:	88 f7       	brcc	.-30     	; 0x1dca <__divsf3_pse+0x90>
    1de8:	e0 95       	com	r30
    1dea:	08 95       	ret

00001dec <__fixsfsi>:
    1dec:	04 d0       	rcall	.+8      	; 0x1df6 <__fixunssfsi>
    1dee:	68 94       	set
    1df0:	b1 11       	cpse	r27, r1
    1df2:	b5 c0       	rjmp	.+362    	; 0x1f5e <__fp_szero>
    1df4:	08 95       	ret

00001df6 <__fixunssfsi>:
    1df6:	98 d0       	rcall	.+304    	; 0x1f28 <__fp_splitA>
    1df8:	88 f0       	brcs	.+34     	; 0x1e1c <__fixunssfsi+0x26>
    1dfa:	9f 57       	subi	r25, 0x7F	; 127
    1dfc:	90 f0       	brcs	.+36     	; 0x1e22 <__fixunssfsi+0x2c>
    1dfe:	b9 2f       	mov	r27, r25
    1e00:	99 27       	eor	r25, r25
    1e02:	b7 51       	subi	r27, 0x17	; 23
    1e04:	a0 f0       	brcs	.+40     	; 0x1e2e <__fixunssfsi+0x38>
    1e06:	d1 f0       	breq	.+52     	; 0x1e3c <__fixunssfsi+0x46>
    1e08:	66 0f       	add	r22, r22
    1e0a:	77 1f       	adc	r23, r23
    1e0c:	88 1f       	adc	r24, r24
    1e0e:	99 1f       	adc	r25, r25
    1e10:	1a f0       	brmi	.+6      	; 0x1e18 <__fixunssfsi+0x22>
    1e12:	ba 95       	dec	r27
    1e14:	c9 f7       	brne	.-14     	; 0x1e08 <__fixunssfsi+0x12>
    1e16:	12 c0       	rjmp	.+36     	; 0x1e3c <__fixunssfsi+0x46>
    1e18:	b1 30       	cpi	r27, 0x01	; 1
    1e1a:	81 f0       	breq	.+32     	; 0x1e3c <__fixunssfsi+0x46>
    1e1c:	9f d0       	rcall	.+318    	; 0x1f5c <__fp_zero>
    1e1e:	b1 e0       	ldi	r27, 0x01	; 1
    1e20:	08 95       	ret
    1e22:	9c c0       	rjmp	.+312    	; 0x1f5c <__fp_zero>
    1e24:	67 2f       	mov	r22, r23
    1e26:	78 2f       	mov	r23, r24
    1e28:	88 27       	eor	r24, r24
    1e2a:	b8 5f       	subi	r27, 0xF8	; 248
    1e2c:	39 f0       	breq	.+14     	; 0x1e3c <__fixunssfsi+0x46>
    1e2e:	b9 3f       	cpi	r27, 0xF9	; 249
    1e30:	cc f3       	brlt	.-14     	; 0x1e24 <__fixunssfsi+0x2e>
    1e32:	86 95       	lsr	r24
    1e34:	77 95       	ror	r23
    1e36:	67 95       	ror	r22
    1e38:	b3 95       	inc	r27
    1e3a:	d9 f7       	brne	.-10     	; 0x1e32 <__fixunssfsi+0x3c>
    1e3c:	3e f4       	brtc	.+14     	; 0x1e4c <__fixunssfsi+0x56>
    1e3e:	90 95       	com	r25
    1e40:	80 95       	com	r24
    1e42:	70 95       	com	r23
    1e44:	61 95       	neg	r22
    1e46:	7f 4f       	sbci	r23, 0xFF	; 255
    1e48:	8f 4f       	sbci	r24, 0xFF	; 255
    1e4a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e4c:	08 95       	ret

00001e4e <__floatunsisf>:
    1e4e:	e8 94       	clt
    1e50:	09 c0       	rjmp	.+18     	; 0x1e64 <__floatsisf+0x12>

00001e52 <__floatsisf>:
    1e52:	97 fb       	bst	r25, 7
    1e54:	3e f4       	brtc	.+14     	; 0x1e64 <__floatsisf+0x12>
    1e56:	90 95       	com	r25
    1e58:	80 95       	com	r24
    1e5a:	70 95       	com	r23
    1e5c:	61 95       	neg	r22
    1e5e:	7f 4f       	sbci	r23, 0xFF	; 255
    1e60:	8f 4f       	sbci	r24, 0xFF	; 255
    1e62:	9f 4f       	sbci	r25, 0xFF	; 255
    1e64:	99 23       	and	r25, r25
    1e66:	a9 f0       	breq	.+42     	; 0x1e92 <__floatsisf+0x40>
    1e68:	f9 2f       	mov	r31, r25
    1e6a:	96 e9       	ldi	r25, 0x96	; 150
    1e6c:	bb 27       	eor	r27, r27
    1e6e:	93 95       	inc	r25
    1e70:	f6 95       	lsr	r31
    1e72:	87 95       	ror	r24
    1e74:	77 95       	ror	r23
    1e76:	67 95       	ror	r22
    1e78:	b7 95       	ror	r27
    1e7a:	f1 11       	cpse	r31, r1
    1e7c:	f8 cf       	rjmp	.-16     	; 0x1e6e <__floatsisf+0x1c>
    1e7e:	fa f4       	brpl	.+62     	; 0x1ebe <__floatsisf+0x6c>
    1e80:	bb 0f       	add	r27, r27
    1e82:	11 f4       	brne	.+4      	; 0x1e88 <__floatsisf+0x36>
    1e84:	60 ff       	sbrs	r22, 0
    1e86:	1b c0       	rjmp	.+54     	; 0x1ebe <__floatsisf+0x6c>
    1e88:	6f 5f       	subi	r22, 0xFF	; 255
    1e8a:	7f 4f       	sbci	r23, 0xFF	; 255
    1e8c:	8f 4f       	sbci	r24, 0xFF	; 255
    1e8e:	9f 4f       	sbci	r25, 0xFF	; 255
    1e90:	16 c0       	rjmp	.+44     	; 0x1ebe <__floatsisf+0x6c>
    1e92:	88 23       	and	r24, r24
    1e94:	11 f0       	breq	.+4      	; 0x1e9a <__floatsisf+0x48>
    1e96:	96 e9       	ldi	r25, 0x96	; 150
    1e98:	11 c0       	rjmp	.+34     	; 0x1ebc <__floatsisf+0x6a>
    1e9a:	77 23       	and	r23, r23
    1e9c:	21 f0       	breq	.+8      	; 0x1ea6 <__floatsisf+0x54>
    1e9e:	9e e8       	ldi	r25, 0x8E	; 142
    1ea0:	87 2f       	mov	r24, r23
    1ea2:	76 2f       	mov	r23, r22
    1ea4:	05 c0       	rjmp	.+10     	; 0x1eb0 <__floatsisf+0x5e>
    1ea6:	66 23       	and	r22, r22
    1ea8:	71 f0       	breq	.+28     	; 0x1ec6 <__floatsisf+0x74>
    1eaa:	96 e8       	ldi	r25, 0x86	; 134
    1eac:	86 2f       	mov	r24, r22
    1eae:	70 e0       	ldi	r23, 0x00	; 0
    1eb0:	60 e0       	ldi	r22, 0x00	; 0
    1eb2:	2a f0       	brmi	.+10     	; 0x1ebe <__floatsisf+0x6c>
    1eb4:	9a 95       	dec	r25
    1eb6:	66 0f       	add	r22, r22
    1eb8:	77 1f       	adc	r23, r23
    1eba:	88 1f       	adc	r24, r24
    1ebc:	da f7       	brpl	.-10     	; 0x1eb4 <__floatsisf+0x62>
    1ebe:	88 0f       	add	r24, r24
    1ec0:	96 95       	lsr	r25
    1ec2:	87 95       	ror	r24
    1ec4:	97 f9       	bld	r25, 7
    1ec6:	08 95       	ret

00001ec8 <__fp_inf>:
    1ec8:	97 f9       	bld	r25, 7
    1eca:	9f 67       	ori	r25, 0x7F	; 127
    1ecc:	80 e8       	ldi	r24, 0x80	; 128
    1ece:	70 e0       	ldi	r23, 0x00	; 0
    1ed0:	60 e0       	ldi	r22, 0x00	; 0
    1ed2:	08 95       	ret

00001ed4 <__fp_nan>:
    1ed4:	9f ef       	ldi	r25, 0xFF	; 255
    1ed6:	80 ec       	ldi	r24, 0xC0	; 192
    1ed8:	08 95       	ret

00001eda <__fp_pscA>:
    1eda:	00 24       	eor	r0, r0
    1edc:	0a 94       	dec	r0
    1ede:	16 16       	cp	r1, r22
    1ee0:	17 06       	cpc	r1, r23
    1ee2:	18 06       	cpc	r1, r24
    1ee4:	09 06       	cpc	r0, r25
    1ee6:	08 95       	ret

00001ee8 <__fp_pscB>:
    1ee8:	00 24       	eor	r0, r0
    1eea:	0a 94       	dec	r0
    1eec:	12 16       	cp	r1, r18
    1eee:	13 06       	cpc	r1, r19
    1ef0:	14 06       	cpc	r1, r20
    1ef2:	05 06       	cpc	r0, r21
    1ef4:	08 95       	ret

00001ef6 <__fp_round>:
    1ef6:	09 2e       	mov	r0, r25
    1ef8:	03 94       	inc	r0
    1efa:	00 0c       	add	r0, r0
    1efc:	11 f4       	brne	.+4      	; 0x1f02 <__fp_round+0xc>
    1efe:	88 23       	and	r24, r24
    1f00:	52 f0       	brmi	.+20     	; 0x1f16 <__fp_round+0x20>
    1f02:	bb 0f       	add	r27, r27
    1f04:	40 f4       	brcc	.+16     	; 0x1f16 <__fp_round+0x20>
    1f06:	bf 2b       	or	r27, r31
    1f08:	11 f4       	brne	.+4      	; 0x1f0e <__fp_round+0x18>
    1f0a:	60 ff       	sbrs	r22, 0
    1f0c:	04 c0       	rjmp	.+8      	; 0x1f16 <__fp_round+0x20>
    1f0e:	6f 5f       	subi	r22, 0xFF	; 255
    1f10:	7f 4f       	sbci	r23, 0xFF	; 255
    1f12:	8f 4f       	sbci	r24, 0xFF	; 255
    1f14:	9f 4f       	sbci	r25, 0xFF	; 255
    1f16:	08 95       	ret

00001f18 <__fp_split3>:
    1f18:	57 fd       	sbrc	r21, 7
    1f1a:	90 58       	subi	r25, 0x80	; 128
    1f1c:	44 0f       	add	r20, r20
    1f1e:	55 1f       	adc	r21, r21
    1f20:	59 f0       	breq	.+22     	; 0x1f38 <__fp_splitA+0x10>
    1f22:	5f 3f       	cpi	r21, 0xFF	; 255
    1f24:	71 f0       	breq	.+28     	; 0x1f42 <__fp_splitA+0x1a>
    1f26:	47 95       	ror	r20

00001f28 <__fp_splitA>:
    1f28:	88 0f       	add	r24, r24
    1f2a:	97 fb       	bst	r25, 7
    1f2c:	99 1f       	adc	r25, r25
    1f2e:	61 f0       	breq	.+24     	; 0x1f48 <__fp_splitA+0x20>
    1f30:	9f 3f       	cpi	r25, 0xFF	; 255
    1f32:	79 f0       	breq	.+30     	; 0x1f52 <__fp_splitA+0x2a>
    1f34:	87 95       	ror	r24
    1f36:	08 95       	ret
    1f38:	12 16       	cp	r1, r18
    1f3a:	13 06       	cpc	r1, r19
    1f3c:	14 06       	cpc	r1, r20
    1f3e:	55 1f       	adc	r21, r21
    1f40:	f2 cf       	rjmp	.-28     	; 0x1f26 <__fp_split3+0xe>
    1f42:	46 95       	lsr	r20
    1f44:	f1 df       	rcall	.-30     	; 0x1f28 <__fp_splitA>
    1f46:	08 c0       	rjmp	.+16     	; 0x1f58 <__fp_splitA+0x30>
    1f48:	16 16       	cp	r1, r22
    1f4a:	17 06       	cpc	r1, r23
    1f4c:	18 06       	cpc	r1, r24
    1f4e:	99 1f       	adc	r25, r25
    1f50:	f1 cf       	rjmp	.-30     	; 0x1f34 <__fp_splitA+0xc>
    1f52:	86 95       	lsr	r24
    1f54:	71 05       	cpc	r23, r1
    1f56:	61 05       	cpc	r22, r1
    1f58:	08 94       	sec
    1f5a:	08 95       	ret

00001f5c <__fp_zero>:
    1f5c:	e8 94       	clt

00001f5e <__fp_szero>:
    1f5e:	bb 27       	eor	r27, r27
    1f60:	66 27       	eor	r22, r22
    1f62:	77 27       	eor	r23, r23
    1f64:	cb 01       	movw	r24, r22
    1f66:	97 f9       	bld	r25, 7
    1f68:	08 95       	ret

00001f6a <__mulsf3>:
    1f6a:	0b d0       	rcall	.+22     	; 0x1f82 <__mulsf3x>
    1f6c:	c4 cf       	rjmp	.-120    	; 0x1ef6 <__fp_round>
    1f6e:	b5 df       	rcall	.-150    	; 0x1eda <__fp_pscA>
    1f70:	28 f0       	brcs	.+10     	; 0x1f7c <__mulsf3+0x12>
    1f72:	ba df       	rcall	.-140    	; 0x1ee8 <__fp_pscB>
    1f74:	18 f0       	brcs	.+6      	; 0x1f7c <__mulsf3+0x12>
    1f76:	95 23       	and	r25, r21
    1f78:	09 f0       	breq	.+2      	; 0x1f7c <__mulsf3+0x12>
    1f7a:	a6 cf       	rjmp	.-180    	; 0x1ec8 <__fp_inf>
    1f7c:	ab cf       	rjmp	.-170    	; 0x1ed4 <__fp_nan>
    1f7e:	11 24       	eor	r1, r1
    1f80:	ee cf       	rjmp	.-36     	; 0x1f5e <__fp_szero>

00001f82 <__mulsf3x>:
    1f82:	ca df       	rcall	.-108    	; 0x1f18 <__fp_split3>
    1f84:	a0 f3       	brcs	.-24     	; 0x1f6e <__mulsf3+0x4>

00001f86 <__mulsf3_pse>:
    1f86:	95 9f       	mul	r25, r21
    1f88:	d1 f3       	breq	.-12     	; 0x1f7e <__mulsf3+0x14>
    1f8a:	95 0f       	add	r25, r21
    1f8c:	50 e0       	ldi	r21, 0x00	; 0
    1f8e:	55 1f       	adc	r21, r21
    1f90:	62 9f       	mul	r22, r18
    1f92:	f0 01       	movw	r30, r0
    1f94:	72 9f       	mul	r23, r18
    1f96:	bb 27       	eor	r27, r27
    1f98:	f0 0d       	add	r31, r0
    1f9a:	b1 1d       	adc	r27, r1
    1f9c:	63 9f       	mul	r22, r19
    1f9e:	aa 27       	eor	r26, r26
    1fa0:	f0 0d       	add	r31, r0
    1fa2:	b1 1d       	adc	r27, r1
    1fa4:	aa 1f       	adc	r26, r26
    1fa6:	64 9f       	mul	r22, r20
    1fa8:	66 27       	eor	r22, r22
    1faa:	b0 0d       	add	r27, r0
    1fac:	a1 1d       	adc	r26, r1
    1fae:	66 1f       	adc	r22, r22
    1fb0:	82 9f       	mul	r24, r18
    1fb2:	22 27       	eor	r18, r18
    1fb4:	b0 0d       	add	r27, r0
    1fb6:	a1 1d       	adc	r26, r1
    1fb8:	62 1f       	adc	r22, r18
    1fba:	73 9f       	mul	r23, r19
    1fbc:	b0 0d       	add	r27, r0
    1fbe:	a1 1d       	adc	r26, r1
    1fc0:	62 1f       	adc	r22, r18
    1fc2:	83 9f       	mul	r24, r19
    1fc4:	a0 0d       	add	r26, r0
    1fc6:	61 1d       	adc	r22, r1
    1fc8:	22 1f       	adc	r18, r18
    1fca:	74 9f       	mul	r23, r20
    1fcc:	33 27       	eor	r19, r19
    1fce:	a0 0d       	add	r26, r0
    1fd0:	61 1d       	adc	r22, r1
    1fd2:	23 1f       	adc	r18, r19
    1fd4:	84 9f       	mul	r24, r20
    1fd6:	60 0d       	add	r22, r0
    1fd8:	21 1d       	adc	r18, r1
    1fda:	82 2f       	mov	r24, r18
    1fdc:	76 2f       	mov	r23, r22
    1fde:	6a 2f       	mov	r22, r26
    1fe0:	11 24       	eor	r1, r1
    1fe2:	9f 57       	subi	r25, 0x7F	; 127
    1fe4:	50 40       	sbci	r21, 0x00	; 0
    1fe6:	8a f0       	brmi	.+34     	; 0x200a <__mulsf3_pse+0x84>
    1fe8:	e1 f0       	breq	.+56     	; 0x2022 <__mulsf3_pse+0x9c>
    1fea:	88 23       	and	r24, r24
    1fec:	4a f0       	brmi	.+18     	; 0x2000 <__mulsf3_pse+0x7a>
    1fee:	ee 0f       	add	r30, r30
    1ff0:	ff 1f       	adc	r31, r31
    1ff2:	bb 1f       	adc	r27, r27
    1ff4:	66 1f       	adc	r22, r22
    1ff6:	77 1f       	adc	r23, r23
    1ff8:	88 1f       	adc	r24, r24
    1ffa:	91 50       	subi	r25, 0x01	; 1
    1ffc:	50 40       	sbci	r21, 0x00	; 0
    1ffe:	a9 f7       	brne	.-22     	; 0x1fea <__mulsf3_pse+0x64>
    2000:	9e 3f       	cpi	r25, 0xFE	; 254
    2002:	51 05       	cpc	r21, r1
    2004:	70 f0       	brcs	.+28     	; 0x2022 <__mulsf3_pse+0x9c>
    2006:	60 cf       	rjmp	.-320    	; 0x1ec8 <__fp_inf>
    2008:	aa cf       	rjmp	.-172    	; 0x1f5e <__fp_szero>
    200a:	5f 3f       	cpi	r21, 0xFF	; 255
    200c:	ec f3       	brlt	.-6      	; 0x2008 <__mulsf3_pse+0x82>
    200e:	98 3e       	cpi	r25, 0xE8	; 232
    2010:	dc f3       	brlt	.-10     	; 0x2008 <__mulsf3_pse+0x82>
    2012:	86 95       	lsr	r24
    2014:	77 95       	ror	r23
    2016:	67 95       	ror	r22
    2018:	b7 95       	ror	r27
    201a:	f7 95       	ror	r31
    201c:	e7 95       	ror	r30
    201e:	9f 5f       	subi	r25, 0xFF	; 255
    2020:	c1 f7       	brne	.-16     	; 0x2012 <__mulsf3_pse+0x8c>
    2022:	fe 2b       	or	r31, r30
    2024:	88 0f       	add	r24, r24
    2026:	91 1d       	adc	r25, r1
    2028:	96 95       	lsr	r25
    202a:	87 95       	ror	r24
    202c:	97 f9       	bld	r25, 7
    202e:	08 95       	ret

00002030 <__cmpsf2>:
    2030:	03 d0       	rcall	.+6      	; 0x2038 <__fp_cmp>
    2032:	08 f4       	brcc	.+2      	; 0x2036 <__cmpsf2+0x6>
    2034:	81 e0       	ldi	r24, 0x01	; 1
    2036:	08 95       	ret

00002038 <__fp_cmp>:
    2038:	99 0f       	add	r25, r25
    203a:	00 08       	sbc	r0, r0
    203c:	55 0f       	add	r21, r21
    203e:	aa 0b       	sbc	r26, r26
    2040:	e0 e8       	ldi	r30, 0x80	; 128
    2042:	fe ef       	ldi	r31, 0xFE	; 254
    2044:	16 16       	cp	r1, r22
    2046:	17 06       	cpc	r1, r23
    2048:	e8 07       	cpc	r30, r24
    204a:	f9 07       	cpc	r31, r25
    204c:	c0 f0       	brcs	.+48     	; 0x207e <__fp_cmp+0x46>
    204e:	12 16       	cp	r1, r18
    2050:	13 06       	cpc	r1, r19
    2052:	e4 07       	cpc	r30, r20
    2054:	f5 07       	cpc	r31, r21
    2056:	98 f0       	brcs	.+38     	; 0x207e <__fp_cmp+0x46>
    2058:	62 1b       	sub	r22, r18
    205a:	73 0b       	sbc	r23, r19
    205c:	84 0b       	sbc	r24, r20
    205e:	95 0b       	sbc	r25, r21
    2060:	39 f4       	brne	.+14     	; 0x2070 <__fp_cmp+0x38>
    2062:	0a 26       	eor	r0, r26
    2064:	61 f0       	breq	.+24     	; 0x207e <__fp_cmp+0x46>
    2066:	23 2b       	or	r18, r19
    2068:	24 2b       	or	r18, r20
    206a:	25 2b       	or	r18, r21
    206c:	21 f4       	brne	.+8      	; 0x2076 <__fp_cmp+0x3e>
    206e:	08 95       	ret
    2070:	0a 26       	eor	r0, r26
    2072:	09 f4       	brne	.+2      	; 0x2076 <__fp_cmp+0x3e>
    2074:	a1 40       	sbci	r26, 0x01	; 1
    2076:	a6 95       	lsr	r26
    2078:	8f ef       	ldi	r24, 0xFF	; 255
    207a:	81 1d       	adc	r24, r1
    207c:	81 1d       	adc	r24, r1
    207e:	08 95       	ret

00002080 <__gesf2>:
    2080:	db df       	rcall	.-74     	; 0x2038 <__fp_cmp>
    2082:	08 f4       	brcc	.+2      	; 0x2086 <__gesf2+0x6>
    2084:	8f ef       	ldi	r24, 0xFF	; 255
    2086:	08 95       	ret

00002088 <__divmodhi4>:
    2088:	97 fb       	bst	r25, 7
    208a:	07 2e       	mov	r0, r23
    208c:	16 f4       	brtc	.+4      	; 0x2092 <__divmodhi4+0xa>
    208e:	00 94       	com	r0
    2090:	06 d0       	rcall	.+12     	; 0x209e <__divmodhi4_neg1>
    2092:	77 fd       	sbrc	r23, 7
    2094:	08 d0       	rcall	.+16     	; 0x20a6 <__divmodhi4_neg2>
    2096:	0b d0       	rcall	.+22     	; 0x20ae <__udivmodhi4>
    2098:	07 fc       	sbrc	r0, 7
    209a:	05 d0       	rcall	.+10     	; 0x20a6 <__divmodhi4_neg2>
    209c:	3e f4       	brtc	.+14     	; 0x20ac <__divmodhi4_exit>

0000209e <__divmodhi4_neg1>:
    209e:	90 95       	com	r25
    20a0:	81 95       	neg	r24
    20a2:	9f 4f       	sbci	r25, 0xFF	; 255
    20a4:	08 95       	ret

000020a6 <__divmodhi4_neg2>:
    20a6:	70 95       	com	r23
    20a8:	61 95       	neg	r22
    20aa:	7f 4f       	sbci	r23, 0xFF	; 255

000020ac <__divmodhi4_exit>:
    20ac:	08 95       	ret

000020ae <__udivmodhi4>:
    20ae:	aa 1b       	sub	r26, r26
    20b0:	bb 1b       	sub	r27, r27
    20b2:	51 e1       	ldi	r21, 0x11	; 17
    20b4:	07 c0       	rjmp	.+14     	; 0x20c4 <__udivmodhi4_ep>

000020b6 <__udivmodhi4_loop>:
    20b6:	aa 1f       	adc	r26, r26
    20b8:	bb 1f       	adc	r27, r27
    20ba:	a6 17       	cp	r26, r22
    20bc:	b7 07       	cpc	r27, r23
    20be:	10 f0       	brcs	.+4      	; 0x20c4 <__udivmodhi4_ep>
    20c0:	a6 1b       	sub	r26, r22
    20c2:	b7 0b       	sbc	r27, r23

000020c4 <__udivmodhi4_ep>:
    20c4:	88 1f       	adc	r24, r24
    20c6:	99 1f       	adc	r25, r25
    20c8:	5a 95       	dec	r21
    20ca:	a9 f7       	brne	.-22     	; 0x20b6 <__udivmodhi4_loop>
    20cc:	80 95       	com	r24
    20ce:	90 95       	com	r25
    20d0:	bc 01       	movw	r22, r24
    20d2:	cd 01       	movw	r24, r26
    20d4:	08 95       	ret

000020d6 <atoi>:
    20d6:	fc 01       	movw	r30, r24
    20d8:	88 27       	eor	r24, r24
    20da:	99 27       	eor	r25, r25
    20dc:	e8 94       	clt
    20de:	21 91       	ld	r18, Z+
    20e0:	20 32       	cpi	r18, 0x20	; 32
    20e2:	e9 f3       	breq	.-6      	; 0x20de <atoi+0x8>
    20e4:	29 30       	cpi	r18, 0x09	; 9
    20e6:	10 f0       	brcs	.+4      	; 0x20ec <atoi+0x16>
    20e8:	2e 30       	cpi	r18, 0x0E	; 14
    20ea:	c8 f3       	brcs	.-14     	; 0x20de <atoi+0x8>
    20ec:	2b 32       	cpi	r18, 0x2B	; 43
    20ee:	39 f0       	breq	.+14     	; 0x20fe <atoi+0x28>
    20f0:	2d 32       	cpi	r18, 0x2D	; 45
    20f2:	31 f4       	brne	.+12     	; 0x2100 <atoi+0x2a>
    20f4:	68 94       	set
    20f6:	03 c0       	rjmp	.+6      	; 0x20fe <atoi+0x28>
    20f8:	35 d0       	rcall	.+106    	; 0x2164 <__mulhi_const_10>
    20fa:	82 0f       	add	r24, r18
    20fc:	91 1d       	adc	r25, r1
    20fe:	21 91       	ld	r18, Z+
    2100:	20 53       	subi	r18, 0x30	; 48
    2102:	2a 30       	cpi	r18, 0x0A	; 10
    2104:	c8 f3       	brcs	.-14     	; 0x20f8 <atoi+0x22>
    2106:	1e f4       	brtc	.+6      	; 0x210e <atoi+0x38>
    2108:	90 95       	com	r25
    210a:	81 95       	neg	r24
    210c:	9f 4f       	sbci	r25, 0xFF	; 255
    210e:	08 95       	ret

00002110 <strtok>:
    2110:	40 ea       	ldi	r20, 0xA0	; 160
    2112:	5b e0       	ldi	r21, 0x0B	; 11
    2114:	00 c0       	rjmp	.+0      	; 0x2116 <strtok_r>

00002116 <strtok_r>:
    2116:	fa 01       	movw	r30, r20
    2118:	a1 91       	ld	r26, Z+
    211a:	b0 81       	ld	r27, Z
    211c:	00 97       	sbiw	r24, 0x00	; 0
    211e:	19 f4       	brne	.+6      	; 0x2126 <strtok_r+0x10>
    2120:	10 97       	sbiw	r26, 0x00	; 0
    2122:	e1 f0       	breq	.+56     	; 0x215c <strtok_r+0x46>
    2124:	cd 01       	movw	r24, r26
    2126:	dc 01       	movw	r26, r24
    2128:	cd 01       	movw	r24, r26
    212a:	0d 90       	ld	r0, X+
    212c:	00 20       	and	r0, r0
    212e:	11 f4       	brne	.+4      	; 0x2134 <strtok_r+0x1e>
    2130:	c0 01       	movw	r24, r0
    2132:	13 c0       	rjmp	.+38     	; 0x215a <strtok_r+0x44>
    2134:	fb 01       	movw	r30, r22
    2136:	21 91       	ld	r18, Z+
    2138:	22 23       	and	r18, r18
    213a:	19 f0       	breq	.+6      	; 0x2142 <strtok_r+0x2c>
    213c:	20 15       	cp	r18, r0
    213e:	d9 f7       	brne	.-10     	; 0x2136 <strtok_r+0x20>
    2140:	f3 cf       	rjmp	.-26     	; 0x2128 <strtok_r+0x12>
    2142:	fb 01       	movw	r30, r22
    2144:	21 91       	ld	r18, Z+
    2146:	20 15       	cp	r18, r0
    2148:	19 f4       	brne	.+6      	; 0x2150 <strtok_r+0x3a>
    214a:	1e 92       	st	-X, r1
    214c:	11 96       	adiw	r26, 0x01	; 1
    214e:	06 c0       	rjmp	.+12     	; 0x215c <strtok_r+0x46>
    2150:	22 23       	and	r18, r18
    2152:	c1 f7       	brne	.-16     	; 0x2144 <strtok_r+0x2e>
    2154:	0d 90       	ld	r0, X+
    2156:	00 20       	and	r0, r0
    2158:	a1 f7       	brne	.-24     	; 0x2142 <strtok_r+0x2c>
    215a:	d0 01       	movw	r26, r0
    215c:	fa 01       	movw	r30, r20
    215e:	a1 93       	st	Z+, r26
    2160:	b0 83       	st	Z, r27
    2162:	08 95       	ret

00002164 <__mulhi_const_10>:
    2164:	7a e0       	ldi	r23, 0x0A	; 10
    2166:	97 9f       	mul	r25, r23
    2168:	90 2d       	mov	r25, r0
    216a:	87 9f       	mul	r24, r23
    216c:	80 2d       	mov	r24, r0
    216e:	91 0d       	add	r25, r1
    2170:	11 24       	eor	r1, r1
    2172:	08 95       	ret

00002174 <fdevopen>:
    2174:	0f 93       	push	r16
    2176:	1f 93       	push	r17
    2178:	cf 93       	push	r28
    217a:	df 93       	push	r29
    217c:	ec 01       	movw	r28, r24
    217e:	8b 01       	movw	r16, r22
    2180:	00 97       	sbiw	r24, 0x00	; 0
    2182:	31 f4       	brne	.+12     	; 0x2190 <fdevopen+0x1c>
    2184:	61 15       	cp	r22, r1
    2186:	71 05       	cpc	r23, r1
    2188:	19 f4       	brne	.+6      	; 0x2190 <fdevopen+0x1c>
    218a:	80 e0       	ldi	r24, 0x00	; 0
    218c:	90 e0       	ldi	r25, 0x00	; 0
    218e:	37 c0       	rjmp	.+110    	; 0x21fe <fdevopen+0x8a>
    2190:	6e e0       	ldi	r22, 0x0E	; 14
    2192:	70 e0       	ldi	r23, 0x00	; 0
    2194:	81 e0       	ldi	r24, 0x01	; 1
    2196:	90 e0       	ldi	r25, 0x00	; 0
    2198:	a1 d2       	rcall	.+1346   	; 0x26dc <calloc>
    219a:	fc 01       	movw	r30, r24
    219c:	00 97       	sbiw	r24, 0x00	; 0
    219e:	a9 f3       	breq	.-22     	; 0x218a <fdevopen+0x16>
    21a0:	80 e8       	ldi	r24, 0x80	; 128
    21a2:	83 83       	std	Z+3, r24	; 0x03
    21a4:	01 15       	cp	r16, r1
    21a6:	11 05       	cpc	r17, r1
    21a8:	71 f0       	breq	.+28     	; 0x21c6 <fdevopen+0x52>
    21aa:	13 87       	std	Z+11, r17	; 0x0b
    21ac:	02 87       	std	Z+10, r16	; 0x0a
    21ae:	81 e8       	ldi	r24, 0x81	; 129
    21b0:	83 83       	std	Z+3, r24	; 0x03
    21b2:	80 91 ba 0c 	lds	r24, 0x0CBA
    21b6:	90 91 bb 0c 	lds	r25, 0x0CBB
    21ba:	89 2b       	or	r24, r25
    21bc:	21 f4       	brne	.+8      	; 0x21c6 <fdevopen+0x52>
    21be:	f0 93 bb 0c 	sts	0x0CBB, r31
    21c2:	e0 93 ba 0c 	sts	0x0CBA, r30
    21c6:	20 97       	sbiw	r28, 0x00	; 0
    21c8:	c9 f0       	breq	.+50     	; 0x21fc <fdevopen+0x88>
    21ca:	d1 87       	std	Z+9, r29	; 0x09
    21cc:	c0 87       	std	Z+8, r28	; 0x08
    21ce:	83 81       	ldd	r24, Z+3	; 0x03
    21d0:	82 60       	ori	r24, 0x02	; 2
    21d2:	83 83       	std	Z+3, r24	; 0x03
    21d4:	80 91 bc 0c 	lds	r24, 0x0CBC
    21d8:	90 91 bd 0c 	lds	r25, 0x0CBD
    21dc:	89 2b       	or	r24, r25
    21de:	71 f4       	brne	.+28     	; 0x21fc <fdevopen+0x88>
    21e0:	f0 93 bd 0c 	sts	0x0CBD, r31
    21e4:	e0 93 bc 0c 	sts	0x0CBC, r30
    21e8:	80 91 be 0c 	lds	r24, 0x0CBE
    21ec:	90 91 bf 0c 	lds	r25, 0x0CBF
    21f0:	89 2b       	or	r24, r25
    21f2:	21 f4       	brne	.+8      	; 0x21fc <fdevopen+0x88>
    21f4:	f0 93 bf 0c 	sts	0x0CBF, r31
    21f8:	e0 93 be 0c 	sts	0x0CBE, r30
    21fc:	cf 01       	movw	r24, r30
    21fe:	df 91       	pop	r29
    2200:	cf 91       	pop	r28
    2202:	1f 91       	pop	r17
    2204:	0f 91       	pop	r16
    2206:	08 95       	ret

00002208 <fgetc>:
    2208:	cf 93       	push	r28
    220a:	df 93       	push	r29
    220c:	ec 01       	movw	r28, r24
    220e:	2b 81       	ldd	r18, Y+3	; 0x03
    2210:	20 ff       	sbrs	r18, 0
    2212:	33 c0       	rjmp	.+102    	; 0x227a <fgetc+0x72>
    2214:	26 ff       	sbrs	r18, 6
    2216:	0a c0       	rjmp	.+20     	; 0x222c <fgetc+0x24>
    2218:	2f 7b       	andi	r18, 0xBF	; 191
    221a:	2b 83       	std	Y+3, r18	; 0x03
    221c:	8e 81       	ldd	r24, Y+6	; 0x06
    221e:	9f 81       	ldd	r25, Y+7	; 0x07
    2220:	01 96       	adiw	r24, 0x01	; 1
    2222:	9f 83       	std	Y+7, r25	; 0x07
    2224:	8e 83       	std	Y+6, r24	; 0x06
    2226:	8a 81       	ldd	r24, Y+2	; 0x02
    2228:	90 e0       	ldi	r25, 0x00	; 0
    222a:	29 c0       	rjmp	.+82     	; 0x227e <fgetc+0x76>
    222c:	22 ff       	sbrs	r18, 2
    222e:	0f c0       	rjmp	.+30     	; 0x224e <fgetc+0x46>
    2230:	e8 81       	ld	r30, Y
    2232:	f9 81       	ldd	r31, Y+1	; 0x01
    2234:	80 81       	ld	r24, Z
    2236:	99 27       	eor	r25, r25
    2238:	87 fd       	sbrc	r24, 7
    223a:	90 95       	com	r25
    223c:	00 97       	sbiw	r24, 0x00	; 0
    223e:	19 f4       	brne	.+6      	; 0x2246 <fgetc+0x3e>
    2240:	20 62       	ori	r18, 0x20	; 32
    2242:	2b 83       	std	Y+3, r18	; 0x03
    2244:	1a c0       	rjmp	.+52     	; 0x227a <fgetc+0x72>
    2246:	31 96       	adiw	r30, 0x01	; 1
    2248:	f9 83       	std	Y+1, r31	; 0x01
    224a:	e8 83       	st	Y, r30
    224c:	0e c0       	rjmp	.+28     	; 0x226a <fgetc+0x62>
    224e:	ea 85       	ldd	r30, Y+10	; 0x0a
    2250:	fb 85       	ldd	r31, Y+11	; 0x0b
    2252:	19 95       	eicall
    2254:	97 ff       	sbrs	r25, 7
    2256:	09 c0       	rjmp	.+18     	; 0x226a <fgetc+0x62>
    2258:	2b 81       	ldd	r18, Y+3	; 0x03
    225a:	01 96       	adiw	r24, 0x01	; 1
    225c:	11 f4       	brne	.+4      	; 0x2262 <fgetc+0x5a>
    225e:	80 e1       	ldi	r24, 0x10	; 16
    2260:	01 c0       	rjmp	.+2      	; 0x2264 <fgetc+0x5c>
    2262:	80 e2       	ldi	r24, 0x20	; 32
    2264:	82 2b       	or	r24, r18
    2266:	8b 83       	std	Y+3, r24	; 0x03
    2268:	08 c0       	rjmp	.+16     	; 0x227a <fgetc+0x72>
    226a:	2e 81       	ldd	r18, Y+6	; 0x06
    226c:	3f 81       	ldd	r19, Y+7	; 0x07
    226e:	2f 5f       	subi	r18, 0xFF	; 255
    2270:	3f 4f       	sbci	r19, 0xFF	; 255
    2272:	3f 83       	std	Y+7, r19	; 0x07
    2274:	2e 83       	std	Y+6, r18	; 0x06
    2276:	99 27       	eor	r25, r25
    2278:	02 c0       	rjmp	.+4      	; 0x227e <fgetc+0x76>
    227a:	8f ef       	ldi	r24, 0xFF	; 255
    227c:	9f ef       	ldi	r25, 0xFF	; 255
    227e:	df 91       	pop	r29
    2280:	cf 91       	pop	r28
    2282:	08 95       	ret

00002284 <printf>:
    2284:	cf 93       	push	r28
    2286:	df 93       	push	r29
    2288:	cd b7       	in	r28, 0x3d	; 61
    228a:	de b7       	in	r29, 0x3e	; 62
    228c:	fe 01       	movw	r30, r28
    228e:	36 96       	adiw	r30, 0x06	; 6
    2290:	61 91       	ld	r22, Z+
    2292:	71 91       	ld	r23, Z+
    2294:	af 01       	movw	r20, r30
    2296:	80 91 bc 0c 	lds	r24, 0x0CBC
    229a:	90 91 bd 0c 	lds	r25, 0x0CBD
    229e:	30 d0       	rcall	.+96     	; 0x2300 <vfprintf>
    22a0:	df 91       	pop	r29
    22a2:	cf 91       	pop	r28
    22a4:	08 95       	ret

000022a6 <puts>:
    22a6:	0f 93       	push	r16
    22a8:	1f 93       	push	r17
    22aa:	cf 93       	push	r28
    22ac:	df 93       	push	r29
    22ae:	e0 91 bc 0c 	lds	r30, 0x0CBC
    22b2:	f0 91 bd 0c 	lds	r31, 0x0CBD
    22b6:	23 81       	ldd	r18, Z+3	; 0x03
    22b8:	21 ff       	sbrs	r18, 1
    22ba:	1b c0       	rjmp	.+54     	; 0x22f2 <puts+0x4c>
    22bc:	ec 01       	movw	r28, r24
    22be:	00 e0       	ldi	r16, 0x00	; 0
    22c0:	10 e0       	ldi	r17, 0x00	; 0
    22c2:	89 91       	ld	r24, Y+
    22c4:	60 91 bc 0c 	lds	r22, 0x0CBC
    22c8:	70 91 bd 0c 	lds	r23, 0x0CBD
    22cc:	db 01       	movw	r26, r22
    22ce:	18 96       	adiw	r26, 0x08	; 8
    22d0:	ed 91       	ld	r30, X+
    22d2:	fc 91       	ld	r31, X
    22d4:	19 97       	sbiw	r26, 0x09	; 9
    22d6:	88 23       	and	r24, r24
    22d8:	31 f0       	breq	.+12     	; 0x22e6 <puts+0x40>
    22da:	19 95       	eicall
    22dc:	89 2b       	or	r24, r25
    22de:	89 f3       	breq	.-30     	; 0x22c2 <puts+0x1c>
    22e0:	0f ef       	ldi	r16, 0xFF	; 255
    22e2:	1f ef       	ldi	r17, 0xFF	; 255
    22e4:	ee cf       	rjmp	.-36     	; 0x22c2 <puts+0x1c>
    22e6:	8a e0       	ldi	r24, 0x0A	; 10
    22e8:	19 95       	eicall
    22ea:	89 2b       	or	r24, r25
    22ec:	11 f4       	brne	.+4      	; 0x22f2 <puts+0x4c>
    22ee:	c8 01       	movw	r24, r16
    22f0:	02 c0       	rjmp	.+4      	; 0x22f6 <puts+0x50>
    22f2:	8f ef       	ldi	r24, 0xFF	; 255
    22f4:	9f ef       	ldi	r25, 0xFF	; 255
    22f6:	df 91       	pop	r29
    22f8:	cf 91       	pop	r28
    22fa:	1f 91       	pop	r17
    22fc:	0f 91       	pop	r16
    22fe:	08 95       	ret

00002300 <vfprintf>:
    2300:	2f 92       	push	r2
    2302:	3f 92       	push	r3
    2304:	4f 92       	push	r4
    2306:	5f 92       	push	r5
    2308:	6f 92       	push	r6
    230a:	7f 92       	push	r7
    230c:	8f 92       	push	r8
    230e:	9f 92       	push	r9
    2310:	af 92       	push	r10
    2312:	bf 92       	push	r11
    2314:	cf 92       	push	r12
    2316:	df 92       	push	r13
    2318:	ef 92       	push	r14
    231a:	ff 92       	push	r15
    231c:	0f 93       	push	r16
    231e:	1f 93       	push	r17
    2320:	cf 93       	push	r28
    2322:	df 93       	push	r29
    2324:	cd b7       	in	r28, 0x3d	; 61
    2326:	de b7       	in	r29, 0x3e	; 62
    2328:	2c 97       	sbiw	r28, 0x0c	; 12
    232a:	0f b6       	in	r0, 0x3f	; 63
    232c:	f8 94       	cli
    232e:	de bf       	out	0x3e, r29	; 62
    2330:	0f be       	out	0x3f, r0	; 63
    2332:	cd bf       	out	0x3d, r28	; 61
    2334:	7c 01       	movw	r14, r24
    2336:	6b 01       	movw	r12, r22
    2338:	8a 01       	movw	r16, r20
    233a:	fc 01       	movw	r30, r24
    233c:	17 82       	std	Z+7, r1	; 0x07
    233e:	16 82       	std	Z+6, r1	; 0x06
    2340:	83 81       	ldd	r24, Z+3	; 0x03
    2342:	81 ff       	sbrs	r24, 1
    2344:	b0 c1       	rjmp	.+864    	; 0x26a6 <vfprintf+0x3a6>
    2346:	ce 01       	movw	r24, r28
    2348:	01 96       	adiw	r24, 0x01	; 1
    234a:	4c 01       	movw	r8, r24
    234c:	f7 01       	movw	r30, r14
    234e:	93 81       	ldd	r25, Z+3	; 0x03
    2350:	f6 01       	movw	r30, r12
    2352:	93 fd       	sbrc	r25, 3
    2354:	85 91       	lpm	r24, Z+
    2356:	93 ff       	sbrs	r25, 3
    2358:	81 91       	ld	r24, Z+
    235a:	6f 01       	movw	r12, r30
    235c:	88 23       	and	r24, r24
    235e:	09 f4       	brne	.+2      	; 0x2362 <vfprintf+0x62>
    2360:	9e c1       	rjmp	.+828    	; 0x269e <vfprintf+0x39e>
    2362:	85 32       	cpi	r24, 0x25	; 37
    2364:	39 f4       	brne	.+14     	; 0x2374 <vfprintf+0x74>
    2366:	93 fd       	sbrc	r25, 3
    2368:	85 91       	lpm	r24, Z+
    236a:	93 ff       	sbrs	r25, 3
    236c:	81 91       	ld	r24, Z+
    236e:	6f 01       	movw	r12, r30
    2370:	85 32       	cpi	r24, 0x25	; 37
    2372:	21 f4       	brne	.+8      	; 0x237c <vfprintf+0x7c>
    2374:	b7 01       	movw	r22, r14
    2376:	90 e0       	ldi	r25, 0x00	; 0
    2378:	0f d3       	rcall	.+1566   	; 0x2998 <fputc>
    237a:	e8 cf       	rjmp	.-48     	; 0x234c <vfprintf+0x4c>
    237c:	51 2c       	mov	r5, r1
    237e:	31 2c       	mov	r3, r1
    2380:	20 e0       	ldi	r18, 0x00	; 0
    2382:	20 32       	cpi	r18, 0x20	; 32
    2384:	a0 f4       	brcc	.+40     	; 0x23ae <vfprintf+0xae>
    2386:	8b 32       	cpi	r24, 0x2B	; 43
    2388:	69 f0       	breq	.+26     	; 0x23a4 <vfprintf+0xa4>
    238a:	30 f4       	brcc	.+12     	; 0x2398 <vfprintf+0x98>
    238c:	80 32       	cpi	r24, 0x20	; 32
    238e:	59 f0       	breq	.+22     	; 0x23a6 <vfprintf+0xa6>
    2390:	83 32       	cpi	r24, 0x23	; 35
    2392:	69 f4       	brne	.+26     	; 0x23ae <vfprintf+0xae>
    2394:	20 61       	ori	r18, 0x10	; 16
    2396:	2c c0       	rjmp	.+88     	; 0x23f0 <vfprintf+0xf0>
    2398:	8d 32       	cpi	r24, 0x2D	; 45
    239a:	39 f0       	breq	.+14     	; 0x23aa <vfprintf+0xaa>
    239c:	80 33       	cpi	r24, 0x30	; 48
    239e:	39 f4       	brne	.+14     	; 0x23ae <vfprintf+0xae>
    23a0:	21 60       	ori	r18, 0x01	; 1
    23a2:	26 c0       	rjmp	.+76     	; 0x23f0 <vfprintf+0xf0>
    23a4:	22 60       	ori	r18, 0x02	; 2
    23a6:	24 60       	ori	r18, 0x04	; 4
    23a8:	23 c0       	rjmp	.+70     	; 0x23f0 <vfprintf+0xf0>
    23aa:	28 60       	ori	r18, 0x08	; 8
    23ac:	21 c0       	rjmp	.+66     	; 0x23f0 <vfprintf+0xf0>
    23ae:	27 fd       	sbrc	r18, 7
    23b0:	27 c0       	rjmp	.+78     	; 0x2400 <vfprintf+0x100>
    23b2:	30 ed       	ldi	r19, 0xD0	; 208
    23b4:	38 0f       	add	r19, r24
    23b6:	3a 30       	cpi	r19, 0x0A	; 10
    23b8:	78 f4       	brcc	.+30     	; 0x23d8 <vfprintf+0xd8>
    23ba:	26 ff       	sbrs	r18, 6
    23bc:	06 c0       	rjmp	.+12     	; 0x23ca <vfprintf+0xca>
    23be:	fa e0       	ldi	r31, 0x0A	; 10
    23c0:	5f 9e       	mul	r5, r31
    23c2:	30 0d       	add	r19, r0
    23c4:	11 24       	eor	r1, r1
    23c6:	53 2e       	mov	r5, r19
    23c8:	13 c0       	rjmp	.+38     	; 0x23f0 <vfprintf+0xf0>
    23ca:	8a e0       	ldi	r24, 0x0A	; 10
    23cc:	38 9e       	mul	r3, r24
    23ce:	30 0d       	add	r19, r0
    23d0:	11 24       	eor	r1, r1
    23d2:	33 2e       	mov	r3, r19
    23d4:	20 62       	ori	r18, 0x20	; 32
    23d6:	0c c0       	rjmp	.+24     	; 0x23f0 <vfprintf+0xf0>
    23d8:	8e 32       	cpi	r24, 0x2E	; 46
    23da:	21 f4       	brne	.+8      	; 0x23e4 <vfprintf+0xe4>
    23dc:	26 fd       	sbrc	r18, 6
    23de:	5f c1       	rjmp	.+702    	; 0x269e <vfprintf+0x39e>
    23e0:	20 64       	ori	r18, 0x40	; 64
    23e2:	06 c0       	rjmp	.+12     	; 0x23f0 <vfprintf+0xf0>
    23e4:	8c 36       	cpi	r24, 0x6C	; 108
    23e6:	11 f4       	brne	.+4      	; 0x23ec <vfprintf+0xec>
    23e8:	20 68       	ori	r18, 0x80	; 128
    23ea:	02 c0       	rjmp	.+4      	; 0x23f0 <vfprintf+0xf0>
    23ec:	88 36       	cpi	r24, 0x68	; 104
    23ee:	41 f4       	brne	.+16     	; 0x2400 <vfprintf+0x100>
    23f0:	f6 01       	movw	r30, r12
    23f2:	93 fd       	sbrc	r25, 3
    23f4:	85 91       	lpm	r24, Z+
    23f6:	93 ff       	sbrs	r25, 3
    23f8:	81 91       	ld	r24, Z+
    23fa:	6f 01       	movw	r12, r30
    23fc:	81 11       	cpse	r24, r1
    23fe:	c1 cf       	rjmp	.-126    	; 0x2382 <vfprintf+0x82>
    2400:	98 2f       	mov	r25, r24
    2402:	9f 7d       	andi	r25, 0xDF	; 223
    2404:	95 54       	subi	r25, 0x45	; 69
    2406:	93 30       	cpi	r25, 0x03	; 3
    2408:	28 f4       	brcc	.+10     	; 0x2414 <vfprintf+0x114>
    240a:	0c 5f       	subi	r16, 0xFC	; 252
    240c:	1f 4f       	sbci	r17, 0xFF	; 255
    240e:	ff e3       	ldi	r31, 0x3F	; 63
    2410:	f9 83       	std	Y+1, r31	; 0x01
    2412:	0d c0       	rjmp	.+26     	; 0x242e <vfprintf+0x12e>
    2414:	83 36       	cpi	r24, 0x63	; 99
    2416:	31 f0       	breq	.+12     	; 0x2424 <vfprintf+0x124>
    2418:	83 37       	cpi	r24, 0x73	; 115
    241a:	71 f0       	breq	.+28     	; 0x2438 <vfprintf+0x138>
    241c:	83 35       	cpi	r24, 0x53	; 83
    241e:	09 f0       	breq	.+2      	; 0x2422 <vfprintf+0x122>
    2420:	57 c0       	rjmp	.+174    	; 0x24d0 <vfprintf+0x1d0>
    2422:	21 c0       	rjmp	.+66     	; 0x2466 <vfprintf+0x166>
    2424:	f8 01       	movw	r30, r16
    2426:	80 81       	ld	r24, Z
    2428:	89 83       	std	Y+1, r24	; 0x01
    242a:	0e 5f       	subi	r16, 0xFE	; 254
    242c:	1f 4f       	sbci	r17, 0xFF	; 255
    242e:	44 24       	eor	r4, r4
    2430:	43 94       	inc	r4
    2432:	51 2c       	mov	r5, r1
    2434:	54 01       	movw	r10, r8
    2436:	14 c0       	rjmp	.+40     	; 0x2460 <vfprintf+0x160>
    2438:	38 01       	movw	r6, r16
    243a:	f2 e0       	ldi	r31, 0x02	; 2
    243c:	6f 0e       	add	r6, r31
    243e:	71 1c       	adc	r7, r1
    2440:	f8 01       	movw	r30, r16
    2442:	a0 80       	ld	r10, Z
    2444:	b1 80       	ldd	r11, Z+1	; 0x01
    2446:	26 ff       	sbrs	r18, 6
    2448:	03 c0       	rjmp	.+6      	; 0x2450 <vfprintf+0x150>
    244a:	65 2d       	mov	r22, r5
    244c:	70 e0       	ldi	r23, 0x00	; 0
    244e:	02 c0       	rjmp	.+4      	; 0x2454 <vfprintf+0x154>
    2450:	6f ef       	ldi	r22, 0xFF	; 255
    2452:	7f ef       	ldi	r23, 0xFF	; 255
    2454:	c5 01       	movw	r24, r10
    2456:	2c 87       	std	Y+12, r18	; 0x0c
    2458:	94 d2       	rcall	.+1320   	; 0x2982 <strnlen>
    245a:	2c 01       	movw	r4, r24
    245c:	83 01       	movw	r16, r6
    245e:	2c 85       	ldd	r18, Y+12	; 0x0c
    2460:	2f 77       	andi	r18, 0x7F	; 127
    2462:	22 2e       	mov	r2, r18
    2464:	16 c0       	rjmp	.+44     	; 0x2492 <vfprintf+0x192>
    2466:	38 01       	movw	r6, r16
    2468:	f2 e0       	ldi	r31, 0x02	; 2
    246a:	6f 0e       	add	r6, r31
    246c:	71 1c       	adc	r7, r1
    246e:	f8 01       	movw	r30, r16
    2470:	a0 80       	ld	r10, Z
    2472:	b1 80       	ldd	r11, Z+1	; 0x01
    2474:	26 ff       	sbrs	r18, 6
    2476:	03 c0       	rjmp	.+6      	; 0x247e <vfprintf+0x17e>
    2478:	65 2d       	mov	r22, r5
    247a:	70 e0       	ldi	r23, 0x00	; 0
    247c:	02 c0       	rjmp	.+4      	; 0x2482 <vfprintf+0x182>
    247e:	6f ef       	ldi	r22, 0xFF	; 255
    2480:	7f ef       	ldi	r23, 0xFF	; 255
    2482:	c5 01       	movw	r24, r10
    2484:	2c 87       	std	Y+12, r18	; 0x0c
    2486:	6b d2       	rcall	.+1238   	; 0x295e <strnlen_P>
    2488:	2c 01       	movw	r4, r24
    248a:	2c 85       	ldd	r18, Y+12	; 0x0c
    248c:	20 68       	ori	r18, 0x80	; 128
    248e:	22 2e       	mov	r2, r18
    2490:	83 01       	movw	r16, r6
    2492:	23 fc       	sbrc	r2, 3
    2494:	19 c0       	rjmp	.+50     	; 0x24c8 <vfprintf+0x1c8>
    2496:	83 2d       	mov	r24, r3
    2498:	90 e0       	ldi	r25, 0x00	; 0
    249a:	48 16       	cp	r4, r24
    249c:	59 06       	cpc	r5, r25
    249e:	a0 f4       	brcc	.+40     	; 0x24c8 <vfprintf+0x1c8>
    24a0:	b7 01       	movw	r22, r14
    24a2:	80 e2       	ldi	r24, 0x20	; 32
    24a4:	90 e0       	ldi	r25, 0x00	; 0
    24a6:	78 d2       	rcall	.+1264   	; 0x2998 <fputc>
    24a8:	3a 94       	dec	r3
    24aa:	f5 cf       	rjmp	.-22     	; 0x2496 <vfprintf+0x196>
    24ac:	f5 01       	movw	r30, r10
    24ae:	27 fc       	sbrc	r2, 7
    24b0:	85 91       	lpm	r24, Z+
    24b2:	27 fe       	sbrs	r2, 7
    24b4:	81 91       	ld	r24, Z+
    24b6:	5f 01       	movw	r10, r30
    24b8:	b7 01       	movw	r22, r14
    24ba:	90 e0       	ldi	r25, 0x00	; 0
    24bc:	6d d2       	rcall	.+1242   	; 0x2998 <fputc>
    24be:	31 10       	cpse	r3, r1
    24c0:	3a 94       	dec	r3
    24c2:	f1 e0       	ldi	r31, 0x01	; 1
    24c4:	4f 1a       	sub	r4, r31
    24c6:	51 08       	sbc	r5, r1
    24c8:	41 14       	cp	r4, r1
    24ca:	51 04       	cpc	r5, r1
    24cc:	79 f7       	brne	.-34     	; 0x24ac <vfprintf+0x1ac>
    24ce:	de c0       	rjmp	.+444    	; 0x268c <vfprintf+0x38c>
    24d0:	84 36       	cpi	r24, 0x64	; 100
    24d2:	11 f0       	breq	.+4      	; 0x24d8 <vfprintf+0x1d8>
    24d4:	89 36       	cpi	r24, 0x69	; 105
    24d6:	31 f5       	brne	.+76     	; 0x2524 <vfprintf+0x224>
    24d8:	f8 01       	movw	r30, r16
    24da:	27 ff       	sbrs	r18, 7
    24dc:	07 c0       	rjmp	.+14     	; 0x24ec <vfprintf+0x1ec>
    24de:	60 81       	ld	r22, Z
    24e0:	71 81       	ldd	r23, Z+1	; 0x01
    24e2:	82 81       	ldd	r24, Z+2	; 0x02
    24e4:	93 81       	ldd	r25, Z+3	; 0x03
    24e6:	0c 5f       	subi	r16, 0xFC	; 252
    24e8:	1f 4f       	sbci	r17, 0xFF	; 255
    24ea:	08 c0       	rjmp	.+16     	; 0x24fc <vfprintf+0x1fc>
    24ec:	60 81       	ld	r22, Z
    24ee:	71 81       	ldd	r23, Z+1	; 0x01
    24f0:	88 27       	eor	r24, r24
    24f2:	77 fd       	sbrc	r23, 7
    24f4:	80 95       	com	r24
    24f6:	98 2f       	mov	r25, r24
    24f8:	0e 5f       	subi	r16, 0xFE	; 254
    24fa:	1f 4f       	sbci	r17, 0xFF	; 255
    24fc:	2f 76       	andi	r18, 0x6F	; 111
    24fe:	b2 2e       	mov	r11, r18
    2500:	97 ff       	sbrs	r25, 7
    2502:	09 c0       	rjmp	.+18     	; 0x2516 <vfprintf+0x216>
    2504:	90 95       	com	r25
    2506:	80 95       	com	r24
    2508:	70 95       	com	r23
    250a:	61 95       	neg	r22
    250c:	7f 4f       	sbci	r23, 0xFF	; 255
    250e:	8f 4f       	sbci	r24, 0xFF	; 255
    2510:	9f 4f       	sbci	r25, 0xFF	; 255
    2512:	20 68       	ori	r18, 0x80	; 128
    2514:	b2 2e       	mov	r11, r18
    2516:	2a e0       	ldi	r18, 0x0A	; 10
    2518:	30 e0       	ldi	r19, 0x00	; 0
    251a:	a4 01       	movw	r20, r8
    251c:	6f d2       	rcall	.+1246   	; 0x29fc <__ultoa_invert>
    251e:	a8 2e       	mov	r10, r24
    2520:	a8 18       	sub	r10, r8
    2522:	43 c0       	rjmp	.+134    	; 0x25aa <vfprintf+0x2aa>
    2524:	85 37       	cpi	r24, 0x75	; 117
    2526:	29 f4       	brne	.+10     	; 0x2532 <vfprintf+0x232>
    2528:	2f 7e       	andi	r18, 0xEF	; 239
    252a:	b2 2e       	mov	r11, r18
    252c:	2a e0       	ldi	r18, 0x0A	; 10
    252e:	30 e0       	ldi	r19, 0x00	; 0
    2530:	25 c0       	rjmp	.+74     	; 0x257c <vfprintf+0x27c>
    2532:	f2 2f       	mov	r31, r18
    2534:	f9 7f       	andi	r31, 0xF9	; 249
    2536:	bf 2e       	mov	r11, r31
    2538:	8f 36       	cpi	r24, 0x6F	; 111
    253a:	c1 f0       	breq	.+48     	; 0x256c <vfprintf+0x26c>
    253c:	18 f4       	brcc	.+6      	; 0x2544 <vfprintf+0x244>
    253e:	88 35       	cpi	r24, 0x58	; 88
    2540:	79 f0       	breq	.+30     	; 0x2560 <vfprintf+0x260>
    2542:	ad c0       	rjmp	.+346    	; 0x269e <vfprintf+0x39e>
    2544:	80 37       	cpi	r24, 0x70	; 112
    2546:	19 f0       	breq	.+6      	; 0x254e <vfprintf+0x24e>
    2548:	88 37       	cpi	r24, 0x78	; 120
    254a:	21 f0       	breq	.+8      	; 0x2554 <vfprintf+0x254>
    254c:	a8 c0       	rjmp	.+336    	; 0x269e <vfprintf+0x39e>
    254e:	2f 2f       	mov	r18, r31
    2550:	20 61       	ori	r18, 0x10	; 16
    2552:	b2 2e       	mov	r11, r18
    2554:	b4 fe       	sbrs	r11, 4
    2556:	0d c0       	rjmp	.+26     	; 0x2572 <vfprintf+0x272>
    2558:	8b 2d       	mov	r24, r11
    255a:	84 60       	ori	r24, 0x04	; 4
    255c:	b8 2e       	mov	r11, r24
    255e:	09 c0       	rjmp	.+18     	; 0x2572 <vfprintf+0x272>
    2560:	24 ff       	sbrs	r18, 4
    2562:	0a c0       	rjmp	.+20     	; 0x2578 <vfprintf+0x278>
    2564:	9f 2f       	mov	r25, r31
    2566:	96 60       	ori	r25, 0x06	; 6
    2568:	b9 2e       	mov	r11, r25
    256a:	06 c0       	rjmp	.+12     	; 0x2578 <vfprintf+0x278>
    256c:	28 e0       	ldi	r18, 0x08	; 8
    256e:	30 e0       	ldi	r19, 0x00	; 0
    2570:	05 c0       	rjmp	.+10     	; 0x257c <vfprintf+0x27c>
    2572:	20 e1       	ldi	r18, 0x10	; 16
    2574:	30 e0       	ldi	r19, 0x00	; 0
    2576:	02 c0       	rjmp	.+4      	; 0x257c <vfprintf+0x27c>
    2578:	20 e1       	ldi	r18, 0x10	; 16
    257a:	32 e0       	ldi	r19, 0x02	; 2
    257c:	f8 01       	movw	r30, r16
    257e:	b7 fe       	sbrs	r11, 7
    2580:	07 c0       	rjmp	.+14     	; 0x2590 <vfprintf+0x290>
    2582:	60 81       	ld	r22, Z
    2584:	71 81       	ldd	r23, Z+1	; 0x01
    2586:	82 81       	ldd	r24, Z+2	; 0x02
    2588:	93 81       	ldd	r25, Z+3	; 0x03
    258a:	0c 5f       	subi	r16, 0xFC	; 252
    258c:	1f 4f       	sbci	r17, 0xFF	; 255
    258e:	06 c0       	rjmp	.+12     	; 0x259c <vfprintf+0x29c>
    2590:	60 81       	ld	r22, Z
    2592:	71 81       	ldd	r23, Z+1	; 0x01
    2594:	80 e0       	ldi	r24, 0x00	; 0
    2596:	90 e0       	ldi	r25, 0x00	; 0
    2598:	0e 5f       	subi	r16, 0xFE	; 254
    259a:	1f 4f       	sbci	r17, 0xFF	; 255
    259c:	a4 01       	movw	r20, r8
    259e:	2e d2       	rcall	.+1116   	; 0x29fc <__ultoa_invert>
    25a0:	a8 2e       	mov	r10, r24
    25a2:	a8 18       	sub	r10, r8
    25a4:	fb 2d       	mov	r31, r11
    25a6:	ff 77       	andi	r31, 0x7F	; 127
    25a8:	bf 2e       	mov	r11, r31
    25aa:	b6 fe       	sbrs	r11, 6
    25ac:	0b c0       	rjmp	.+22     	; 0x25c4 <vfprintf+0x2c4>
    25ae:	2b 2d       	mov	r18, r11
    25b0:	2e 7f       	andi	r18, 0xFE	; 254
    25b2:	a5 14       	cp	r10, r5
    25b4:	50 f4       	brcc	.+20     	; 0x25ca <vfprintf+0x2ca>
    25b6:	b4 fe       	sbrs	r11, 4
    25b8:	0a c0       	rjmp	.+20     	; 0x25ce <vfprintf+0x2ce>
    25ba:	b2 fc       	sbrc	r11, 2
    25bc:	08 c0       	rjmp	.+16     	; 0x25ce <vfprintf+0x2ce>
    25be:	2b 2d       	mov	r18, r11
    25c0:	2e 7e       	andi	r18, 0xEE	; 238
    25c2:	05 c0       	rjmp	.+10     	; 0x25ce <vfprintf+0x2ce>
    25c4:	7a 2c       	mov	r7, r10
    25c6:	2b 2d       	mov	r18, r11
    25c8:	03 c0       	rjmp	.+6      	; 0x25d0 <vfprintf+0x2d0>
    25ca:	7a 2c       	mov	r7, r10
    25cc:	01 c0       	rjmp	.+2      	; 0x25d0 <vfprintf+0x2d0>
    25ce:	75 2c       	mov	r7, r5
    25d0:	24 ff       	sbrs	r18, 4
    25d2:	0d c0       	rjmp	.+26     	; 0x25ee <vfprintf+0x2ee>
    25d4:	fe 01       	movw	r30, r28
    25d6:	ea 0d       	add	r30, r10
    25d8:	f1 1d       	adc	r31, r1
    25da:	80 81       	ld	r24, Z
    25dc:	80 33       	cpi	r24, 0x30	; 48
    25de:	11 f4       	brne	.+4      	; 0x25e4 <vfprintf+0x2e4>
    25e0:	29 7e       	andi	r18, 0xE9	; 233
    25e2:	09 c0       	rjmp	.+18     	; 0x25f6 <vfprintf+0x2f6>
    25e4:	22 ff       	sbrs	r18, 2
    25e6:	06 c0       	rjmp	.+12     	; 0x25f4 <vfprintf+0x2f4>
    25e8:	73 94       	inc	r7
    25ea:	73 94       	inc	r7
    25ec:	04 c0       	rjmp	.+8      	; 0x25f6 <vfprintf+0x2f6>
    25ee:	82 2f       	mov	r24, r18
    25f0:	86 78       	andi	r24, 0x86	; 134
    25f2:	09 f0       	breq	.+2      	; 0x25f6 <vfprintf+0x2f6>
    25f4:	73 94       	inc	r7
    25f6:	23 fd       	sbrc	r18, 3
    25f8:	12 c0       	rjmp	.+36     	; 0x261e <vfprintf+0x31e>
    25fa:	20 ff       	sbrs	r18, 0
    25fc:	06 c0       	rjmp	.+12     	; 0x260a <vfprintf+0x30a>
    25fe:	5a 2c       	mov	r5, r10
    2600:	73 14       	cp	r7, r3
    2602:	18 f4       	brcc	.+6      	; 0x260a <vfprintf+0x30a>
    2604:	53 0c       	add	r5, r3
    2606:	57 18       	sub	r5, r7
    2608:	73 2c       	mov	r7, r3
    260a:	73 14       	cp	r7, r3
    260c:	60 f4       	brcc	.+24     	; 0x2626 <vfprintf+0x326>
    260e:	b7 01       	movw	r22, r14
    2610:	80 e2       	ldi	r24, 0x20	; 32
    2612:	90 e0       	ldi	r25, 0x00	; 0
    2614:	2c 87       	std	Y+12, r18	; 0x0c
    2616:	c0 d1       	rcall	.+896    	; 0x2998 <fputc>
    2618:	73 94       	inc	r7
    261a:	2c 85       	ldd	r18, Y+12	; 0x0c
    261c:	f6 cf       	rjmp	.-20     	; 0x260a <vfprintf+0x30a>
    261e:	73 14       	cp	r7, r3
    2620:	10 f4       	brcc	.+4      	; 0x2626 <vfprintf+0x326>
    2622:	37 18       	sub	r3, r7
    2624:	01 c0       	rjmp	.+2      	; 0x2628 <vfprintf+0x328>
    2626:	31 2c       	mov	r3, r1
    2628:	24 ff       	sbrs	r18, 4
    262a:	11 c0       	rjmp	.+34     	; 0x264e <vfprintf+0x34e>
    262c:	b7 01       	movw	r22, r14
    262e:	80 e3       	ldi	r24, 0x30	; 48
    2630:	90 e0       	ldi	r25, 0x00	; 0
    2632:	2c 87       	std	Y+12, r18	; 0x0c
    2634:	b1 d1       	rcall	.+866    	; 0x2998 <fputc>
    2636:	2c 85       	ldd	r18, Y+12	; 0x0c
    2638:	22 ff       	sbrs	r18, 2
    263a:	16 c0       	rjmp	.+44     	; 0x2668 <vfprintf+0x368>
    263c:	21 ff       	sbrs	r18, 1
    263e:	03 c0       	rjmp	.+6      	; 0x2646 <vfprintf+0x346>
    2640:	88 e5       	ldi	r24, 0x58	; 88
    2642:	90 e0       	ldi	r25, 0x00	; 0
    2644:	02 c0       	rjmp	.+4      	; 0x264a <vfprintf+0x34a>
    2646:	88 e7       	ldi	r24, 0x78	; 120
    2648:	90 e0       	ldi	r25, 0x00	; 0
    264a:	b7 01       	movw	r22, r14
    264c:	0c c0       	rjmp	.+24     	; 0x2666 <vfprintf+0x366>
    264e:	82 2f       	mov	r24, r18
    2650:	86 78       	andi	r24, 0x86	; 134
    2652:	51 f0       	breq	.+20     	; 0x2668 <vfprintf+0x368>
    2654:	21 fd       	sbrc	r18, 1
    2656:	02 c0       	rjmp	.+4      	; 0x265c <vfprintf+0x35c>
    2658:	80 e2       	ldi	r24, 0x20	; 32
    265a:	01 c0       	rjmp	.+2      	; 0x265e <vfprintf+0x35e>
    265c:	8b e2       	ldi	r24, 0x2B	; 43
    265e:	27 fd       	sbrc	r18, 7
    2660:	8d e2       	ldi	r24, 0x2D	; 45
    2662:	b7 01       	movw	r22, r14
    2664:	90 e0       	ldi	r25, 0x00	; 0
    2666:	98 d1       	rcall	.+816    	; 0x2998 <fputc>
    2668:	a5 14       	cp	r10, r5
    266a:	30 f4       	brcc	.+12     	; 0x2678 <vfprintf+0x378>
    266c:	b7 01       	movw	r22, r14
    266e:	80 e3       	ldi	r24, 0x30	; 48
    2670:	90 e0       	ldi	r25, 0x00	; 0
    2672:	92 d1       	rcall	.+804    	; 0x2998 <fputc>
    2674:	5a 94       	dec	r5
    2676:	f8 cf       	rjmp	.-16     	; 0x2668 <vfprintf+0x368>
    2678:	aa 94       	dec	r10
    267a:	f4 01       	movw	r30, r8
    267c:	ea 0d       	add	r30, r10
    267e:	f1 1d       	adc	r31, r1
    2680:	80 81       	ld	r24, Z
    2682:	b7 01       	movw	r22, r14
    2684:	90 e0       	ldi	r25, 0x00	; 0
    2686:	88 d1       	rcall	.+784    	; 0x2998 <fputc>
    2688:	a1 10       	cpse	r10, r1
    268a:	f6 cf       	rjmp	.-20     	; 0x2678 <vfprintf+0x378>
    268c:	33 20       	and	r3, r3
    268e:	09 f4       	brne	.+2      	; 0x2692 <vfprintf+0x392>
    2690:	5d ce       	rjmp	.-838    	; 0x234c <vfprintf+0x4c>
    2692:	b7 01       	movw	r22, r14
    2694:	80 e2       	ldi	r24, 0x20	; 32
    2696:	90 e0       	ldi	r25, 0x00	; 0
    2698:	7f d1       	rcall	.+766    	; 0x2998 <fputc>
    269a:	3a 94       	dec	r3
    269c:	f7 cf       	rjmp	.-18     	; 0x268c <vfprintf+0x38c>
    269e:	f7 01       	movw	r30, r14
    26a0:	86 81       	ldd	r24, Z+6	; 0x06
    26a2:	97 81       	ldd	r25, Z+7	; 0x07
    26a4:	02 c0       	rjmp	.+4      	; 0x26aa <vfprintf+0x3aa>
    26a6:	8f ef       	ldi	r24, 0xFF	; 255
    26a8:	9f ef       	ldi	r25, 0xFF	; 255
    26aa:	2c 96       	adiw	r28, 0x0c	; 12
    26ac:	0f b6       	in	r0, 0x3f	; 63
    26ae:	f8 94       	cli
    26b0:	de bf       	out	0x3e, r29	; 62
    26b2:	0f be       	out	0x3f, r0	; 63
    26b4:	cd bf       	out	0x3d, r28	; 61
    26b6:	df 91       	pop	r29
    26b8:	cf 91       	pop	r28
    26ba:	1f 91       	pop	r17
    26bc:	0f 91       	pop	r16
    26be:	ff 90       	pop	r15
    26c0:	ef 90       	pop	r14
    26c2:	df 90       	pop	r13
    26c4:	cf 90       	pop	r12
    26c6:	bf 90       	pop	r11
    26c8:	af 90       	pop	r10
    26ca:	9f 90       	pop	r9
    26cc:	8f 90       	pop	r8
    26ce:	7f 90       	pop	r7
    26d0:	6f 90       	pop	r6
    26d2:	5f 90       	pop	r5
    26d4:	4f 90       	pop	r4
    26d6:	3f 90       	pop	r3
    26d8:	2f 90       	pop	r2
    26da:	08 95       	ret

000026dc <calloc>:
    26dc:	0f 93       	push	r16
    26de:	1f 93       	push	r17
    26e0:	cf 93       	push	r28
    26e2:	df 93       	push	r29
    26e4:	86 9f       	mul	r24, r22
    26e6:	80 01       	movw	r16, r0
    26e8:	87 9f       	mul	r24, r23
    26ea:	10 0d       	add	r17, r0
    26ec:	96 9f       	mul	r25, r22
    26ee:	10 0d       	add	r17, r0
    26f0:	11 24       	eor	r1, r1
    26f2:	c8 01       	movw	r24, r16
    26f4:	0d d0       	rcall	.+26     	; 0x2710 <malloc>
    26f6:	ec 01       	movw	r28, r24
    26f8:	00 97       	sbiw	r24, 0x00	; 0
    26fa:	21 f0       	breq	.+8      	; 0x2704 <calloc+0x28>
    26fc:	a8 01       	movw	r20, r16
    26fe:	60 e0       	ldi	r22, 0x00	; 0
    2700:	70 e0       	ldi	r23, 0x00	; 0
    2702:	38 d1       	rcall	.+624    	; 0x2974 <memset>
    2704:	ce 01       	movw	r24, r28
    2706:	df 91       	pop	r29
    2708:	cf 91       	pop	r28
    270a:	1f 91       	pop	r17
    270c:	0f 91       	pop	r16
    270e:	08 95       	ret

00002710 <malloc>:
    2710:	cf 93       	push	r28
    2712:	df 93       	push	r29
    2714:	82 30       	cpi	r24, 0x02	; 2
    2716:	91 05       	cpc	r25, r1
    2718:	10 f4       	brcc	.+4      	; 0x271e <malloc+0xe>
    271a:	82 e0       	ldi	r24, 0x02	; 2
    271c:	90 e0       	ldi	r25, 0x00	; 0
    271e:	e0 91 c2 0c 	lds	r30, 0x0CC2
    2722:	f0 91 c3 0c 	lds	r31, 0x0CC3
    2726:	20 e0       	ldi	r18, 0x00	; 0
    2728:	30 e0       	ldi	r19, 0x00	; 0
    272a:	a0 e0       	ldi	r26, 0x00	; 0
    272c:	b0 e0       	ldi	r27, 0x00	; 0
    272e:	30 97       	sbiw	r30, 0x00	; 0
    2730:	39 f1       	breq	.+78     	; 0x2780 <malloc+0x70>
    2732:	40 81       	ld	r20, Z
    2734:	51 81       	ldd	r21, Z+1	; 0x01
    2736:	48 17       	cp	r20, r24
    2738:	59 07       	cpc	r21, r25
    273a:	b8 f0       	brcs	.+46     	; 0x276a <malloc+0x5a>
    273c:	48 17       	cp	r20, r24
    273e:	59 07       	cpc	r21, r25
    2740:	71 f4       	brne	.+28     	; 0x275e <malloc+0x4e>
    2742:	82 81       	ldd	r24, Z+2	; 0x02
    2744:	93 81       	ldd	r25, Z+3	; 0x03
    2746:	10 97       	sbiw	r26, 0x00	; 0
    2748:	29 f0       	breq	.+10     	; 0x2754 <malloc+0x44>
    274a:	13 96       	adiw	r26, 0x03	; 3
    274c:	9c 93       	st	X, r25
    274e:	8e 93       	st	-X, r24
    2750:	12 97       	sbiw	r26, 0x02	; 2
    2752:	2c c0       	rjmp	.+88     	; 0x27ac <malloc+0x9c>
    2754:	90 93 c3 0c 	sts	0x0CC3, r25
    2758:	80 93 c2 0c 	sts	0x0CC2, r24
    275c:	27 c0       	rjmp	.+78     	; 0x27ac <malloc+0x9c>
    275e:	21 15       	cp	r18, r1
    2760:	31 05       	cpc	r19, r1
    2762:	31 f0       	breq	.+12     	; 0x2770 <malloc+0x60>
    2764:	42 17       	cp	r20, r18
    2766:	53 07       	cpc	r21, r19
    2768:	18 f0       	brcs	.+6      	; 0x2770 <malloc+0x60>
    276a:	a9 01       	movw	r20, r18
    276c:	db 01       	movw	r26, r22
    276e:	01 c0       	rjmp	.+2      	; 0x2772 <malloc+0x62>
    2770:	ef 01       	movw	r28, r30
    2772:	9a 01       	movw	r18, r20
    2774:	bd 01       	movw	r22, r26
    2776:	df 01       	movw	r26, r30
    2778:	02 80       	ldd	r0, Z+2	; 0x02
    277a:	f3 81       	ldd	r31, Z+3	; 0x03
    277c:	e0 2d       	mov	r30, r0
    277e:	d7 cf       	rjmp	.-82     	; 0x272e <malloc+0x1e>
    2780:	21 15       	cp	r18, r1
    2782:	31 05       	cpc	r19, r1
    2784:	f9 f0       	breq	.+62     	; 0x27c4 <malloc+0xb4>
    2786:	28 1b       	sub	r18, r24
    2788:	39 0b       	sbc	r19, r25
    278a:	24 30       	cpi	r18, 0x04	; 4
    278c:	31 05       	cpc	r19, r1
    278e:	80 f4       	brcc	.+32     	; 0x27b0 <malloc+0xa0>
    2790:	8a 81       	ldd	r24, Y+2	; 0x02
    2792:	9b 81       	ldd	r25, Y+3	; 0x03
    2794:	61 15       	cp	r22, r1
    2796:	71 05       	cpc	r23, r1
    2798:	21 f0       	breq	.+8      	; 0x27a2 <malloc+0x92>
    279a:	fb 01       	movw	r30, r22
    279c:	93 83       	std	Z+3, r25	; 0x03
    279e:	82 83       	std	Z+2, r24	; 0x02
    27a0:	04 c0       	rjmp	.+8      	; 0x27aa <malloc+0x9a>
    27a2:	90 93 c3 0c 	sts	0x0CC3, r25
    27a6:	80 93 c2 0c 	sts	0x0CC2, r24
    27aa:	fe 01       	movw	r30, r28
    27ac:	32 96       	adiw	r30, 0x02	; 2
    27ae:	44 c0       	rjmp	.+136    	; 0x2838 <malloc+0x128>
    27b0:	fe 01       	movw	r30, r28
    27b2:	e2 0f       	add	r30, r18
    27b4:	f3 1f       	adc	r31, r19
    27b6:	81 93       	st	Z+, r24
    27b8:	91 93       	st	Z+, r25
    27ba:	22 50       	subi	r18, 0x02	; 2
    27bc:	31 09       	sbc	r19, r1
    27be:	39 83       	std	Y+1, r19	; 0x01
    27c0:	28 83       	st	Y, r18
    27c2:	3a c0       	rjmp	.+116    	; 0x2838 <malloc+0x128>
    27c4:	20 91 c0 0c 	lds	r18, 0x0CC0
    27c8:	30 91 c1 0c 	lds	r19, 0x0CC1
    27cc:	23 2b       	or	r18, r19
    27ce:	41 f4       	brne	.+16     	; 0x27e0 <malloc+0xd0>
    27d0:	20 91 04 02 	lds	r18, 0x0204
    27d4:	30 91 05 02 	lds	r19, 0x0205
    27d8:	30 93 c1 0c 	sts	0x0CC1, r19
    27dc:	20 93 c0 0c 	sts	0x0CC0, r18
    27e0:	20 91 02 02 	lds	r18, 0x0202
    27e4:	30 91 03 02 	lds	r19, 0x0203
    27e8:	21 15       	cp	r18, r1
    27ea:	31 05       	cpc	r19, r1
    27ec:	41 f4       	brne	.+16     	; 0x27fe <malloc+0xee>
    27ee:	2d b7       	in	r18, 0x3d	; 61
    27f0:	3e b7       	in	r19, 0x3e	; 62
    27f2:	40 91 06 02 	lds	r20, 0x0206
    27f6:	50 91 07 02 	lds	r21, 0x0207
    27fa:	24 1b       	sub	r18, r20
    27fc:	35 0b       	sbc	r19, r21
    27fe:	e0 91 c0 0c 	lds	r30, 0x0CC0
    2802:	f0 91 c1 0c 	lds	r31, 0x0CC1
    2806:	e2 17       	cp	r30, r18
    2808:	f3 07       	cpc	r31, r19
    280a:	a0 f4       	brcc	.+40     	; 0x2834 <malloc+0x124>
    280c:	2e 1b       	sub	r18, r30
    280e:	3f 0b       	sbc	r19, r31
    2810:	28 17       	cp	r18, r24
    2812:	39 07       	cpc	r19, r25
    2814:	78 f0       	brcs	.+30     	; 0x2834 <malloc+0x124>
    2816:	ac 01       	movw	r20, r24
    2818:	4e 5f       	subi	r20, 0xFE	; 254
    281a:	5f 4f       	sbci	r21, 0xFF	; 255
    281c:	24 17       	cp	r18, r20
    281e:	35 07       	cpc	r19, r21
    2820:	48 f0       	brcs	.+18     	; 0x2834 <malloc+0x124>
    2822:	4e 0f       	add	r20, r30
    2824:	5f 1f       	adc	r21, r31
    2826:	50 93 c1 0c 	sts	0x0CC1, r21
    282a:	40 93 c0 0c 	sts	0x0CC0, r20
    282e:	81 93       	st	Z+, r24
    2830:	91 93       	st	Z+, r25
    2832:	02 c0       	rjmp	.+4      	; 0x2838 <malloc+0x128>
    2834:	e0 e0       	ldi	r30, 0x00	; 0
    2836:	f0 e0       	ldi	r31, 0x00	; 0
    2838:	cf 01       	movw	r24, r30
    283a:	df 91       	pop	r29
    283c:	cf 91       	pop	r28
    283e:	08 95       	ret

00002840 <free>:
    2840:	cf 93       	push	r28
    2842:	df 93       	push	r29
    2844:	00 97       	sbiw	r24, 0x00	; 0
    2846:	09 f4       	brne	.+2      	; 0x284a <free+0xa>
    2848:	87 c0       	rjmp	.+270    	; 0x2958 <free+0x118>
    284a:	fc 01       	movw	r30, r24
    284c:	32 97       	sbiw	r30, 0x02	; 2
    284e:	13 82       	std	Z+3, r1	; 0x03
    2850:	12 82       	std	Z+2, r1	; 0x02
    2852:	c0 91 c2 0c 	lds	r28, 0x0CC2
    2856:	d0 91 c3 0c 	lds	r29, 0x0CC3
    285a:	20 97       	sbiw	r28, 0x00	; 0
    285c:	81 f4       	brne	.+32     	; 0x287e <free+0x3e>
    285e:	20 81       	ld	r18, Z
    2860:	31 81       	ldd	r19, Z+1	; 0x01
    2862:	28 0f       	add	r18, r24
    2864:	39 1f       	adc	r19, r25
    2866:	80 91 c0 0c 	lds	r24, 0x0CC0
    286a:	90 91 c1 0c 	lds	r25, 0x0CC1
    286e:	82 17       	cp	r24, r18
    2870:	93 07       	cpc	r25, r19
    2872:	79 f5       	brne	.+94     	; 0x28d2 <free+0x92>
    2874:	f0 93 c1 0c 	sts	0x0CC1, r31
    2878:	e0 93 c0 0c 	sts	0x0CC0, r30
    287c:	6d c0       	rjmp	.+218    	; 0x2958 <free+0x118>
    287e:	de 01       	movw	r26, r28
    2880:	20 e0       	ldi	r18, 0x00	; 0
    2882:	30 e0       	ldi	r19, 0x00	; 0
    2884:	ae 17       	cp	r26, r30
    2886:	bf 07       	cpc	r27, r31
    2888:	50 f4       	brcc	.+20     	; 0x289e <free+0x5e>
    288a:	12 96       	adiw	r26, 0x02	; 2
    288c:	4d 91       	ld	r20, X+
    288e:	5c 91       	ld	r21, X
    2890:	13 97       	sbiw	r26, 0x03	; 3
    2892:	9d 01       	movw	r18, r26
    2894:	41 15       	cp	r20, r1
    2896:	51 05       	cpc	r21, r1
    2898:	09 f1       	breq	.+66     	; 0x28dc <free+0x9c>
    289a:	da 01       	movw	r26, r20
    289c:	f3 cf       	rjmp	.-26     	; 0x2884 <free+0x44>
    289e:	b3 83       	std	Z+3, r27	; 0x03
    28a0:	a2 83       	std	Z+2, r26	; 0x02
    28a2:	40 81       	ld	r20, Z
    28a4:	51 81       	ldd	r21, Z+1	; 0x01
    28a6:	84 0f       	add	r24, r20
    28a8:	95 1f       	adc	r25, r21
    28aa:	8a 17       	cp	r24, r26
    28ac:	9b 07       	cpc	r25, r27
    28ae:	71 f4       	brne	.+28     	; 0x28cc <free+0x8c>
    28b0:	8d 91       	ld	r24, X+
    28b2:	9c 91       	ld	r25, X
    28b4:	11 97       	sbiw	r26, 0x01	; 1
    28b6:	84 0f       	add	r24, r20
    28b8:	95 1f       	adc	r25, r21
    28ba:	02 96       	adiw	r24, 0x02	; 2
    28bc:	91 83       	std	Z+1, r25	; 0x01
    28be:	80 83       	st	Z, r24
    28c0:	12 96       	adiw	r26, 0x02	; 2
    28c2:	8d 91       	ld	r24, X+
    28c4:	9c 91       	ld	r25, X
    28c6:	13 97       	sbiw	r26, 0x03	; 3
    28c8:	93 83       	std	Z+3, r25	; 0x03
    28ca:	82 83       	std	Z+2, r24	; 0x02
    28cc:	21 15       	cp	r18, r1
    28ce:	31 05       	cpc	r19, r1
    28d0:	29 f4       	brne	.+10     	; 0x28dc <free+0x9c>
    28d2:	f0 93 c3 0c 	sts	0x0CC3, r31
    28d6:	e0 93 c2 0c 	sts	0x0CC2, r30
    28da:	3e c0       	rjmp	.+124    	; 0x2958 <free+0x118>
    28dc:	d9 01       	movw	r26, r18
    28de:	13 96       	adiw	r26, 0x03	; 3
    28e0:	fc 93       	st	X, r31
    28e2:	ee 93       	st	-X, r30
    28e4:	12 97       	sbiw	r26, 0x02	; 2
    28e6:	4d 91       	ld	r20, X+
    28e8:	5d 91       	ld	r21, X+
    28ea:	a4 0f       	add	r26, r20
    28ec:	b5 1f       	adc	r27, r21
    28ee:	ea 17       	cp	r30, r26
    28f0:	fb 07       	cpc	r31, r27
    28f2:	79 f4       	brne	.+30     	; 0x2912 <free+0xd2>
    28f4:	80 81       	ld	r24, Z
    28f6:	91 81       	ldd	r25, Z+1	; 0x01
    28f8:	84 0f       	add	r24, r20
    28fa:	95 1f       	adc	r25, r21
    28fc:	02 96       	adiw	r24, 0x02	; 2
    28fe:	d9 01       	movw	r26, r18
    2900:	11 96       	adiw	r26, 0x01	; 1
    2902:	9c 93       	st	X, r25
    2904:	8e 93       	st	-X, r24
    2906:	82 81       	ldd	r24, Z+2	; 0x02
    2908:	93 81       	ldd	r25, Z+3	; 0x03
    290a:	13 96       	adiw	r26, 0x03	; 3
    290c:	9c 93       	st	X, r25
    290e:	8e 93       	st	-X, r24
    2910:	12 97       	sbiw	r26, 0x02	; 2
    2912:	e0 e0       	ldi	r30, 0x00	; 0
    2914:	f0 e0       	ldi	r31, 0x00	; 0
    2916:	8a 81       	ldd	r24, Y+2	; 0x02
    2918:	9b 81       	ldd	r25, Y+3	; 0x03
    291a:	00 97       	sbiw	r24, 0x00	; 0
    291c:	19 f0       	breq	.+6      	; 0x2924 <free+0xe4>
    291e:	fe 01       	movw	r30, r28
    2920:	ec 01       	movw	r28, r24
    2922:	f9 cf       	rjmp	.-14     	; 0x2916 <free+0xd6>
    2924:	ce 01       	movw	r24, r28
    2926:	02 96       	adiw	r24, 0x02	; 2
    2928:	28 81       	ld	r18, Y
    292a:	39 81       	ldd	r19, Y+1	; 0x01
    292c:	82 0f       	add	r24, r18
    292e:	93 1f       	adc	r25, r19
    2930:	20 91 c0 0c 	lds	r18, 0x0CC0
    2934:	30 91 c1 0c 	lds	r19, 0x0CC1
    2938:	28 17       	cp	r18, r24
    293a:	39 07       	cpc	r19, r25
    293c:	69 f4       	brne	.+26     	; 0x2958 <free+0x118>
    293e:	30 97       	sbiw	r30, 0x00	; 0
    2940:	29 f4       	brne	.+10     	; 0x294c <free+0x10c>
    2942:	10 92 c3 0c 	sts	0x0CC3, r1
    2946:	10 92 c2 0c 	sts	0x0CC2, r1
    294a:	02 c0       	rjmp	.+4      	; 0x2950 <free+0x110>
    294c:	13 82       	std	Z+3, r1	; 0x03
    294e:	12 82       	std	Z+2, r1	; 0x02
    2950:	d0 93 c1 0c 	sts	0x0CC1, r29
    2954:	c0 93 c0 0c 	sts	0x0CC0, r28
    2958:	df 91       	pop	r29
    295a:	cf 91       	pop	r28
    295c:	08 95       	ret

0000295e <strnlen_P>:
    295e:	fc 01       	movw	r30, r24
    2960:	05 90       	lpm	r0, Z+
    2962:	61 50       	subi	r22, 0x01	; 1
    2964:	70 40       	sbci	r23, 0x00	; 0
    2966:	01 10       	cpse	r0, r1
    2968:	d8 f7       	brcc	.-10     	; 0x2960 <strnlen_P+0x2>
    296a:	80 95       	com	r24
    296c:	90 95       	com	r25
    296e:	8e 0f       	add	r24, r30
    2970:	9f 1f       	adc	r25, r31
    2972:	08 95       	ret

00002974 <memset>:
    2974:	dc 01       	movw	r26, r24
    2976:	01 c0       	rjmp	.+2      	; 0x297a <memset+0x6>
    2978:	6d 93       	st	X+, r22
    297a:	41 50       	subi	r20, 0x01	; 1
    297c:	50 40       	sbci	r21, 0x00	; 0
    297e:	e0 f7       	brcc	.-8      	; 0x2978 <memset+0x4>
    2980:	08 95       	ret

00002982 <strnlen>:
    2982:	fc 01       	movw	r30, r24
    2984:	61 50       	subi	r22, 0x01	; 1
    2986:	70 40       	sbci	r23, 0x00	; 0
    2988:	01 90       	ld	r0, Z+
    298a:	01 10       	cpse	r0, r1
    298c:	d8 f7       	brcc	.-10     	; 0x2984 <strnlen+0x2>
    298e:	80 95       	com	r24
    2990:	90 95       	com	r25
    2992:	8e 0f       	add	r24, r30
    2994:	9f 1f       	adc	r25, r31
    2996:	08 95       	ret

00002998 <fputc>:
    2998:	0f 93       	push	r16
    299a:	1f 93       	push	r17
    299c:	cf 93       	push	r28
    299e:	df 93       	push	r29
    29a0:	18 2f       	mov	r17, r24
    29a2:	09 2f       	mov	r16, r25
    29a4:	eb 01       	movw	r28, r22
    29a6:	8b 81       	ldd	r24, Y+3	; 0x03
    29a8:	81 fd       	sbrc	r24, 1
    29aa:	03 c0       	rjmp	.+6      	; 0x29b2 <fputc+0x1a>
    29ac:	8f ef       	ldi	r24, 0xFF	; 255
    29ae:	9f ef       	ldi	r25, 0xFF	; 255
    29b0:	20 c0       	rjmp	.+64     	; 0x29f2 <fputc+0x5a>
    29b2:	82 ff       	sbrs	r24, 2
    29b4:	10 c0       	rjmp	.+32     	; 0x29d6 <fputc+0x3e>
    29b6:	4e 81       	ldd	r20, Y+6	; 0x06
    29b8:	5f 81       	ldd	r21, Y+7	; 0x07
    29ba:	2c 81       	ldd	r18, Y+4	; 0x04
    29bc:	3d 81       	ldd	r19, Y+5	; 0x05
    29be:	42 17       	cp	r20, r18
    29c0:	53 07       	cpc	r21, r19
    29c2:	7c f4       	brge	.+30     	; 0x29e2 <fputc+0x4a>
    29c4:	e8 81       	ld	r30, Y
    29c6:	f9 81       	ldd	r31, Y+1	; 0x01
    29c8:	9f 01       	movw	r18, r30
    29ca:	2f 5f       	subi	r18, 0xFF	; 255
    29cc:	3f 4f       	sbci	r19, 0xFF	; 255
    29ce:	39 83       	std	Y+1, r19	; 0x01
    29d0:	28 83       	st	Y, r18
    29d2:	10 83       	st	Z, r17
    29d4:	06 c0       	rjmp	.+12     	; 0x29e2 <fputc+0x4a>
    29d6:	e8 85       	ldd	r30, Y+8	; 0x08
    29d8:	f9 85       	ldd	r31, Y+9	; 0x09
    29da:	81 2f       	mov	r24, r17
    29dc:	19 95       	eicall
    29de:	89 2b       	or	r24, r25
    29e0:	29 f7       	brne	.-54     	; 0x29ac <fputc+0x14>
    29e2:	2e 81       	ldd	r18, Y+6	; 0x06
    29e4:	3f 81       	ldd	r19, Y+7	; 0x07
    29e6:	2f 5f       	subi	r18, 0xFF	; 255
    29e8:	3f 4f       	sbci	r19, 0xFF	; 255
    29ea:	3f 83       	std	Y+7, r19	; 0x07
    29ec:	2e 83       	std	Y+6, r18	; 0x06
    29ee:	81 2f       	mov	r24, r17
    29f0:	90 2f       	mov	r25, r16
    29f2:	df 91       	pop	r29
    29f4:	cf 91       	pop	r28
    29f6:	1f 91       	pop	r17
    29f8:	0f 91       	pop	r16
    29fa:	08 95       	ret

000029fc <__ultoa_invert>:
    29fc:	fa 01       	movw	r30, r20
    29fe:	aa 27       	eor	r26, r26
    2a00:	28 30       	cpi	r18, 0x08	; 8
    2a02:	51 f1       	breq	.+84     	; 0x2a58 <__ultoa_invert+0x5c>
    2a04:	20 31       	cpi	r18, 0x10	; 16
    2a06:	81 f1       	breq	.+96     	; 0x2a68 <__ultoa_invert+0x6c>
    2a08:	e8 94       	clt
    2a0a:	6f 93       	push	r22
    2a0c:	6e 7f       	andi	r22, 0xFE	; 254
    2a0e:	6e 5f       	subi	r22, 0xFE	; 254
    2a10:	7f 4f       	sbci	r23, 0xFF	; 255
    2a12:	8f 4f       	sbci	r24, 0xFF	; 255
    2a14:	9f 4f       	sbci	r25, 0xFF	; 255
    2a16:	af 4f       	sbci	r26, 0xFF	; 255
    2a18:	b1 e0       	ldi	r27, 0x01	; 1
    2a1a:	3e d0       	rcall	.+124    	; 0x2a98 <__ultoa_invert+0x9c>
    2a1c:	b4 e0       	ldi	r27, 0x04	; 4
    2a1e:	3c d0       	rcall	.+120    	; 0x2a98 <__ultoa_invert+0x9c>
    2a20:	67 0f       	add	r22, r23
    2a22:	78 1f       	adc	r23, r24
    2a24:	89 1f       	adc	r24, r25
    2a26:	9a 1f       	adc	r25, r26
    2a28:	a1 1d       	adc	r26, r1
    2a2a:	68 0f       	add	r22, r24
    2a2c:	79 1f       	adc	r23, r25
    2a2e:	8a 1f       	adc	r24, r26
    2a30:	91 1d       	adc	r25, r1
    2a32:	a1 1d       	adc	r26, r1
    2a34:	6a 0f       	add	r22, r26
    2a36:	71 1d       	adc	r23, r1
    2a38:	81 1d       	adc	r24, r1
    2a3a:	91 1d       	adc	r25, r1
    2a3c:	a1 1d       	adc	r26, r1
    2a3e:	20 d0       	rcall	.+64     	; 0x2a80 <__ultoa_invert+0x84>
    2a40:	09 f4       	brne	.+2      	; 0x2a44 <__ultoa_invert+0x48>
    2a42:	68 94       	set
    2a44:	3f 91       	pop	r19
    2a46:	2a e0       	ldi	r18, 0x0A	; 10
    2a48:	26 9f       	mul	r18, r22
    2a4a:	11 24       	eor	r1, r1
    2a4c:	30 19       	sub	r19, r0
    2a4e:	30 5d       	subi	r19, 0xD0	; 208
    2a50:	31 93       	st	Z+, r19
    2a52:	de f6       	brtc	.-74     	; 0x2a0a <__ultoa_invert+0xe>
    2a54:	cf 01       	movw	r24, r30
    2a56:	08 95       	ret
    2a58:	46 2f       	mov	r20, r22
    2a5a:	47 70       	andi	r20, 0x07	; 7
    2a5c:	40 5d       	subi	r20, 0xD0	; 208
    2a5e:	41 93       	st	Z+, r20
    2a60:	b3 e0       	ldi	r27, 0x03	; 3
    2a62:	0f d0       	rcall	.+30     	; 0x2a82 <__ultoa_invert+0x86>
    2a64:	c9 f7       	brne	.-14     	; 0x2a58 <__ultoa_invert+0x5c>
    2a66:	f6 cf       	rjmp	.-20     	; 0x2a54 <__ultoa_invert+0x58>
    2a68:	46 2f       	mov	r20, r22
    2a6a:	4f 70       	andi	r20, 0x0F	; 15
    2a6c:	40 5d       	subi	r20, 0xD0	; 208
    2a6e:	4a 33       	cpi	r20, 0x3A	; 58
    2a70:	18 f0       	brcs	.+6      	; 0x2a78 <__ultoa_invert+0x7c>
    2a72:	49 5d       	subi	r20, 0xD9	; 217
    2a74:	31 fd       	sbrc	r19, 1
    2a76:	40 52       	subi	r20, 0x20	; 32
    2a78:	41 93       	st	Z+, r20
    2a7a:	02 d0       	rcall	.+4      	; 0x2a80 <__ultoa_invert+0x84>
    2a7c:	a9 f7       	brne	.-22     	; 0x2a68 <__ultoa_invert+0x6c>
    2a7e:	ea cf       	rjmp	.-44     	; 0x2a54 <__ultoa_invert+0x58>
    2a80:	b4 e0       	ldi	r27, 0x04	; 4
    2a82:	a6 95       	lsr	r26
    2a84:	97 95       	ror	r25
    2a86:	87 95       	ror	r24
    2a88:	77 95       	ror	r23
    2a8a:	67 95       	ror	r22
    2a8c:	ba 95       	dec	r27
    2a8e:	c9 f7       	brne	.-14     	; 0x2a82 <__ultoa_invert+0x86>
    2a90:	00 97       	sbiw	r24, 0x00	; 0
    2a92:	61 05       	cpc	r22, r1
    2a94:	71 05       	cpc	r23, r1
    2a96:	08 95       	ret
    2a98:	9b 01       	movw	r18, r22
    2a9a:	ac 01       	movw	r20, r24
    2a9c:	0a 2e       	mov	r0, r26
    2a9e:	06 94       	lsr	r0
    2aa0:	57 95       	ror	r21
    2aa2:	47 95       	ror	r20
    2aa4:	37 95       	ror	r19
    2aa6:	27 95       	ror	r18
    2aa8:	ba 95       	dec	r27
    2aaa:	c9 f7       	brne	.-14     	; 0x2a9e <__ultoa_invert+0xa2>
    2aac:	62 0f       	add	r22, r18
    2aae:	73 1f       	adc	r23, r19
    2ab0:	84 1f       	adc	r24, r20
    2ab2:	95 1f       	adc	r25, r21
    2ab4:	a0 1d       	adc	r26, r0
    2ab6:	08 95       	ret

00002ab8 <_exit>:
    2ab8:	f8 94       	cli

00002aba <__stop_program>:
    2aba:	ff cf       	rjmp	.-2      	; 0x2aba <__stop_program>
